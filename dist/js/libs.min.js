!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,(function(){"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(i,s){void 0===i&&(i={}),void 0===s&&(s={}),Object.keys(s).forEach((function(a){void 0===i[a]?i[a]=s[a]:e(s[a])&&e(i[a])&&Object.keys(s[a]).length>0&&t(i[a],s[a])}))}var i="undefined"!=typeof document?document:{},s={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};t(i,s);var a="undefined"!=typeof window?window:{};t(a,{document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});var n=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function r(e,t){var s=[],r=0;if(e&&!t&&e instanceof n)return e;if(e)if("string"==typeof e){var o,l,u=e.trim();if(u.indexOf("<")>=0&&u.indexOf(">")>=0){var h="div";for(0===u.indexOf("<li")&&(h="ul"),0===u.indexOf("<tr")&&(h="tbody"),0!==u.indexOf("<td")&&0!==u.indexOf("<th")||(h="tr"),0===u.indexOf("<tbody")&&(h="table"),0===u.indexOf("<option")&&(h="select"),(l=i.createElement(h)).innerHTML=u,r=0;r<l.childNodes.length;r+=1)s.push(l.childNodes[r])}else for(o=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||i).querySelectorAll(e.trim()):[i.getElementById(e.trim().split("#")[1])],r=0;r<o.length;r+=1)o[r]&&s.push(o[r])}else if(e.nodeType||e===a||e===i)s.push(e);else if(e.length>0&&e[0].nodeType)for(r=0;r<e.length;r+=1)s.push(e[r]);return new n(s)}function o(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}r.fn=n.prototype,r.Class=n,r.Dom7=n;var l={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var s=0;s<this.length;s+=1)if(2===i.length)this[s].setAttribute(e,t);else for(var a in e)this[s][a]=e[a],this[s].setAttribute(a,e[a]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var s=0;s<this.length;s+=1)(i=this[s]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var a=i.getAttribute("data-"+e);return a||void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];var s=t[0],a=t[1],n=t[2],o=t[3];function l(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),r(t).is(a))n.apply(t,i);else for(var s=r(t).parents(),o=0;o<s.length;o+=1)r(s[o]).is(a)&&n.apply(s[o],i)}}function u(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof t[1]&&(s=(e=t)[0],n=e[1],o=e[2],a=void 0),o||(o=!1);for(var h,d=s.split(" "),c=0;c<this.length;c+=1){var p=this[c];if(a)for(h=0;h<d.length;h+=1){var f=d[h];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:n,proxyListener:l}),p.addEventListener(f,l,o)}else for(h=0;h<d.length;h+=1){var v=d[h];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[v]||(p.dom7Listeners[v]=[]),p.dom7Listeners[v].push({listener:n,proxyListener:u}),p.addEventListener(v,u,o)}}return this},off:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];var s=t[0],a=t[1],n=t[2],r=t[3];"function"==typeof t[1]&&(s=(e=t)[0],n=e[1],r=e[2],a=void 0),r||(r=!1);for(var o=s.split(" "),l=0;l<o.length;l+=1)for(var u=o[l],h=0;h<this.length;h+=1){var d=this[h],c=void 0;if(!a&&d.dom7Listeners?c=d.dom7Listeners[u]:a&&d.dom7LiveListeners&&(c=d.dom7LiveListeners[u]),c&&c.length)for(var p=c.length-1;p>=0;p-=1){var f=c[p];n&&f.listener===n||n&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===n?(d.removeEventListener(u,f.proxyListener,r),c.splice(p,1)):n||(d.removeEventListener(u,f.proxyListener,r),c.splice(p,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var s=e[0].split(" "),n=e[1],r=0;r<s.length;r+=1)for(var o=s[r],l=0;l<this.length;l+=1){var u=this[l],h=void 0;try{h=new a.CustomEvent(o,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(h=i.createEvent("Event")).initEvent(o,!0,!0),h.detail=n}u.dom7EventData=e.filter((function(e,t){return t>0})),u.dispatchEvent(h),u.dom7EventData=[],delete u.dom7EventData}return this},transitionEnd:function(e){var t,i=["webkitTransitionEnd","transitionend"],s=this;function a(n){if(n.target===this)for(e.call(this,n),t=0;t<i.length;t+=1)s.off(i[t],a)}if(e)for(t=0;t<i.length;t+=1)s.on(i[t],a);return this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),s=i.body,n=e.clientTop||s.clientTop||0,r=e.clientLeft||s.clientLeft||0,o=e===a?a.scrollY:e.scrollTop,l=e===a?a.scrollX:e.scrollLeft;return{top:t.top+o-n,left:t.left+l-r}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var s in e)this[i].style[s]=e[s];return this}if(this[0])return a.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,s,o=this[0];if(!o||void 0===e)return!1;if("string"==typeof e){if(o.matches)return o.matches(e);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(e);if(o.msMatchesSelector)return o.msMatchesSelector(e);for(t=r(e),s=0;s<t.length;s+=1)if(t[s]===o)return!0;return!1}if(e===i)return o===i;if(e===a)return o===a;if(e.nodeType||e instanceof n){for(t=e.nodeType?[e]:e,s=0;s<t.length;s+=1)if(t[s]===o)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new n(e>i-1?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],s=arguments.length;s--;)t[s]=arguments[s];for(var a=0;a<t.length;a+=1){e=t[a];for(var r=0;r<this.length;r+=1)if("string"==typeof e){var o=i.createElement("div");for(o.innerHTML=e;o.firstChild;)this[r].appendChild(o.firstChild)}else if(e instanceof n)for(var l=0;l<e.length;l+=1)this[r].appendChild(e[l]);else this[r].appendChild(e)}return this},prepend:function(e){var t,s;for(t=0;t<this.length;t+=1)if("string"==typeof e){var a=i.createElement("div");for(a.innerHTML=e,s=a.childNodes.length-1;s>=0;s-=1)this[t].insertBefore(a.childNodes[s],this[t].childNodes[0])}else if(e instanceof n)for(s=0;s<e.length;s+=1)this[t].insertBefore(e[s],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&r(this[0].nextElementSibling).is(e)?new n([this[0].nextElementSibling]):new n([]):this[0].nextElementSibling?new n([this[0].nextElementSibling]):new n([]):new n([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new n([]);for(;i.nextElementSibling;){var s=i.nextElementSibling;e?r(s).is(e)&&t.push(s):t.push(s),i=s}return new n(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&r(t.previousElementSibling).is(e)?new n([t.previousElementSibling]):new n([]):t.previousElementSibling?new n([t.previousElementSibling]):new n([])}return new n([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new n([]);for(;i.previousElementSibling;){var s=i.previousElementSibling;e?r(s).is(e)&&t.push(s):t.push(s),i=s}return new n(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?r(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return r(o(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].parentNode;s;)e?r(s).is(e)&&t.push(s):t.push(s),s=s.parentNode;return r(o(t))},closest:function(e){var t=this;return void 0===e?new n([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].querySelectorAll(e),a=0;a<s.length;a+=1)t.push(s[a]);return new n(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].childNodes,a=0;a<s.length;a+=1)e?1===s[a].nodeType&&r(s[a]).is(e)&&t.push(s[a]):1===s[a].nodeType&&t.push(s[a]);return new n(o(t))},filter:function(e){for(var t=[],i=0;i<this.length;i+=1)e.call(this[i],i,this[i])&&t.push(this[i]);return new n(t)},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s,a=this;for(i=0;i<e.length;i+=1){var n=r(e[i]);for(s=0;s<n.length;s+=1)a[a.length]=n[s],a.length+=1}return a},styles:function(){return this[0]?a.getComputedStyle(this[0],null):{}}};Object.keys(l).forEach((function(e){r.fn[e]=r.fn[e]||l[e]}));var u={deleteProps:function(e){var t=e;Object.keys(t).forEach((function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,s,n;void 0===t&&(t="x");var r=a.getComputedStyle(e,null);return a.WebKitCSSMatrix?((s=r.transform||r.webkitTransform).split(",").length>6&&(s=s.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),n=new a.WebKitCSSMatrix("none"===s?"":s)):i=(n=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(s=a.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=a.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0},parseUrlQuery:function(e){var t,i,s,n,r={},o=e||a.location.href;if("string"==typeof o&&o.length)for(n=(i=(o=o.indexOf("?")>-1?o.replace(/\S*\?/,""):"").split("&").filter((function(e){return""!==e}))).length,t=0;t<n;t+=1)s=i[t].replace(/#\S+/g,"").split("="),r[decodeURIComponent(s[0])]=void 0===s[1]?void 0:decodeURIComponent(s[1])||"";return r},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),s=1;s<e.length;s+=1){var a=e[s];if(null!=a)for(var n=Object.keys(Object(a)),r=0,o=n.length;r<o;r+=1){var l=n[r],h=Object.getOwnPropertyDescriptor(a,l);void 0!==h&&h.enumerable&&(u.isObject(i[l])&&u.isObject(a[l])?u.extend(i[l],a[l]):!u.isObject(i[l])&&u.isObject(a[l])?(i[l]={},u.extend(i[l],a[l])):i[l]=a[l])}}return i}},h={touch:!!("ontouchstart"in a||a.DocumentTouch&&i instanceof a.DocumentTouch),pointerEvents:!!a.PointerEvent&&"maxTouchPoints"in a.navigator&&a.navigator.maxTouchPoints>=0,observer:"MutationObserver"in a||"WebkitMutationObserver"in a,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});a.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in a},d=function(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach((function(e){t.on(e,t.params.on[e])}))},c={components:{configurable:!0}};d.prototype.on=function(e,t,i){var s=this;if("function"!=typeof t)return s;var a=i?"unshift":"push";return e.split(" ").forEach((function(e){s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][a](t)})),s},d.prototype.once=function(e,t,i){var s=this;if("function"!=typeof t)return s;function a(){for(var i=[],n=arguments.length;n--;)i[n]=arguments[n];s.off(e,a),a.f7proxy&&delete a.f7proxy,t.apply(s,i)}return a.f7proxy=t,s.on(e,a,i)},d.prototype.off=function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].length&&i.eventsListeners[e].forEach((function(s,a){(s===t||s.f7proxy&&s.f7proxy===t)&&i.eventsListeners[e].splice(a,1)}))})),i):i},d.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s,a,n=this;if(!n.eventsListeners)return n;"string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),a=n):(i=e[0].events,s=e[0].data,a=e[0].context||n);var r=Array.isArray(i)?i:i.split(" ");return r.forEach((function(e){if(n.eventsListeners&&n.eventsListeners[e]){var t=[];n.eventsListeners[e].forEach((function(e){t.push(e)})),t.forEach((function(e){e.apply(a,s)}))}})),n},d.prototype.useModulesParams=function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var s=t.modules[i];s.params&&u.extend(e,s.params)}))},d.prototype.useModules=function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var s=t.modules[i],a=e[i]||{};s.instance&&Object.keys(s.instance).forEach((function(e){var i=s.instance[e];t[e]="function"==typeof i?i.bind(t):i})),s.on&&t.on&&Object.keys(s.on).forEach((function(e){t.on(e,s.on[e])})),s.create&&s.create.bind(t)(a)}))},c.components.set=function(e){this.use&&this.use(e)},d.installModule=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var s=this;s.prototype.modules||(s.prototype.modules={});var a=e.name||Object.keys(s.prototype.modules).length+"_"+u.now();return s.prototype.modules[a]=e,e.proto&&Object.keys(e.proto).forEach((function(t){s.prototype[t]=e.proto[t]})),e.static&&Object.keys(e.static).forEach((function(t){s[t]=e.static[t]})),e.install&&e.install.apply(s,t),s},d.use=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var s=this;return Array.isArray(e)?(e.forEach((function(e){return s.installModule(e)})),s):s.installModule.apply(s,[e].concat(t))},Object.defineProperties(d,c);var p={updateSize:function(){var e,t,i=this.$el;e=void 0!==this.params.width?this.params.width:i[0].clientWidth,t=void 0!==this.params.height?this.params.height:i[0].clientHeight,0===e&&this.isHorizontal()||0===t&&this.isVertical()||(e=e-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),t=t-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),u.extend(this,{width:e,height:t,size:this.isHorizontal()?e:t}))},updateSlides:function(){var e=this.params,t=this.$wrapperEl,i=this.size,s=this.rtlTranslate,n=this.wrongRTL,r=this.virtual&&e.virtual.enabled,o=r?this.virtual.slides.length:this.slides.length,l=t.children("."+this.params.slideClass),h=r?this.virtual.slides.length:l.length,d=[],c=[],p=[];function f(t){return!e.cssMode||t!==l.length-1}var v=e.slidesOffsetBefore;"function"==typeof v&&(v=e.slidesOffsetBefore.call(this));var m=e.slidesOffsetAfter;"function"==typeof m&&(m=e.slidesOffsetAfter.call(this));var g=this.snapGrid.length,y=this.snapGrid.length,b=e.spaceBetween,w=-v,E=0,k=0;if(void 0!==i){var C,S;"string"==typeof b&&b.indexOf("%")>=0&&(b=parseFloat(b.replace("%",""))/100*i),this.virtualSize=-b,s?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),e.slidesPerColumn>1&&(C=Math.floor(h/e.slidesPerColumn)===h/this.params.slidesPerColumn?h:Math.ceil(h/e.slidesPerColumn)*e.slidesPerColumn,"auto"!==e.slidesPerView&&"row"===e.slidesPerColumnFill&&(C=Math.max(C,e.slidesPerView*e.slidesPerColumn)));for(var x,T=e.slidesPerColumn,M=C/T,A=Math.floor(h/e.slidesPerColumn),P=0;P<h;P+=1){S=0;var _=l.eq(P);if(e.slidesPerColumn>1){var D=void 0,F=void 0,z=void 0;if("row"===e.slidesPerColumnFill&&e.slidesPerGroup>1){var I=Math.floor(P/(e.slidesPerGroup*e.slidesPerColumn)),O=P-e.slidesPerColumn*e.slidesPerGroup*I,L=0===I?e.slidesPerGroup:Math.min(Math.ceil((h-I*T*e.slidesPerGroup)/T),e.slidesPerGroup);D=(F=O-(z=Math.floor(O/L))*L+I*e.slidesPerGroup)+z*C/T,_.css({"-webkit-box-ordinal-group":D,"-moz-box-ordinal-group":D,"-ms-flex-order":D,"-webkit-order":D,order:D})}else"column"===e.slidesPerColumnFill?(z=P-(F=Math.floor(P/T))*T,(F>A||F===A&&z===T-1)&&(z+=1)>=T&&(z=0,F+=1)):F=P-(z=Math.floor(P/M))*M;_.css("margin-"+(this.isHorizontal()?"top":"left"),0!==z&&e.spaceBetween&&e.spaceBetween+"px")}if("none"!==_.css("display")){if("auto"===e.slidesPerView){var B=a.getComputedStyle(_[0],null),$=_[0].style.transform,V=_[0].style.webkitTransform;if($&&(_[0].style.transform="none"),V&&(_[0].style.webkitTransform="none"),e.roundLengths)S=this.isHorizontal()?_.outerWidth(!0):_.outerHeight(!0);else if(this.isHorizontal()){var R=parseFloat(B.getPropertyValue("width")),j=parseFloat(B.getPropertyValue("padding-left")),N=parseFloat(B.getPropertyValue("padding-right")),H=parseFloat(B.getPropertyValue("margin-left")),G=parseFloat(B.getPropertyValue("margin-right")),Y=B.getPropertyValue("box-sizing");S=Y&&"border-box"===Y?R+H+G:R+j+N+H+G}else{var X=parseFloat(B.getPropertyValue("height")),q=parseFloat(B.getPropertyValue("padding-top")),W=parseFloat(B.getPropertyValue("padding-bottom")),U=parseFloat(B.getPropertyValue("margin-top")),K=parseFloat(B.getPropertyValue("margin-bottom")),Z=B.getPropertyValue("box-sizing");S=Z&&"border-box"===Z?X+U+K:X+q+W+U+K}$&&(_[0].style.transform=$),V&&(_[0].style.webkitTransform=V),e.roundLengths&&(S=Math.floor(S))}else S=(i-(e.slidesPerView-1)*b)/e.slidesPerView,e.roundLengths&&(S=Math.floor(S)),l[P]&&(this.isHorizontal()?l[P].style.width=S+"px":l[P].style.height=S+"px");l[P]&&(l[P].swiperSlideSize=S),p.push(S),e.centeredSlides?(w=w+S/2+E/2+b,0===E&&0!==P&&(w=w-i/2-b),0===P&&(w=w-i/2-b),Math.abs(w)<.001&&(w=0),e.roundLengths&&(w=Math.floor(w)),k%e.slidesPerGroup==0&&d.push(w),c.push(w)):(e.roundLengths&&(w=Math.floor(w)),(k-Math.min(this.params.slidesPerGroupSkip,k))%this.params.slidesPerGroup==0&&d.push(w),c.push(w),w=w+S+b),this.virtualSize+=S+b,E=S,k+=1}}if(this.virtualSize=Math.max(this.virtualSize,i)+m,s&&n&&("slide"===e.effect||"coverflow"===e.effect)&&t.css({width:this.virtualSize+e.spaceBetween+"px"}),e.setWrapperSize&&(this.isHorizontal()?t.css({width:this.virtualSize+e.spaceBetween+"px"}):t.css({height:this.virtualSize+e.spaceBetween+"px"})),e.slidesPerColumn>1&&(this.virtualSize=(S+e.spaceBetween)*C,this.virtualSize=Math.ceil(this.virtualSize/e.slidesPerColumn)-e.spaceBetween,this.isHorizontal()?t.css({width:this.virtualSize+e.spaceBetween+"px"}):t.css({height:this.virtualSize+e.spaceBetween+"px"}),e.centeredSlides)){x=[];for(var J=0;J<d.length;J+=1){var Q=d[J];e.roundLengths&&(Q=Math.floor(Q)),d[J]<this.virtualSize+d[0]&&x.push(Q)}d=x}if(!e.centeredSlides){x=[];for(var ee=0;ee<d.length;ee+=1){var te=d[ee];e.roundLengths&&(te=Math.floor(te)),d[ee]<=this.virtualSize-i&&x.push(te)}d=x,Math.floor(this.virtualSize-i)-Math.floor(d[d.length-1])>1&&d.push(this.virtualSize-i)}if(0===d.length&&(d=[0]),0!==e.spaceBetween&&(this.isHorizontal()?s?l.filter(f).css({marginLeft:b+"px"}):l.filter(f).css({marginRight:b+"px"}):l.filter(f).css({marginBottom:b+"px"})),e.centeredSlides&&e.centeredSlidesBounds){var ie=0;p.forEach((function(t){ie+=t+(e.spaceBetween?e.spaceBetween:0)}));var se=(ie-=e.spaceBetween)-i;d=d.map((function(e){return e<0?-v:e>se?se+m:e}))}if(e.centerInsufficientSlides){var ae=0;if(p.forEach((function(t){ae+=t+(e.spaceBetween?e.spaceBetween:0)})),(ae-=e.spaceBetween)<i){var ne=(i-ae)/2;d.forEach((function(e,t){d[t]=e-ne})),c.forEach((function(e,t){c[t]=e+ne}))}}u.extend(this,{slides:l,snapGrid:d,slidesGrid:c,slidesSizesGrid:p}),h!==o&&this.emit("slidesLengthChange"),d.length!==g&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),c.length!==y&&this.emit("slidesGridLengthChange"),(e.watchSlidesProgress||e.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&this.params.slidesPerView>1)if(this.params.centeredSlides)this.visibleSlides.each((function(e,t){i.push(t)}));else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var a=this.activeIndex+t;if(a>this.slides.length)break;i.push(this.slides.eq(a)[0])}else i.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var n=i[t].offsetHeight;s=n>s?n:s}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,s=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var a=-e;s&&(a=e),i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o=i[n],l=(a+(t.centeredSlides?this.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+t.spaceBetween);if(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight){var u=-(a-o.swiperSlideOffset),h=u+this.slidesSizesGrid[n];(u>=0&&u<this.size-1||h>1&&h<=this.size||u<=0&&h>=this.size)&&(this.visibleSlides.push(o),this.visibleSlidesIndexes.push(n),i.eq(n).addClass(t.slideVisibleClass))}o.progress=s?-l:l}this.visibleSlides=r(this.visibleSlides)}},updateProgress:function(e){if(void 0===e){var t=this.rtlTranslate?-1:1;e=this&&this.translate&&this.translate*t||0}var i=this.params,s=this.maxTranslate()-this.minTranslate(),a=this.progress,n=this.isBeginning,r=this.isEnd,o=n,l=r;0===s?(a=0,n=!0,r=!0):(n=(a=(e-this.minTranslate())/s)<=0,r=a>=1),u.extend(this,{progress:a,isBeginning:n,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),n&&!o&&this.emit("reachBeginning toEdge"),r&&!l&&this.emit("reachEnd toEdge"),(o&&!n||l&&!r)&&this.emit("fromEdge"),this.emit("progress",a)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,s=this.$wrapperEl,a=this.activeIndex,n=this.realIndex,r=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=r?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+a+'"]'):t.eq(a)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i=this.rtlTranslate?this.translate:-this.translate,s=this.slidesGrid,a=this.snapGrid,n=this.params,r=this.activeIndex,o=this.realIndex,l=this.snapIndex,h=e;if(void 0===h){for(var d=0;d<s.length;d+=1)void 0!==s[d+1]?i>=s[d]&&i<s[d+1]-(s[d+1]-s[d])/2?h=d:i>=s[d]&&i<s[d+1]&&(h=d+1):i>=s[d]&&(h=d);n.normalizeSlideIndex&&(h<0||void 0===h)&&(h=0)}if(a.indexOf(i)>=0)t=a.indexOf(i);else{var c=Math.min(n.slidesPerGroupSkip,h);t=c+Math.floor((h-c)/n.slidesPerGroup)}if(t>=a.length&&(t=a.length-1),h!==r){var p=parseInt(this.slides.eq(h).attr("data-swiper-slide-index")||h,10);u.extend(this,{snapIndex:t,realIndex:p,previousIndex:r,activeIndex:h}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),o!==p&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")}else t!==l&&(this.snapIndex=t,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=r(e.target).closest("."+t.slideClass)[0],s=!1;if(i)for(var a=0;a<this.slides.length;a+=1)this.slides[a]===i&&(s=!0);if(!i||!s)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(r(i).attr("data-swiper-slide-index"),10):this.clickedIndex=r(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}};var f={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,s=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;var n=u.getTranslate(a[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){var i=this.rtlTranslate,s=this.params,a=this.$wrapperEl,n=this.wrapperEl,r=this.progress,o=0,l=0;this.isHorizontal()?o=i?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.cssMode?n[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-o:-l:s.virtualTranslate||a.transform("translate3d("+o+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?o:l;var u=this.maxTranslate()-this.minTranslate();(0===u?0:(e-this.minTranslate())/u)!==r&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,a){var n;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);var r=this,o=r.params,l=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var u,h=r.minTranslate(),d=r.maxTranslate();if(u=s&&e>h?h:s&&e<d?d:e,r.updateProgress(u),o.cssMode){var c=r.isHorizontal();return 0===t?l[c?"scrollLeft":"scrollTop"]=-u:l.scrollTo?l.scrollTo(((n={})[c?"left":"top"]=-u,n.behavior="smooth",n)):l[c?"scrollLeft":"scrollTop"]=-u,!0}return 0===t?(r.setTransition(0),r.setTranslate(u),i&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(u),i&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}};var v={setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.params,a=this.previousIndex;if(!s.cssMode){s.autoHeight&&this.updateAutoHeight();var n=t;if(n||(n=i>a?"next":i<a?"prev":"reset"),this.emit("transitionStart"),e&&i!==a){if("reset"===n)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===n?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.previousIndex,a=this.params;if(this.animating=!1,!a.cssMode){this.setTransition(0);var n=t;if(n||(n=i>s?"next":i<s?"prev":"reset"),this.emit("transitionEnd"),e&&i!==s){if("reset"===n)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===n?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}};var m={slideTo:function(e,t,i,s){var a;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var n=this,r=e;r<0&&(r=0);var o=n.params,l=n.snapGrid,u=n.slidesGrid,h=n.previousIndex,d=n.activeIndex,c=n.rtlTranslate,p=n.wrapperEl;if(n.animating&&o.preventInteractionOnTransition)return!1;var f=Math.min(n.params.slidesPerGroupSkip,r),v=f+Math.floor((r-f)/n.params.slidesPerGroup);v>=l.length&&(v=l.length-1),(d||o.initialSlide||0)===(h||0)&&i&&n.emit("beforeSlideChangeStart");var m,g=-l[v];if(n.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<u.length;y+=1)-Math.floor(100*g)>=Math.floor(100*u[y])&&(r=y);if(n.initialized&&r!==d){if(!n.allowSlideNext&&g<n.translate&&g<n.minTranslate())return!1;if(!n.allowSlidePrev&&g>n.translate&&g>n.maxTranslate()&&(d||0)!==r)return!1}if(m=r>d?"next":r<d?"prev":"reset",c&&-g===n.translate||!c&&g===n.translate)return n.updateActiveIndex(r),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(g),"reset"!==m&&(n.transitionStart(i,m),n.transitionEnd(i,m)),!1;if(o.cssMode){var b=n.isHorizontal(),w=-g;return c&&(w=p.scrollWidth-p.offsetWidth-w),0===t?p[b?"scrollLeft":"scrollTop"]=w:p.scrollTo?p.scrollTo(((a={})[b?"left":"top"]=w,a.behavior="smooth",a)):p[b?"scrollLeft":"scrollTop"]=w,!0}return 0===t?(n.setTransition(0),n.setTranslate(g),n.updateActiveIndex(r),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,m),n.transitionEnd(i,m)):(n.setTransition(t),n.setTranslate(g),n.updateActiveIndex(r),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,m),n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,m))}),n.$wrapperEl[0].addEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,i,s)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,a=this.animating,n=this.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(a)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+n,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,a=this.animating,n=this.snapGrid,r=this.slidesGrid,o=this.rtlTranslate;if(s.loop){if(a)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var u,h=l(o?this.translate:-this.translate),d=n.map((function(e){return l(e)})),c=(r.map((function(e){return l(e)})),n[d.indexOf(h)],n[d.indexOf(h)-1]);return void 0===c&&s.cssMode&&n.forEach((function(e){!c&&h>=e&&(c=e)})),void 0!==c&&(u=r.indexOf(c))<0&&(u=this.activeIndex-1),this.slideTo(u,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===s&&(s=.5);var a=this.activeIndex,n=Math.min(this.params.slidesPerGroupSkip,a),r=n+Math.floor((a-n)/this.params.slidesPerGroup),o=this.rtlTranslate?this.translate:-this.translate;if(o>=this.snapGrid[r]){var l=this.snapGrid[r];o-l>(this.snapGrid[r+1]-l)*s&&(a+=this.params.slidesPerGroup)}else{var u=this.snapGrid[r-1];o-u<=(this.snapGrid[r]-u)*s&&(a-=this.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,this.slidesGrid.length-1),this.slideTo(a,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,s=t.$wrapperEl,a="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(r(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-a/2||n>t.slides.length-t.loopedSlides+a/2?(t.loopFix(),n=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),u.nextTick((function(){t.slideTo(n)}))):t.slideTo(n):n>t.slides.length-a?(t.loopFix(),n=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),u.nextTick((function(){t.slideTo(n)}))):t.slideTo(n)}else t.slideTo(n)}};var g={loopCreate:function(){var e=this,t=e.params,s=e.$wrapperEl;s.children("."+t.slideClass+"."+t.slideDuplicateClass).remove();var a=s.children("."+t.slideClass);if(t.loopFillGroupWithBlank){var n=t.slidesPerGroup-a.length%t.slidesPerGroup;if(n!==t.slidesPerGroup){for(var o=0;o<n;o+=1){var l=r(i.createElement("div")).addClass(t.slideClass+" "+t.slideBlankClass);s.append(l)}a=s.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=a.length),e.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>a.length&&(e.loopedSlides=a.length);var u=[],h=[];a.each((function(t,i){var s=r(i);t<e.loopedSlides&&h.push(i),t<a.length&&t>=a.length-e.loopedSlides&&u.push(i),s.attr("data-swiper-slide-index",t)}));for(var d=0;d<h.length;d+=1)s.append(r(h[d].cloneNode(!0)).addClass(t.slideDuplicateClass));for(var c=u.length-1;c>=0;c-=1)s.prepend(r(u[c].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,s=this.loopedSlides,a=this.allowSlidePrev,n=this.allowSlideNext,r=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-r[t]-this.getTranslate();if(t<s)e=i.length-3*s+t,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l);else if(t>=i.length-s){e=-i.length+t+s,e+=s,this.slideTo(e,0,!1,!0)&&0!==l&&this.setTranslate((o?-this.translate:this.translate)-l)}this.allowSlidePrev=a,this.allowSlideNext=n,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}};var y={setGrabCursor:function(e){if(!(h.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){h.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}};var b,w,E,k,C,S,x,T,M,A,P,_,D,F,z,I={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&t.append(e[s]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&h.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&this.loopDestroy();var a=s+1;if("object"==typeof e&&"length"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);a=s+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&h.observer||this.update(),this.slideTo(a,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,s=this.params,a=this.activeIndex;s.loop&&(a-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+s.slideClass));var n=this.slides.length;if(e<=0)this.prependSlide(t);else if(e>=n)this.appendSlide(t);else{for(var r=a>e?a+1:a,o=[],l=n-1;l>=e;l-=1){var u=this.slides.eq(l);u.remove(),o.unshift(u)}if("object"==typeof t&&"length"in t){for(var d=0;d<t.length;d+=1)t[d]&&i.append(t[d]);r=a>e?a+t.length:a}else i.append(t);for(var c=0;c<o.length;c+=1)i.append(o[c]);s.loop&&this.loopCreate(),s.observer&&h.observer||this.update(),s.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var a,n=s;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)a=e[r],this.slides[a]&&this.slides.eq(a).remove(),a<n&&(n-=1);n=Math.max(n,0)}else a=e,this.slides[a]&&this.slides.eq(a).remove(),a<n&&(n-=1),n=Math.max(n,0);t.loop&&this.loopCreate(),t.observer&&h.observer||this.update(),t.loop?this.slideTo(n+this.loopedSlides,0,!1):this.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},O=(b=a.navigator.platform,w=a.navigator.userAgent,E={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!a.cordova&&!a.phonegap),phonegap:!(!a.cordova&&!a.phonegap),electron:!1},k=a.screen.width,C=a.screen.height,S=w.match(/(Android);?[\s\/]+([\d.]+)?/),x=w.match(/(iPad).*OS\s([\d_]+)/),T=w.match(/(iPod)(.*OS\s([\d_]+))?/),M=!x&&w.match(/(iPhone\sOS|iOS)\s([\d_]+)/),A=w.indexOf("MSIE ")>=0||w.indexOf("Trident/")>=0,P=w.indexOf("Edge/")>=0,_=w.indexOf("Gecko/")>=0&&w.indexOf("Firefox/")>=0,D="Win32"===b,F=w.toLowerCase().indexOf("electron")>=0,z="MacIntel"===b,!x&&z&&h.touch&&(1024===k&&1366===C||834===k&&1194===C||834===k&&1112===C||768===k&&1024===C)&&(x=w.match(/(Version)\/([\d.]+)/),z=!1),E.ie=A,E.edge=P,E.firefox=_,S&&!D&&(E.os="android",E.osVersion=S[2],E.android=!0,E.androidChrome=w.toLowerCase().indexOf("chrome")>=0),(x||M||T)&&(E.os="ios",E.ios=!0),M&&!T&&(E.osVersion=M[2].replace(/_/g,"."),E.iphone=!0),x&&(E.osVersion=x[2].replace(/_/g,"."),E.ipad=!0),T&&(E.osVersion=T[3]?T[3].replace(/_/g,"."):null,E.ipod=!0),E.ios&&E.osVersion&&w.indexOf("Version/")>=0&&"10"===E.osVersion.split(".")[0]&&(E.osVersion=w.toLowerCase().split("version/")[1].split(" ")[0]),E.webView=!(!(M||x||T)||!w.match(/.*AppleWebKit(?!.*Safari)/i)&&!a.navigator.standalone)||a.matchMedia&&a.matchMedia("(display-mode: standalone)").matches,E.webview=E.webView,E.standalone=E.webView,E.desktop=!(E.ios||E.android)||F,E.desktop&&(E.electron=F,E.macos=z,E.windows=D,E.macos&&(E.os="macos"),E.windows&&(E.os="windows")),E.pixelRatio=a.devicePixelRatio||1,E);function L(e){var t=this.touchEventsData,s=this.params,n=this.touches;if(!this.animating||!s.preventInteractionOnTransition){var o=e;o.originalEvent&&(o=o.originalEvent);var l=r(o.target);if(("wrapper"!==s.touchEventsTarget||l.closest(this.wrapperEl).length)&&(t.isTouchEvent="touchstart"===o.type,(t.isTouchEvent||!("which"in o)||3!==o.which)&&!(!t.isTouchEvent&&"button"in o&&o.button>0||t.isTouched&&t.isMoved)))if(s.noSwiping&&l.closest(s.noSwipingSelector?s.noSwipingSelector:"."+s.noSwipingClass)[0])this.allowClick=!0;else if(!s.swipeHandler||l.closest(s.swipeHandler)[0]){n.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,n.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var h=n.currentX,d=n.currentY,c=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,p=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!c||!(h<=p||h>=a.screen.width-p)){if(u.extend(t,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=h,n.startY=d,t.touchStartTime=u.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,s.threshold>0&&(t.allowThresholdMove=!1),"touchstart"!==o.type){var f=!0;l.is(t.formElements)&&(f=!1),i.activeElement&&r(i.activeElement).is(t.formElements)&&i.activeElement!==l[0]&&i.activeElement.blur();var v=f&&this.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||v)&&o.preventDefault()}this.emit("touchStart",o)}}}}function B(e){var t=this.touchEventsData,s=this.params,a=this.touches,n=this.rtlTranslate,o=e;if(o.originalEvent&&(o=o.originalEvent),t.isTouched){if(!t.isTouchEvent||"touchmove"===o.type){var l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),h="touchmove"===o.type?l.pageX:o.pageX,d="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return a.startX=h,void(a.startY=d);if(!this.allowTouchMove)return this.allowClick=!1,void(t.isTouched&&(u.extend(a,{startX:h,startY:d,currentX:h,currentY:d}),t.touchStartTime=u.now()));if(t.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(this.isVertical()){if(d<a.startY&&this.translate<=this.maxTranslate()||d>a.startY&&this.translate>=this.minTranslate())return t.isTouched=!1,void(t.isMoved=!1)}else if(h<a.startX&&this.translate<=this.maxTranslate()||h>a.startX&&this.translate>=this.minTranslate())return;if(t.isTouchEvent&&i.activeElement&&o.target===i.activeElement&&r(o.target).is(t.formElements))return t.isMoved=!0,void(this.allowClick=!1);if(t.allowTouchCallbacks&&this.emit("touchMove",o),!(o.targetTouches&&o.targetTouches.length>1)){a.currentX=h,a.currentY=d;var c=a.currentX-a.startX,p=a.currentY-a.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(c,2)+Math.pow(p,2))<this.params.threshold)){var f;if(void 0===t.isScrolling)this.isHorizontal()&&a.currentY===a.startY||this.isVertical()&&a.currentX===a.startX?t.isScrolling=!1:c*c+p*p>=25&&(f=180*Math.atan2(Math.abs(p),Math.abs(c))/Math.PI,t.isScrolling=this.isHorizontal()?f>s.touchAngle:90-f>s.touchAngle);if(t.isScrolling&&this.emit("touchMoveOpposite",o),void 0===t.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(t.startMoving=!0)),t.isScrolling)t.isTouched=!1;else if(t.startMoving){this.allowClick=!1,!s.cssMode&&o.cancelable&&o.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&o.stopPropagation(),t.isMoved||(s.loop&&this.loopFix(),t.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),t.allowMomentumBounce=!1,!s.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",o)),this.emit("sliderMove",o),t.isMoved=!0;var v=this.isHorizontal()?c:p;a.diff=v,v*=s.touchRatio,n&&(v=-v),this.swipeDirection=v>0?"prev":"next",t.currentTranslate=v+t.startTranslate;var m=!0,g=s.resistanceRatio;if(s.touchReleaseOnEdges&&(g=0),v>0&&t.currentTranslate>this.minTranslate()?(m=!1,s.resistance&&(t.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+t.startTranslate+v,g))):v<0&&t.currentTranslate<this.maxTranslate()&&(m=!1,s.resistance&&(t.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-t.startTranslate-v,g))),m&&(o.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&t.currentTranslate<t.startTranslate&&(t.currentTranslate=t.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&t.currentTranslate>t.startTranslate&&(t.currentTranslate=t.startTranslate),s.threshold>0){if(!(Math.abs(v)>s.threshold||t.allowThresholdMove))return void(t.currentTranslate=t.startTranslate);if(!t.allowThresholdMove)return t.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,t.currentTranslate=t.startTranslate,void(a.diff=this.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),s.freeMode&&(0===t.velocities.length&&t.velocities.push({position:a[this.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:a[this.isHorizontal()?"currentX":"currentY"],time:u.now()})),this.updateProgress(t.currentTranslate),this.setTranslate(t.currentTranslate))}}}}}else t.startMoving&&t.isScrolling&&this.emit("touchMoveOpposite",o)}function $(e){var t=this,i=t.touchEventsData,s=t.params,a=t.touches,n=t.rtlTranslate,r=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,h=e;if(h.originalEvent&&(h=h.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",h),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var d,c=u.now(),p=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(h),t.emit("tap click",h),p<300&&c-i.lastClickTime<300&&t.emit("doubleTap doubleClick",h)),i.lastClickTime=u.now(),u.nextTick((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,d=s.followFinger?n?t.translate:-t.translate:-i.currentTranslate,!s.cssMode)if(s.freeMode){if(d<-t.minTranslate())return void t.slideTo(t.activeIndex);if(d>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){var f=i.velocities.pop(),v=i.velocities.pop(),m=f.position-v.position,g=f.time-v.time;t.velocity=m/g,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(g>150||u.now()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;var y=1e3*s.freeModeMomentumRatio,b=t.velocity*y,w=t.translate+b;n&&(w=-w);var E,k,C=!1,S=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;if(w<t.maxTranslate())s.freeModeMomentumBounce?(w+t.maxTranslate()<-S&&(w=t.maxTranslate()-S),E=t.maxTranslate(),C=!0,i.allowMomentumBounce=!0):w=t.maxTranslate(),s.loop&&s.centeredSlides&&(k=!0);else if(w>t.minTranslate())s.freeModeMomentumBounce?(w-t.minTranslate()>S&&(w=t.minTranslate()+S),E=t.minTranslate(),C=!0,i.allowMomentumBounce=!0):w=t.minTranslate(),s.loop&&s.centeredSlides&&(k=!0);else if(s.freeModeSticky){for(var x,T=0;T<l.length;T+=1)if(l[T]>-w){x=T;break}w=-(w=Math.abs(l[x]-w)<Math.abs(l[x-1]-w)||"next"===t.swipeDirection?l[x]:l[x-1])}if(k&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(y=n?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),s.freeModeSticky){var M=Math.abs((n?-w:w)-t.translate),A=t.slidesSizesGrid[t.activeIndex];y=M<A?s.speed:M<2*A?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&C?(t.updateProgress(E),t.setTransition(y),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout((function(){t.setTranslate(E),r.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(y),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(w),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();(!s.freeModeMomentum||p>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var P=0,_=t.slidesSizesGrid[0],D=0;D<o.length;D+=D<s.slidesPerGroupSkip?1:s.slidesPerGroup){var F=D<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==o[D+F]?d>=o[D]&&d<o[D+F]&&(P=D,_=o[D+F]-o[D]):d>=o[D]&&(P=D,_=o[o.length-1]-o[o.length-2])}var z=(d-o[P])/_,I=P<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(p>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(z>=s.longSwipesRatio?t.slideTo(P+I):t.slideTo(P)),"prev"===t.swipeDirection&&(z>1-s.longSwipesRatio?t.slideTo(P+I):t.slideTo(P))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(h.target===t.navigation.nextEl||h.target===t.navigation.prevEl)?h.target===t.navigation.nextEl?t.slideTo(P+I):t.slideTo(P):("next"===t.swipeDirection&&t.slideTo(P+I),"prev"===t.swipeDirection&&t.slideTo(P))}}}function V(){var e=this.params,t=this.el;if(!t||0!==t.offsetWidth){e.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,s=this.allowSlidePrev,a=this.snapGrid;this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===e.slidesPerView||e.slidesPerView>1)&&this.isEnd&&!this.isBeginning&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=s,this.allowSlideNext=i,this.params.watchOverflow&&a!==this.snapGrid&&this.checkOverflow()}}function R(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function j(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0===i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}var N=!1;function H(){}var G={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},Y={update:p,translate:f,transition:v,slide:m,loop:g,grabCursor:y,manipulation:I,events:{attachEvents:function(){var e=this.params,t=this.touchEvents,s=this.el,a=this.wrapperEl;this.onTouchStart=L.bind(this),this.onTouchMove=B.bind(this),this.onTouchEnd=$.bind(this),e.cssMode&&(this.onScroll=j.bind(this)),this.onClick=R.bind(this);var n=!!e.nested;if(!h.touch&&h.pointerEvents)s.addEventListener(t.start,this.onTouchStart,!1),i.addEventListener(t.move,this.onTouchMove,n),i.addEventListener(t.end,this.onTouchEnd,!1);else{if(h.touch){var r=!("touchstart"!==t.start||!h.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(t.start,this.onTouchStart,r),s.addEventListener(t.move,this.onTouchMove,h.passiveListener?{passive:!1,capture:n}:n),s.addEventListener(t.end,this.onTouchEnd,r),t.cancel&&s.addEventListener(t.cancel,this.onTouchEnd,r),N||(i.addEventListener("touchstart",H),N=!0)}(e.simulateTouch&&!O.ios&&!O.android||e.simulateTouch&&!h.touch&&O.ios)&&(s.addEventListener("mousedown",this.onTouchStart,!1),i.addEventListener("mousemove",this.onTouchMove,n),i.addEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&s.addEventListener("click",this.onClick,!0),e.cssMode&&a.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on(O.ios||O.android?"resize orientationchange observerUpdate":"resize observerUpdate",V,!0):this.on("observerUpdate",V,!0)},detachEvents:function(){var e=this.params,t=this.touchEvents,s=this.el,a=this.wrapperEl,n=!!e.nested;if(!h.touch&&h.pointerEvents)s.removeEventListener(t.start,this.onTouchStart,!1),i.removeEventListener(t.move,this.onTouchMove,n),i.removeEventListener(t.end,this.onTouchEnd,!1);else{if(h.touch){var r=!("onTouchStart"!==t.start||!h.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(t.start,this.onTouchStart,r),s.removeEventListener(t.move,this.onTouchMove,n),s.removeEventListener(t.end,this.onTouchEnd,r),t.cancel&&s.removeEventListener(t.cancel,this.onTouchEnd,r)}(e.simulateTouch&&!O.ios&&!O.android||e.simulateTouch&&!h.touch&&O.ios)&&(s.removeEventListener("mousedown",this.onTouchStart,!1),i.removeEventListener("mousemove",this.onTouchMove,n),i.removeEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&s.removeEventListener("click",this.onClick,!0),e.cssMode&&a.removeEventListener("scroll",this.onScroll),this.off(O.ios||O.android?"resize orientationchange observerUpdate":"resize observerUpdate",V)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides;void 0===i&&(i=0);var s=this.params,a=this.$el,n=s.breakpoints;if(n&&(!n||0!==Object.keys(n).length)){var r=this.getBreakpoint(n);if(r&&this.currentBreakpoint!==r){var o=r in n?n[r]:void 0;o&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=o[e];void 0!==t&&(o[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var l=o||this.originalParams,h=s.slidesPerColumn>1,d=l.slidesPerColumn>1;h&&!d?a.removeClass(s.containerModifierClass+"multirow "+s.containerModifierClass+"multirow-column"):!h&&d&&(a.addClass(s.containerModifierClass+"multirow"),"column"===l.slidesPerColumnFill&&a.addClass(s.containerModifierClass+"multirow-column"));var c=l.direction&&l.direction!==s.direction,p=s.loop&&(l.slidesPerView!==s.slidesPerView||c);c&&t&&this.changeDirection(),u.extend(this.params,l),u.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=r,p&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-i+this.loopedSlides,0,!1)),this.emit("breakpoint",l)}}},getBreakpoint:function(e){if(e){var t=!1,i=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var t=parseFloat(e.substr(1));return{value:a.innerHeight*t,point:e}}return{value:e,point:e}}));i.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var s=0;s<i.length;s+=1){var n=i[s],r=n.point;n.value<=a.innerWidth&&(t=r)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=this.slides.length>0&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation&&this.navigation.update())}},classes:{addClasses:function(){var e=this.classNames,t=this.params,i=this.rtl,s=this.$el,a=[];a.push("initialized"),a.push(t.direction),t.freeMode&&a.push("free-mode"),t.autoHeight&&a.push("autoheight"),i&&a.push("rtl"),t.slidesPerColumn>1&&(a.push("multirow"),"column"===t.slidesPerColumnFill&&a.push("multirow-column")),O.android&&a.push("android"),O.ios&&a.push("ios"),t.cssMode&&a.push("css-mode"),a.forEach((function(i){e.push(t.containerModifierClass+i)})),s.addClass(e.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,s,n,o){var l;function u(){o&&o()}r(e).parent("picture")[0]||e.complete&&n?u():t?((l=new a.Image).onload=u,l.onerror=u,s&&(l.sizes=s),i&&(l.srcset=i),t&&(l.src=t)):u()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},X={},q=function(e){function t(){for(var i,s,a,n=[],o=arguments.length;o--;)n[o]=arguments[o];1===n.length&&n[0].constructor&&n[0].constructor===Object?a=n[0]:(s=(i=n)[0],a=i[1]),a||(a={}),a=u.extend({},a),s&&!a.el&&(a.el=s),e.call(this,a),Object.keys(Y).forEach((function(e){Object.keys(Y[e]).forEach((function(i){t.prototype[i]||(t.prototype[i]=Y[e][i])}))}));var l=this;void 0===l.modules&&(l.modules={}),Object.keys(l.modules).forEach((function(e){var t=l.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if("object"!=typeof s||null===s)return;if(!(i in a)||!("enabled"in s))return;!0===a[i]&&(a[i]={enabled:!0}),"object"!=typeof a[i]||"enabled"in a[i]||(a[i].enabled=!0),a[i]||(a[i]={enabled:!1})}}));var d=u.extend({},G);l.useModulesParams(d),l.params=u.extend({},d,X,a),l.originalParams=u.extend({},l.params),l.passedParams=u.extend({},a),l.$=r;var c=r(l.params.el);if(s=c[0]){if(c.length>1){var p=[];return c.each((function(e,i){var s=u.extend({},a,{el:i});p.push(new t(s))})),p}var f,v,m;return s.swiper=l,c.data("swiper",l),s&&s.shadowRoot&&s.shadowRoot.querySelector?(f=r(s.shadowRoot.querySelector("."+l.params.wrapperClass))).children=function(e){return c.children(e)}:f=c.children("."+l.params.wrapperClass),u.extend(l,{$el:c,el:s,$wrapperEl:f,wrapperEl:f[0],classNames:[],slides:r(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"rtl"===s.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===l.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===f.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:(v=["touchstart","touchmove","touchend","touchcancel"],m=["mousedown","mousemove","mouseup"],h.pointerEvents&&(m=["pointerdown","pointermove","pointerup"]),l.touchEventsTouch={start:v[0],move:v[1],end:v[2],cancel:v[3]},l.touchEventsDesktop={start:m[0],move:m[1],end:m[2]},h.touch||!l.params.simulateTouch?l.touchEventsTouch:l.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:u.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.params.init&&l.init(),l}}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var i={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return t.prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,s=this.size,a=this.activeIndex,n=1;if(e.centeredSlides){for(var r,o=t[a].swiperSlideSize,l=a+1;l<t.length;l+=1)t[l]&&!r&&(n+=1,(o+=t[l].swiperSlideSize)>s&&(r=!0));for(var u=a-1;u>=0;u-=1)t[u]&&!r&&(n+=1,(o+=t[u].swiperSlideSize)>s&&(r=!0))}else for(var h=a+1;h<t.length;h+=1)i[h]-i[a]<s&&(n+=1);return n},t.prototype.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||s(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function s(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},t.prototype.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(this.$el.removeClass(""+this.params.containerModifierClass+i).addClass(""+this.params.containerModifierClass+e),this.params.direction=e,this.slides.each((function(t,i){"vertical"===e?i.style.width="":i.style.height=""})),this.emit("changeDirection"),t&&this.update()),this},t.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},t.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,s=i.params,a=i.$el,n=i.$wrapperEl,r=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),n.removeAttr("style"),r&&r.length&&r.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),u.deleteProps(i)),i.destroyed=!0),null},t.extendDefaults=function(e){u.extend(X,e)},i.extendedDefaults.get=function(){return X},i.defaults.get=function(){return G},i.Class.get=function(){return e},i.$.get=function(){return r},Object.defineProperties(t,i),t}(d),W={name:"device",proto:{device:O},static:{device:O}},U={name:"support",proto:{support:h},static:{support:h}},K={isEdge:!!a.navigator.userAgent.match(/Edge/g),isSafari:function(){var e=a.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(a.navigator.userAgent)},Z={name:"browser",proto:{browser:K},static:{browser:K}},J={name:"resize",create:function(){var e=this;u.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){a.addEventListener("resize",this.resize.resizeHandler),a.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){a.removeEventListener("resize",this.resize.resizeHandler),a.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},Q={func:a.MutationObserver||a.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,s=new(0,Q.func)((function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}else i.emit("observerUpdate",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){if(h.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},ee={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){u.extend(this,{observer:{init:Q.init.bind(this),attach:Q.attach.bind(this),destroy:Q.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},te={update:function(e){var t=this,i=t.params,s=i.slidesPerView,a=i.slidesPerGroup,n=i.centeredSlides,r=t.params.virtual,o=r.addSlidesBefore,l=r.addSlidesAfter,h=t.virtual,d=h.from,c=h.to,p=h.slides,f=h.slidesGrid,v=h.renderSlide,m=h.offset;t.updateActiveIndex();var g,y,b,w=t.activeIndex||0;g=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",n?(y=Math.floor(s/2)+a+o,b=Math.floor(s/2)+a+l):(y=s+(a-1)+o,b=a+l);var E=Math.max((w||0)-b,0),k=Math.min((w||0)+y,p.length-1),C=(t.slidesGrid[E]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(u.extend(t.virtual,{from:E,to:k,offset:C,slidesGrid:t.slidesGrid}),d===E&&c===k&&!e)return t.slidesGrid!==f&&C!==m&&t.slides.css(g,C+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:C,from:E,to:k,slides:function(){for(var e=[],t=E;t<=k;t+=1)e.push(p[t]);return e}()}),void S();var x=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var M=d;M<=c;M+=1)(M<E||M>k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+M+'"]').remove();for(var A=0;A<p.length;A+=1)A>=E&&A<=k&&(void 0===c||e?T.push(A):(A>c&&T.push(A),A<d&&x.push(A)));T.forEach((function(e){t.$wrapperEl.append(v(p[e],e))})),x.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(v(p[e],e))})),t.$wrapperEl.children(".swiper-slide").css(g,C+"px"),S()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var s=i.renderSlide?r(i.renderSlide.call(this,e,t)):r('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=s),s},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t=this.activeIndex,i=t+1,s=1;if(Array.isArray(e)){for(var a=0;a<e.length;a+=1)e[a]&&this.virtual.slides.unshift(e[a]);i=t+e.length,s=e.length}else this.virtual.slides.unshift(e);if(this.params.virtual.cache){var n=this.virtual.cache,r={};Object.keys(n).forEach((function(e){var t=n[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),r[parseInt(e,10)+s]=t})),this.virtual.cache=r}this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&(t-=1),t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&(t-=1),t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},ie={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){u.extend(this,{virtual:{update:te.update.bind(this),appendSlide:te.appendSlide.bind(this),prependSlide:te.prependSlide.bind(this),removeSlide:te.removeSlide.bind(this),removeAllSlides:te.removeAllSlides.bind(this),renderSlide:te.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){if(this.params.virtual.enabled){this.classNames.push(this.params.containerModifierClass+"virtual");var e={watchSlidesProgress:!0};u.extend(this.params,e),u.extend(this.originalParams,e),this.params.initialSlide||this.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},se={handle:function(e){var t=this.rtlTranslate,s=e;s.originalEvent&&(s=s.originalEvent);var n=s.keyCode||s.charCode,r=this.params.keyboard.pageUpDown,o=r&&33===n,l=r&&34===n,u=37===n,h=39===n,d=38===n,c=40===n;if(!this.allowSlideNext&&(this.isHorizontal()&&h||this.isVertical()&&c||l))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&u||this.isVertical()&&d||o))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(o||l||u||h||d||c)){var p=!1;if(this.$el.parents("."+this.params.slideClass).length>0&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var f=a.innerWidth,v=a.innerHeight,m=this.$el.offset();t&&(m.left-=this.$el[0].scrollLeft);for(var g=[[m.left,m.top],[m.left+this.width,m.top],[m.left,m.top+this.height],[m.left+this.width,m.top+this.height]],y=0;y<g.length;y+=1){var b=g[y];b[0]>=0&&b[0]<=f&&b[1]>=0&&b[1]<=v&&(p=!0)}if(!p)return}this.isHorizontal()?((o||l||u||h)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),((l||h)&&!t||(o||u)&&t)&&this.slideNext(),((o||u)&&!t||(l||h)&&t)&&this.slidePrev()):((o||l||d||c)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),(l||c)&&this.slideNext(),(o||d)&&this.slidePrev()),this.emit("keyPress",n)}},enable:function(){this.keyboard.enabled||(r(i).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(r(i).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},ae={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){u.extend(this,{keyboard:{enabled:!1,enable:se.enable.bind(this),disable:se.disable.bind(this),handle:se.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var ne={lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return a.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in i;if(!e){var t=i.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&i.implementation&&i.implementation.hasFeature&&!0!==i.implementation.hasFeature("","")&&(e=i.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"},normalize:function(e){var t=0,i=0,s=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=a,a=0),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=40,a*=40):(s*=800,a*=800)),s&&!t&&(t=s<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var a=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(a=r(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!a[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var n=0,o=i.rtlTranslate?-1:1,l=ne.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(l.pixelX)>Math.abs(l.pixelY)))return!0;n=-l.pixelX*o}else{if(!(Math.abs(l.pixelY)>Math.abs(l.pixelX)))return!0;n=-l.pixelY}else n=Math.abs(l.pixelX)>Math.abs(l.pixelY)?-l.pixelX*o:-l.pixelY;if(0===n)return!0;if(s.invert&&(n=-n),i.params.freeMode){var h={time:u.now(),delta:Math.abs(n),direction:Math.sign(n)},d=i.mousewheel.lastEventBeforeSnap,c=d&&h.time<d.time+500&&h.delta<=d.delta&&h.direction===d.direction;if(!c){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var p=i.getTranslate()+n*s.sensitivity,f=i.isBeginning,v=i.isEnd;if(p>=i.minTranslate()&&(p=i.minTranslate()),p<=i.maxTranslate()&&(p=i.maxTranslate()),i.setTransition(0),i.setTranslate(p),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!f&&i.isBeginning||!v&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;var m=i.mousewheel.recentWheelEvents;m.length>=15&&m.shift();var g=m.length?m[m.length-1]:void 0,y=m[0];if(m.push(h),g&&(h.delta>g.delta||h.direction!==g.direction))m.splice(0);else if(m.length>=15&&h.time-y.time<500&&y.delta-h.delta>=1&&h.delta<=6){var b=n>0?.8:.2;i.mousewheel.lastEventBeforeSnap=h,m.splice(0),i.mousewheel.timeout=u.nextTick((function(){i.slideToClosest(i.params.speed,!0,void 0,b)}),0)}i.mousewheel.timeout||(i.mousewheel.timeout=u.nextTick((function(){i.mousewheel.lastEventBeforeSnap=h,m.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)}),500))}if(c||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),p===i.minTranslate()||p===i.maxTranslate())return!0}}else{var w={time:u.now(),delta:Math.abs(n),direction:Math.sign(n),raw:e},E=i.mousewheel.recentWheelEvents;E.length>=2&&E.shift();var k=E.length?E[E.length-1]:void 0;if(E.push(w),k?(w.direction!==k.direction||w.delta>k.delta||w.time>k.time+150)&&i.mousewheel.animateSlider(w):i.mousewheel.animateSlider(w),i.mousewheel.releaseScroll(w))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){return e.delta>=6&&u.now()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new a.Date).getTime(),!1)},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=ne.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=r(this.params.mousewheel.eventsTarged)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0,!0},disable:function(){var e=ne.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=r(this.params.mousewheel.eventsTarged)),t.off(e,this.mousewheel.handle),this.mousewheel.enabled=!1,!0}},re={update:function(){var e=this.params.navigation;if(!this.params.loop){var t=this.navigation,i=t.$nextEl,s=t.$prevEl;s&&s.length>0&&(this.isBeginning?s.addClass(e.disabledClass):s.removeClass(e.disabledClass),s[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass)),i&&i.length>0&&(this.isEnd?i.addClass(e.disabledClass):i.removeClass(e.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=r(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&e.length>1&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=r(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&t.length>1&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&e.length>0&&e.on("click",this.navigation.onNextClick),t&&t.length>0&&t.on("click",this.navigation.onPrevClick),u.extend(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},oe={update:function(){var e=this.rtl,t=this.params.pagination;if(t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var i,s=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,a=this.pagination.$el,n=this.params.loop?Math.ceil((s-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((i=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>s-1-2*this.loopedSlides&&(i-=s-2*this.loopedSlides),i>n-1&&(i-=n),i<0&&"bullets"!==this.params.paginationType&&(i=n+i)):i=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===t.type&&this.pagination.bullets&&this.pagination.bullets.length>0){var o,l,u,h=this.pagination.bullets;if(t.dynamicBullets&&(this.pagination.bulletSize=h.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(t.dynamicMainBullets+4)+"px"),t.dynamicMainBullets>1&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=i-this.previousIndex,this.pagination.dynamicBulletIndex>t.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=t.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),o=i-this.pagination.dynamicBulletIndex,u=((l=o+(Math.min(h.length,t.dynamicMainBullets)-1))+o)/2),h.removeClass(t.bulletActiveClass+" "+t.bulletActiveClass+"-next "+t.bulletActiveClass+"-next-next "+t.bulletActiveClass+"-prev "+t.bulletActiveClass+"-prev-prev "+t.bulletActiveClass+"-main"),a.length>1)h.each((function(e,s){var a=r(s),n=a.index();n===i&&a.addClass(t.bulletActiveClass),t.dynamicBullets&&(n>=o&&n<=l&&a.addClass(t.bulletActiveClass+"-main"),n===o&&a.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),n===l&&a.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next"))}));else{var d=h.eq(i),c=d.index();if(d.addClass(t.bulletActiveClass),t.dynamicBullets){for(var p=h.eq(o),f=h.eq(l),v=o;v<=l;v+=1)h.eq(v).addClass(t.bulletActiveClass+"-main");if(this.params.loop)if(c>=h.length-t.dynamicMainBullets){for(var m=t.dynamicMainBullets;m>=0;m-=1)h.eq(h.length-m).addClass(t.bulletActiveClass+"-main");h.eq(h.length-t.dynamicMainBullets-1).addClass(t.bulletActiveClass+"-prev")}else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next");else p.prev().addClass(t.bulletActiveClass+"-prev").prev().addClass(t.bulletActiveClass+"-prev-prev"),f.next().addClass(t.bulletActiveClass+"-next").next().addClass(t.bulletActiveClass+"-next-next")}}if(t.dynamicBullets){var g=Math.min(h.length,t.dynamicMainBullets+4),y=(this.pagination.bulletSize*g-this.pagination.bulletSize)/2-u*this.pagination.bulletSize,b=e?"right":"left";h.css(this.isHorizontal()?b:"top",y+"px")}}if("fraction"===t.type&&(a.find("."+t.currentClass).text(t.formatFractionCurrent(i+1)),a.find("."+t.totalClass).text(t.formatFractionTotal(n))),"progressbar"===t.type){var w;w=t.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical";var E=(i+1)/n,k=1,C=1;"horizontal"===w?k=E:C=E,a.find("."+t.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+k+") scaleY("+C+")").transition(this.params.speed)}"custom"===t.type&&t.renderCustom?(a.html(t.renderCustom(this,i+1,n)),this.emit("paginationRender",this,a[0])):this.emit("paginationUpdate",this,a[0]),a[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](t.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s="";if("bullets"===e.type){for(var a=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,n=0;n<a;n+=1)e.renderBullet?s+=e.renderBullet.call(this,n,e.bulletClass):s+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(s),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(s=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(s)),"progressbar"===e.type&&(s=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(s)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=r(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();var i=r(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),u.extend(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}}},le={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=this.rtlTranslate,i=this.progress,s=e.dragSize,a=e.trackSize,n=e.$dragEl,r=e.$el,o=this.params.scrollbar,l=s,u=(a-s)*i;t?(u=-u)>0?(l=s-u,u=0):-u+s>a&&(l=a+u):u<0?(l=s+u,u=0):u+s>a&&(l=a-u),this.isHorizontal()?(n.transform("translate3d("+u+"px, 0, 0)"),n[0].style.width=l+"px"):(n.transform("translate3d(0px, "+u+"px, 0)"),n[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),r[0].style.opacity=1,this.scrollbar.timeout=setTimeout((function(){r[0].style.opacity=0,r.transition(400)}),1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=e.$dragEl,i=e.$el;t[0].style.width="",t[0].style.height="";var s,a=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,n=this.size/this.virtualSize,r=n*(a/this.size);s="auto"===this.params.scrollbar.dragSize?a*n:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=s+"px":t[0].style.height=s+"px",i[0].style.display=n>=1?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),u.extend(e,{trackSize:a,divider:n,moveDivider:r,dragSize:s}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,i=this.scrollbar,s=this.rtlTranslate,a=i.$el,n=i.dragSize,r=i.trackSize,o=i.dragStartPos;t=(i.getPointerPosition(e)-a.offset()[this.isHorizontal()?"left":"top"]-(null!==o?o:n/2))/(r-n),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*t;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,a=i.$el,n=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===n[0]||e.target===n?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),n.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),a.transition(0),t.hide&&a.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,s=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,a=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),s.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=u.nextTick((function(){a.css("opacity",0),a.transition(400)}),1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.touchEventsTouch,s=this.touchEventsDesktop,a=this.params,n=e.$el[0],r=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(n.addEventListener(t.start,this.scrollbar.onDragStart,r),n.addEventListener(t.move,this.scrollbar.onDragMove,r),n.addEventListener(t.end,this.scrollbar.onDragEnd,o)):(n.addEventListener(s.start,this.scrollbar.onDragStart,r),i.addEventListener(s.move,this.scrollbar.onDragMove,r),i.addEventListener(s.end,this.scrollbar.onDragEnd,o))}},disableDraggable:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.touchEventsTouch,s=this.touchEventsDesktop,a=this.params,n=e.$el[0],r=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(n.removeEventListener(t.start,this.scrollbar.onDragStart,r),n.removeEventListener(t.move,this.scrollbar.onDragMove,r),n.removeEventListener(t.end,this.scrollbar.onDragEnd,o)):(n.removeEventListener(s.start,this.scrollbar.onDragStart,r),i.removeEventListener(s.move,this.scrollbar.onDragMove,r),i.removeEventListener(s.end,this.scrollbar.onDragEnd,o))}},init:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.$el,i=this.params.scrollbar,s=r(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&s.length>1&&1===t.find(i.el).length&&(s=t.find(i.el));var a=s.find("."+this.params.scrollbar.dragClass);0===a.length&&(a=r('<div class="'+this.params.scrollbar.dragClass+'"></div>'),s.append(a)),u.extend(e,{$el:s,el:s[0],$dragEl:a,dragEl:a[0]}),i.draggable&&e.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ue={setTransform:function(e,t){var i=this.rtl,s=r(e),a=i?-1:1,n=s.attr("data-swiper-parallax")||"0",o=s.attr("data-swiper-parallax-x"),l=s.attr("data-swiper-parallax-y"),u=s.attr("data-swiper-parallax-scale"),h=s.attr("data-swiper-parallax-opacity");if(o||l?(o=o||"0",l=l||"0"):this.isHorizontal()?(o=n,l="0"):(l=n,o="0"),o=o.indexOf("%")>=0?parseInt(o,10)*t*a+"%":o*t*a+"px",l=l.indexOf("%")>=0?parseInt(l,10)*t+"%":l*t+"px",null!=h){var d=h-(h-1)*(1-Math.abs(t));s[0].style.opacity=d}if(null==u)s.transform("translate3d("+o+", "+l+", 0px)");else{var c=u-(u-1)*(1-Math.abs(t));s.transform("translate3d("+o+", "+l+", 0px) scale("+c+")")}},setTranslate:function(){var e=this,t=e.$el,i=e.slides,s=e.progress,a=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t,i){e.parallax.setTransform(i,s)})),i.each((function(t,i){var n=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(t/2)-s*(a.length-1)),n=Math.min(Math.max(n,-1),1),r(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t,i){e.parallax.setTransform(i,n)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t,i){var s=r(i),a=parseInt(s.attr("data-swiper-parallax-duration"),10)||e;0===e&&(a=0),s.transition(a)}))}},he={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s-t,2)+Math.pow(a-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,s.scaleStart=he.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=r(e.target).closest("."+this.params.slideClass),0===s.$slideEl.length&&(s.$slideEl=this.slides.eq(this.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+t.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl&&s.$imageEl.transition(0),this.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=he.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=h.gestures?e.scale*i.currentScale:s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+Math.pow(i.scale-s.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),s.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!O.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,s=t.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(O.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,s=t.image,a=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=u.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=u.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*t.scale,r=s.height*t.scale;if(!(n<i.slideWidth&&r<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-r/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=s.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=s.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(s.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(s.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(s.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(s.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=s.touchesCurrent.x,a.prevPositionY=s.touchesCurrent.y,a.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,s=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var a=300,n=300,r=s.x*a,o=i.currentX+r,l=s.y*n,u=i.currentY+l;0!==s.x&&(a=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(n=Math.abs((u-i.currentY)/s.y));var h=Math.max(a,n);i.currentX=o,i.currentY=u;var d=i.width*e.scale,c=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-d/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-c/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(h).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,s,a,n,r,o,l,u,h,d,c,p,f,v,m,g=this.zoom,y=this.params.zoom,b=g.gesture,w=g.image;(b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length)&&(b.$slideEl.addClass(""+y.zoomedSlideClass),void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,i="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,i=w.touchesStart.y),g.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,g.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(v=b.$slideEl[0].offsetWidth,m=b.$slideEl[0].offsetHeight,s=b.$slideEl.offset().left+v/2-t,a=b.$slideEl.offset().top+m/2-i,o=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,u=o*g.scale,h=l*g.scale,p=-(d=Math.min(v/2-u/2,0)),f=-(c=Math.min(m/2-h/2,0)),(n=s*g.scale)<d&&(n=d),n>p&&(n=p),(r=a*g.scale)<c&&(r=c),r>f&&(r=f)):(n=0,r=0),b.$imageWrapEl.transition(300).transform("translate3d("+n+"px, "+r+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e=this.zoom;if(!e.enabled){e.enabled=!0;var t=!("touchstart"!==this.touchEvents.start||!h.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},i=!h.passiveListener||{passive:!1,capture:!0},s="."+this.params.slideClass;h.gestures?(this.$wrapperEl.on("gesturestart",s,e.onGestureStart,t),this.$wrapperEl.on("gesturechange",s,e.onGestureChange,t),this.$wrapperEl.on("gestureend",s,e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,s,e.onGestureStart,t),this.$wrapperEl.on(this.touchEvents.move,s,e.onGestureChange,i),this.$wrapperEl.on(this.touchEvents.end,s,e.onGestureEnd,t),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,s,e.onGestureEnd,t)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,i)}},disable:function(){var e=this.zoom;if(e.enabled){this.zoom.enabled=!1;var t=!("touchstart"!==this.touchEvents.start||!h.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},i=!h.passiveListener||{passive:!1,capture:!0},s="."+this.params.slideClass;h.gestures?(this.$wrapperEl.off("gesturestart",s,e.onGestureStart,t),this.$wrapperEl.off("gesturechange",s,e.onGestureChange,t),this.$wrapperEl.off("gestureend",s,e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,s,e.onGestureStart,t),this.$wrapperEl.off(this.touchEvents.move,s,e.onGestureChange,i),this.$wrapperEl.off(this.touchEvents.end,s,e.onGestureEnd,t),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,s,e.onGestureEnd,t)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,i)}}},de={loadInSlide:function(e,t){void 0===t&&(t=!0);var i=this,s=i.params.lazy;if(void 0!==e&&0!==i.slides.length){var a=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children("."+i.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):i.slides.eq(e),n=a.find("."+s.elementClass+":not(."+s.loadedClass+"):not(."+s.loadingClass+")");!a.hasClass(s.elementClass)||a.hasClass(s.loadedClass)||a.hasClass(s.loadingClass)||(n=n.add(a[0])),0!==n.length&&n.each((function(e,n){var o=r(n);o.addClass(s.loadingClass);var l=o.attr("data-background"),u=o.attr("data-src"),h=o.attr("data-srcset"),d=o.attr("data-sizes"),c=o.parent("picture");i.loadImage(o[0],u||l,h,d,!1,(function(){if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(l?(o.css("background-image",'url("'+l+'")'),o.removeAttr("data-background")):(h&&(o.attr("srcset",h),o.removeAttr("data-srcset")),d&&(o.attr("sizes",d),o.removeAttr("data-sizes")),c.length&&c.children("source").each((function(e,t){var i=r(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))})),u&&(o.attr("src",u),o.removeAttr("data-src"))),o.addClass(s.loadedClass).removeClass(s.loadingClass),a.find("."+s.preloaderClass).remove(),i.params.loop&&t){var e=a.attr("data-swiper-slide-index");if(a.hasClass(i.params.slideDuplicateClass)){var n=i.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+i.params.slideDuplicateClass+")");i.lazy.loadInSlide(n.index(),!1)}else{var p=i.$wrapperEl.children("."+i.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');i.lazy.loadInSlide(p.index(),!1)}}i.emit("lazyImageReady",a[0],o[0]),i.params.autoHeight&&i.updateAutoHeight()}})),i.emit("lazyImageLoad",a[0],o[0])}))}},load:function(){var e=this,t=e.$wrapperEl,i=e.params,s=e.slides,a=e.activeIndex,n=e.virtual&&i.virtual.enabled,o=i.lazy,l=i.slidesPerView;function u(e){if(n){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(s[e])return!0;return!1}function h(e){return n?r(e).attr("data-swiper-slide-index"):r(e).index()}if("auto"===l&&(l=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((function(t,i){var s=n?r(i).attr("data-swiper-slide-index"):r(i).index();e.lazy.loadInSlide(s)}));else if(l>1)for(var d=a;d<a+l;d+=1)u(d)&&e.lazy.loadInSlide(d);else e.lazy.loadInSlide(a);if(o.loadPrevNext)if(l>1||o.loadPrevNextAmount&&o.loadPrevNextAmount>1){for(var c=o.loadPrevNextAmount,p=l,f=Math.min(a+p+Math.max(c,p),s.length),v=Math.max(a-Math.max(p,c),0),m=a+l;m<f;m+=1)u(m)&&e.lazy.loadInSlide(m);for(var g=v;g<a;g+=1)u(g)&&e.lazy.loadInSlide(g)}else{var y=t.children("."+i.slideNextClass);y.length>0&&e.lazy.loadInSlide(h(y));var b=t.children("."+i.slidePrevClass);b.length>0&&e.lazy.loadInSlide(h(b))}}},ce={LinearSpline:function(e,t){var i,s,a,n,r,o=function(e,t){for(s=-1,i=e.length;i-s>1;)e[a=i+s>>1]<=t?s=a:i=a;return i};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=o(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new ce.LinearSpline(this.slidesGrid,e.slidesGrid):new ce.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,s,a=this,n=a.controller.control;function r(e){var t=a.rtlTranslate?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),s=-a.controller.spline.interpolate(-t)),s&&"container"!==a.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),s=(t-a.minTranslate())*i+e.minTranslate()),a.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(var o=0;o<n.length;o+=1)n[o]!==t&&n[o]instanceof q&&r(n[o]);else n instanceof q&&t!==n&&r(n)},setTransition:function(e,t){var i,s=this,a=s.controller.control;function n(t){t.setTransition(e,s),0!==e&&(t.transitionStart(),t.params.autoHeight&&u.nextTick((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){a&&(t.params.loop&&"slide"===s.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==t&&a[i]instanceof q&&n(a[i]);else a instanceof q&&t!==a&&n(a)}},pe={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this.params.a11y;if(13===e.keyCode){var i=r(e.target);this.navigation&&this.navigation.$nextEl&&i.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(t.lastSlideMessage):this.a11y.notify(t.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&i.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(t.firstSlideMessage):this.a11y.notify(t.prevSlideMessage)),this.pagination&&i.is("."+this.params.pagination.bulletClass)&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){if(!this.params.loop&&this.navigation){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;i&&i.length>0&&(this.isBeginning?(this.a11y.disableEl(i),this.a11y.makeElNotFocusable(i)):(this.a11y.enableEl(i),this.a11y.makeElFocusable(i))),t&&t.length>0&&(this.isEnd?(this.a11y.disableEl(t),this.a11y.makeElNotFocusable(t)):(this.a11y.enableEl(t),this.a11y.makeElFocusable(t)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(i,s){var a=r(s);e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,t.paginationBulletMessage.replace(/\{\{index\}\}/,a.index()+1))}))},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&this.a11y.liveRegion.length>0&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},fe={init:function(){if(this.params.history){if(!a.history||!a.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=fe.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||a.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||a.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=fe.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=a.location.pathname.slice(1).split("/").filter((function(e){return""!==e})),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(this.history.initialized&&this.params.history.enabled){var i=this.slides.eq(t),s=fe.slugify(i.attr("data-history"));a.location.pathname.includes(e)||(s=e+"/"+s);var n=a.history.state;n&&n.value===s||(this.params.history.replaceState?a.history.replaceState({value:s},null,s):a.history.pushState({value:s},null,s))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var s=0,a=this.slides.length;s<a;s+=1){var n=this.slides.eq(s);if(fe.slugify(n.attr("data-history"))===t&&!n.hasClass(this.params.slideDuplicateClass)){var r=n.index();this.slideTo(r,e,i)}}else this.slideTo(0,e,i)}},ve={onHashCange:function(){this.emit("hashChange");var e=i.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var t=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===t)return;this.slideTo(t)}},setHash:function(){if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&a.history&&a.history.replaceState)a.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""),this.emit("hashSet");else{var e=this.slides.eq(this.activeIndex),t=e.attr("data-hash")||e.attr("data-history");i.location.hash=t||"",this.emit("hashSet")}},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var e=i.location.hash.replace("#","");if(e)for(var t=0,s=this.slides.length;t<s;t+=1){var n=this.slides.eq(t);if((n.attr("data-hash")||n.attr("data-history"))===e&&!n.hasClass(this.params.slideDuplicateClass)){var o=n.index();this.slideTo(o,0,this.params.runCallbacksOnInit,!0)}}this.params.hashNavigation.watchState&&r(a).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&r(a).off("hashchange",this.hashNavigation.onHashCange)}},me={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=u.nextTick((function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()}),i)},start:function(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop:function(){return!!this.autoplay.running&&(void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0))},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))}},ge={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),s=-i[0].swiperSlideOffset;this.params.virtualTranslate||(s-=this.translate);var a=0;this.isHorizontal()||(a=s,s=0);var n=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:n}).transform("translate3d("+s+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,s=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var a=!1;i.transitionEnd((function(){if(!a&&t&&!t.destroyed){a=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)s.trigger(e[i])}}))}}},ye={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,s=this.slides,a=this.width,n=this.height,o=this.rtlTranslate,l=this.size,u=this.params.cubeEffect,h=this.isHorizontal(),d=this.virtual&&this.params.virtual.enabled,c=0;u.shadow&&(h?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=r('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:a+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=r('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var p=0;p<s.length;p+=1){var f=s.eq(p),v=p;d&&(v=parseInt(f.attr("data-swiper-slide-index"),10));var m=90*v,g=Math.floor(m/360);o&&(m=-m,g=Math.floor(-m/360));var y=Math.max(Math.min(f[0].progress,1),-1),b=0,w=0,E=0;v%4==0?(b=4*-g*l,E=0):(v-1)%4==0?(b=0,E=4*-g*l):(v-2)%4==0?(b=l+4*g*l,E=l):(v-3)%4==0&&(b=-l,E=3*l+4*l*g),o&&(b=-b),h||(w=b,b=0);var k="rotateX("+(h?0:-m)+"deg) rotateY("+(h?m:0)+"deg) translate3d("+b+"px, "+w+"px, "+E+"px)";if(y<=1&&y>-1&&(c=90*v+90*y,o&&(c=90*-v-90*y)),f.transform(k),u.slideShadows){var C=h?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),S=h?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===C.length&&(C=r('<div class="swiper-slide-shadow-'+(h?"left":"top")+'"></div>'),f.append(C)),0===S.length&&(S=r('<div class="swiper-slide-shadow-'+(h?"right":"bottom")+'"></div>'),f.append(S)),C.length&&(C[0].style.opacity=Math.max(-y,0)),S.length&&(S[0].style.opacity=Math.max(y,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),u.shadow)if(h)e.transform("translate3d(0px, "+(a/2+u.shadowOffset)+"px, "+-a/2+"px) rotateX(90deg) rotateZ(0deg) scale("+u.shadowScale+")");else{var x=Math.abs(c)-90*Math.floor(Math.abs(c)/90),T=1.5-(Math.sin(2*x*Math.PI/360)/2+Math.cos(2*x*Math.PI/360)/2),M=u.shadowScale,A=u.shadowScale/T,P=u.shadowOffset;e.transform("scale3d("+M+", 1, "+A+") translate3d(0px, "+(n/2+P)+"px, "+-n/2/A+"px) rotateX(-90deg)")}var _=K.isSafari||K.isWebView?-l/2:0;i.transform("translate3d(0px,0,"+_+"px) rotateX("+(this.isHorizontal()?0:c)+"deg) rotateY("+(this.isHorizontal()?-c:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},be={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var s=e.eq(i),a=s[0].progress;this.params.flipEffect.limitRotation&&(a=Math.max(Math.min(s[0].progress,1),-1));var n=-180*a,o=0,l=-s[0].swiperSlideOffset,u=0;if(this.isHorizontal()?t&&(n=-n):(u=l,l=0,o=-n,n=0),s[0].style.zIndex=-Math.abs(Math.round(a))+e.length,this.params.flipEffect.slideShadows){var h=this.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),d=this.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===h.length&&(h=r('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),s.append(h)),0===d.length&&(d=r('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),s.append(d)),h.length&&(h[0].style.opacity=Math.max(-a,0)),d.length&&(d[0].style.opacity=Math.max(a,0))}s.transform("translate3d("+l+"px, "+u+"px, 0px) rotateX("+o+"deg) rotateY("+n+"deg)")}},setTransition:function(e){var t=this,i=t.slides,s=t.activeIndex,a=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var n=!1;i.eq(s).transitionEnd((function(){if(!n&&t&&!t.destroyed){n=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)a.trigger(e[i])}}))}}},we={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,s=this.$wrapperEl,a=this.slidesSizesGrid,n=this.params.coverflowEffect,o=this.isHorizontal(),l=this.translate,u=o?e/2-l:t/2-l,d=o?n.rotate:-n.rotate,c=n.depth,p=0,f=i.length;p<f;p+=1){var v=i.eq(p),m=a[p],g=(u-v[0].swiperSlideOffset-m/2)/m*n.modifier,y=o?d*g:0,b=o?0:d*g,w=-c*Math.abs(g),E=n.stretch;"string"==typeof E&&-1!==E.indexOf("%")&&(E=parseFloat(n.stretch)/100*m);var k=o?0:E*g,C=o?E*g:0,S=1-(1-n.scale)*Math.abs(g);Math.abs(C)<.001&&(C=0),Math.abs(k)<.001&&(k=0),Math.abs(w)<.001&&(w=0),Math.abs(y)<.001&&(y=0),Math.abs(b)<.001&&(b=0),Math.abs(S)<.001&&(S=0);var x="translate3d("+C+"px,"+k+"px,"+w+"px)  rotateX("+b+"deg) rotateY("+y+"deg) scale("+S+")";if(v.transform(x),v[0].style.zIndex=1-Math.abs(Math.round(g)),n.slideShadows){var T=o?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),M=o?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===T.length&&(T=r('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),v.append(T)),0===M.length&&(M=r('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),v.append(M)),T.length&&(T[0].style.opacity=g>0?g:0),M.length&&(M[0].style.opacity=-g>0?-g:0)}}(h.pointerEvents||h.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=u+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},Ee={init:function(){var e=this.params.thumbs,t=this.constructor;e.swiper instanceof t?(this.thumbs.swiper=e.swiper,u.extend(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),u.extend(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):u.isObject(e.swiper)&&(this.thumbs.swiper=new t(u.extend({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick)},onThumbClick:function(){var e=this.thumbs.swiper;if(e){var t=e.clickedIndex,i=e.clickedSlide;if(!(i&&r(i).hasClass(this.params.thumbs.slideThumbActiveClass)||null==t)){var s;if(s=e.params.loop?parseInt(r(e.clickedSlide).attr("data-swiper-slide-index"),10):t,this.params.loop){var a=this.activeIndex;this.slides.eq(a).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,a=this.activeIndex);var n=this.slides.eq(a).prevAll('[data-swiper-slide-index="'+s+'"]').eq(0).index(),o=this.slides.eq(a).nextAll('[data-swiper-slide-index="'+s+'"]').eq(0).index();s=void 0===n?o:void 0===o?n:o-a<a-n?o:n}this.slideTo(s)}}},update:function(e){var t=this.thumbs.swiper;if(t){var i="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,s=this.params.thumbs.autoScrollOffset,a=s&&!t.params.loop;if(this.realIndex!==t.realIndex||a){var n,r,o=t.activeIndex;if(t.params.loop){t.slides.eq(o).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,o=t.activeIndex);var l=t.slides.eq(o).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),u=t.slides.eq(o).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index();n=void 0===l?u:void 0===u?l:u-o==o-l?o:u-o<o-l?u:l,r=this.activeIndex>this.previousIndex?"next":"prev"}else r=(n=this.realIndex)>this.previousIndex?"next":"prev";a&&(n+="next"===r?s:-1*s),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(n)<0&&(t.params.centeredSlides?n=n>o?n-Math.floor(i/2)+1:n+Math.floor(i/2)-1:n>o&&(n=n-i+1),t.slideTo(n,e?0:void 0))}var h=1,d=this.params.thumbs.slideThumbActiveClass;if(this.params.slidesPerView>1&&!this.params.centeredSlides&&(h=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(h=1),h=Math.floor(h),t.slides.removeClass(d),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var c=0;c<h;c+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+c)+'"]').addClass(d);else for(var p=0;p<h;p+=1)t.slides.eq(this.realIndex+p).addClass(d)}}},ke=[W,U,Z,J,ee,ie,ae,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){u.extend(this,{mousewheel:{enabled:!1,enable:ne.enable.bind(this),disable:ne.disable.bind(this),handle:ne.handle.bind(this),handleMouseEnter:ne.handleMouseEnter.bind(this),handleMouseLeave:ne.handleMouseLeave.bind(this),animateSlider:ne.animateSlider.bind(this),releaseScroll:ne.releaseScroll.bind(this),lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init:function(){!this.params.mousewheel.enabled&&this.params.cssMode&&this.mousewheel.disable(),this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.params.cssMode&&this.mousewheel.enable(),this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){u.extend(this,{navigation:{init:re.init.bind(this),update:re.update.bind(this),destroy:re.destroy.bind(this),onNextClick:re.onNextClick.bind(this),onPrevClick:re.onPrevClick.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this.navigation,s=i.$nextEl,a=i.$prevEl;!this.params.navigation.hideOnClick||r(e.target).is(a)||r(e.target).is(s)||(s?t=s.hasClass(this.params.navigation.hiddenClass):a&&(t=a.hasClass(this.params.navigation.hiddenClass)),!0===t?this.emit("navigationShow",this):this.emit("navigationHide",this),s&&s.toggleClass(this.params.navigation.hiddenClass),a&&a.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){u.extend(this,{pagination:{init:oe.init.bind(this),render:oe.render.bind(this),update:oe.update.bind(this),destroy:oe.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){(this.params.loop||void 0===this.snapIndex)&&this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&this.pagination.$el.length>0&&!r(e.target).hasClass(this.params.pagination.bulletClass)&&(!0===this.pagination.$el.hasClass(this.params.pagination.hiddenClass)?this.emit("paginationShow",this):this.emit("paginationHide",this),this.pagination.$el.toggleClass(this.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){u.extend(this,{scrollbar:{init:le.init.bind(this),destroy:le.destroy.bind(this),updateSize:le.updateSize.bind(this),setTranslate:le.setTranslate.bind(this),setTransition:le.setTransition.bind(this),enableDraggable:le.enableDraggable.bind(this),disableDraggable:le.disableDraggable.bind(this),setDragPosition:le.setDragPosition.bind(this),getPointerPosition:le.getPointerPosition.bind(this),onDragStart:le.onDragStart.bind(this),onDragMove:le.onDragMove.bind(this),onDragEnd:le.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){u.extend(this,{parallax:{setTransform:ue.setTransform.bind(this),setTranslate:ue.setTranslate.bind(this),setTransition:ue.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach((function(i){t[i]=he[i].bind(e)})),u.extend(e,{zoom:t});var i=1;Object.defineProperty(e.zoom,"scale",{get:function(){return i},set:function(t){if(i!==t){var s=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,a=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,s,a)}i=t}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()},slideChange:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.params.cssMode&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){u.extend(this,{lazy:{initialImageLoaded:!1,load:de.load.bind(this),loadInSlide:de.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()},slideChange:function(){this.params.lazy.enabled&&this.params.cssMode&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){u.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:ce.getInterpolateFunction.bind(this),setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var e=this;u.extend(e,{a11y:{liveRegion:r('<span class="'+e.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(pe).forEach((function(t){e.a11y[t]=pe[t].bind(e)}))},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){u.extend(this,{history:{init:fe.init.bind(this),setHistory:fe.setHistory.bind(this),setHistoryPopState:fe.setHistoryPopState.bind(this),scrollToSlide:fe.scrollToSlide.bind(this),destroy:fe.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)},slideChange:function(){this.history.initialized&&this.params.cssMode&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){u.extend(this,{hashNavigation:{initialized:!1,init:ve.init.bind(this),destroy:ve.destroy.bind(this),setHash:ve.setHash.bind(this),onHashCange:ve.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()},slideChange:function(){this.hashNavigation.initialized&&this.params.cssMode&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var e=this;u.extend(e,{autoplay:{running:!1,paused:!1,run:me.run.bind(e),start:me.start.bind(e),stop:me.stop.bind(e),pause:me.pause.bind(e),onVisibilityChange:function(){"hidden"===document.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===document.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&(this.autoplay.start(),document.addEventListener("visibilitychange",this.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},touchEnd:function(){this.params.cssMode&&this.autoplay.paused&&!this.params.autoplay.disableOnInteraction&&this.autoplay.run()},destroy:function(){this.autoplay.running&&this.autoplay.stop(),document.removeEventListener("visibilitychange",this.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){u.extend(this,{fadeEffect:{setTranslate:ge.setTranslate.bind(this),setTransition:ge.setTransition.bind(this)}})},on:{beforeInit:function(){if("fade"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"fade");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){u.extend(this,{cubeEffect:{setTranslate:ye.setTranslate.bind(this),setTransition:ye.setTransition.bind(this)}})},on:{beforeInit:function(){if("cube"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){u.extend(this,{flipEffect:{setTranslate:be.setTranslate.bind(this),setTransition:be.setTransition.bind(this)}})},on:{beforeInit:function(){if("flip"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){u.extend(this,{coverflowEffect:{setTranslate:we.setTranslate.bind(this),setTransition:we.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){u.extend(this,{thumbs:{swiper:null,init:Ee.init.bind(this),update:Ee.update.bind(this),onThumbClick:Ee.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===q.use&&(q.use=q.Class.use,q.installModule=q.Class.installModule),q.use(ke),q}));var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function _defineProperty(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}!function(){for(var e=["DocumentType","Element","CharacterData"],t=function(){null!=this.parentNode&&this.parentNode.removeChild(this)},i=0;i<e.length;i++){var s=e[i];window[s]&&!window[s].prototype.remove&&(window[s].prototype.remove=t)}}(),function(e){var t=setTimeout;function i(){}function s(e){if("object"!==_typeof(this))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],u(e,this)}function a(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,s._immediateFn((function(){var i=1===e._state?t.onFulfilled:t.onRejected;if(null!==i){var s;try{s=i(e._value)}catch(e){return void r(t.promise,e)}n(t.promise,s)}else(1===e._state?n:r)(t.promise,e._value)}))):e._deferreds.push(t)}function n(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"===(void 0===t?"undefined":_typeof(t))||"function"==typeof t)){var i=t.then;if(t instanceof s)return e._state=3,e._value=t,void o(e);if("function"==typeof i)return void u((a=i,n=t,function(){a.apply(n,arguments)}),e)}e._state=1,e._value=t,o(e)}catch(t){r(e,t)}var a,n}function r(e,t){e._state=2,e._value=t,o(e)}function o(e){2===e._state&&0===e._deferreds.length&&s._immediateFn((function(){e._handled||s._unhandledRejectionFn(e._value)}));for(var t=0,i=e._deferreds.length;t<i;t++)a(e,e._deferreds[t]);e._deferreds=null}function l(e,t,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=i}function u(e,t){var i=!1;try{e((function(e){i||(i=!0,n(t,e))}),(function(e){i||(i=!0,r(t,e))}))}catch(e){if(i)return;i=!0,r(t,e)}}s.prototype.catch=function(e){return this.then(null,e)},s.prototype.then=function(e,t){var s=new this.constructor(i);return a(this,new l(e,t,s)),s},s.all=function(e){var t=Array.prototype.slice.call(e);return new s((function(e,i){if(0===t.length)return e([]);var s=t.length;function a(n,r){try{if(r&&("object"===(void 0===r?"undefined":_typeof(r))||"function"==typeof r)){var o=r.then;if("function"==typeof o)return void o.call(r,(function(e){a(n,e)}),i)}t[n]=r,0==--s&&e(t)}catch(e){i(e)}}for(var n=0;n<t.length;n++)a(n,t[n])}))},s.resolve=function(e){return e&&"object"===(void 0===e?"undefined":_typeof(e))&&e.constructor===s?e:new s((function(t){t(e)}))},s.reject=function(e){return new s((function(t,i){i(e)}))},s.race=function(e){return new s((function(t,i){for(var s=0,a=e.length;s<a;s++)e[s].then(t,i)}))},s._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){t(e,0)},s._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},s._setImmediateFn=function(e){s._immediateFn=e},s._setUnhandledRejectionFn=function(e){s._unhandledRejectionFn=e},"undefined"!=typeof module&&module.exports?module.exports=s:e.Promise||(e.Promise=s)}(window),function(e){"use strict";e.Promise||(e.Promise=Promise);var t=function(e,t){if("string"==typeof e)return e;var i="post"===t.toLowerCase()?"":"?";return Array.isArray(e)?i+e.map((function(e){return e.name+"="+e.value})).join("&"):i+Object.keys(e).map((function(t){return t+"="+e[t]})).join("&")},i=function(e){var i=e.url,s=e.method,a=e.data,n=e.debug,r=e.callback,o=e.error;if(n)r("test");else{var l=!1!==e.async,u=new XMLHttpRequest,h=t(a,"get"),d=null;"post"===s.toLowerCase()&&(d=t(a,"post"),h=""),u.open(s,i+h,l),u.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),u.onreadystatechange=function(){4===this.readyState&&(200===this.status?r(this.responseText):o&&o(this.responseText))},u.send(d)}},s=function(e,t){this.options=t||{},this.rules=this.options.rules||{},this.messages=this.options.messages||void 0,this.colorWrong=this.options.colorWrong||"#B81111",this.result={},this.elements=[],this.tooltip=this.options.tooltip||{},this.tooltipFadeOutTime=this.tooltip.fadeOutTime||5e3,this.tooltipFadeOutClass=this.tooltip.fadeOutClass||"just-validate-tooltip-hide",this.tooltipSelectorWrap=document.querySelectorAll(this.tooltip.selectorWrap).length?document.querySelectorAll(this.tooltip.selectorWrap):document.querySelectorAll(".just-validate-tooltip-container"),this.bindHandlerKeyup=this.handlerKeyup.bind(this),this.submitHandler=this.options.submitHandler||void 0,this.invalidFormCallback=this.options.invalidFormCallback||void 0,this.promisesRemote=[],this.isValidationSuccess=!1,this.focusWrongField=this.options.focusWrongField||!1,this.REGEXP={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,zip:/^\d{5}(-\d{4})?$/,phone:/^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$/,password:/[^\w\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/,strengthPass:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]/},this.DEFAULT_REMOTE_ERROR="Error",this.state={tooltipsTimer:null},this.setForm(document.querySelector(e))};s.prototype={defaultRules:{email:{required:!0,email:!0},name:{required:!0,minLength:3,maxLength:15},text:{required:!0,maxLength:300,minLength:5},password:{required:!0,password:!0,minLength:4,maxLength:8},zip:{required:!0,zip:!0},phone:{phone:!0}},defaultMessages:{required:"The field is required",email:"Please, type a valid email",maxLength:"The field must contain a maximum of :value characters",minLength:"The field must contain a minimum of :value characters",password:"Password is not valid",remote:"Email already exists",strength:"Password must contents at least one uppercase letter, one lowercase letter and one number",function:"Function returned false"},handlerKeyup:function(e){var t=e.target,i={name:t.getAttribute("data-validate-field"),value:t.value};delete this.result[i.name],this.validateItem({name:i.name,value:i.value,group:[],isKeyupChange:!0}),this.renderErrors()},setterEventListener:function(e,t,i,s){switch("keyup"===t&&(i=this.bindHandlerKeyup),s){case"add":e.addEventListener(t,i);break;case"remove":e.removeEventListener(t,i)}},getElementsRealValue:function(){for(var e=this.$form.querySelectorAll("*"),t=void 0,i={},s=0,a=e.length;s<a;++s)if(t=e[s].getAttribute("name")){if("checkbox"===e[s].type){i[t]=e[s].checked;continue}i[t]=e[s].value}return i},validationFailed:function(){this.invalidFormCallback&&this.invalidFormCallback(this.result);var e=document.querySelector(".js-validate-error-field");this.focusWrongField&&e&&e.focus&&e.focus()},validationSuccess:function(){if(0===Object.keys(this.result).length){if(this.isValidationSuccess=!1,this.submitHandler){var e=this.getElementsRealValue();return void this.submitHandler(this.$form,e,i)}this.$form.submit()}},setForm:function(e){var t=this;this.$form=e,this.$form.setAttribute("novalidate","novalidate"),this.$form.addEventListener("submit",(function(e){e.preventDefault(),t.result=[],t.getElements(),t.promisesRemote.length?Promise.all(t.promisesRemote).then((function(){t.promisesRemote=[],t.isValidationSuccess?t.validationSuccess():t.validationFailed()})):t.isValidationSuccess?t.validationSuccess():t.validationFailed()}))},isEmail:function(e){return this.REGEXP.email.test(e)},isZip:function(e){return this.REGEXP.zip.test(e)},isPhone:function(e){return this.REGEXP.phone.test(e)},isPassword:function(e){return this.REGEXP.password.test(e)},isEmpty:function(e){var t=e;return e.trim&&(t=e.trim()),!t},checkLengthMax:function(e,t){return e.length<=t},checkLengthMin:function(e,t){return e.length>=t},checkStrengthPass:function(e){return this.REGEXP.strengthPass.test(e)},getElements:function(){var e=this,t=this.$form.querySelectorAll("[data-validate-field]");this.elements=[];for(var i=function(i,s){var a=t[i],n=a.getAttribute("data-validate-field"),r=a.value,o=!1,l=[];if("checkbox"===a.type&&(r=a.checked||"",a.addEventListener("change",(function(t){var i=t.target,s={name:i.getAttribute("data-validate-field"),value:i.checked};delete e.result[s.name],e.validateItem({name:s.name,value:s.value,group:[]}),e.renderErrors()}))),"radio"===a.type){var u=e.elements.filter((function(e){if(e.name===n)return e}))[0];u?(u.group.push(a.checked),o=!0):l.push(a.checked),a.addEventListener("change",(function(t){var i=t.target,s={name:i.getAttribute("data-validate-field"),value:i.checked};delete e.result[s.name],e.validateItem({name:s.name,value:s.value,group:[]}),e.renderErrors()}))}e.setterEventListener(a,"keyup",e.handlerKeyup,"add"),o||e.elements.push({name:n,value:r,group:l})},s=0,a=t.length;s<a;++s)i(s);this.validateElements()},validateRequired:function(e){return!this.isEmpty(e)},validateEmail:function(e){return this.isEmail(e)},validatePhone:function(e){return this.isPhone(e)},validateMinLength:function(e,t){return this.checkLengthMin(e,t)},validateMaxLength:function(e,t){return this.checkLengthMax(e,t)},validateStrengthPass:function(e){return this.checkStrengthPass(e)},validatePassword:function(e){return this.isPassword(e)},validateZip:function(e){return this.isZip(e)},validateRemote:function(e){var t=e.value,s=e.name,a=e.url,n=e.successAnswer,r=e.sendParam,o=e.method;return new Promise((function(e){i({url:a,method:o,data:_defineProperty({},r,t),async:!0,callback:function(t){t.toLowerCase()===n.toLowerCase()&&e("ok"),e({type:"incorrect",name:s})},error:function(){e({type:"error",name:s})}})}))},generateMessage:function(e,t,i){var s=this.messages||this.defaultMessages,a=s[t]&&s[t][e]||this.messages&&"string"==typeof this.messages[t]&&s[t]||this.defaultMessages[e]||this.DEFAULT_REMOTE_ERROR;i&&(a=a.replace(":value",i.toString())),this.result[t]={message:a}},validateElements:function(){var e=this;this.lockForm(),this.elements.forEach((function(t){e.validateItem({name:t.name,value:t.value,group:t.group})})),this.promisesRemote.length?Promise.all(this.promisesRemote).then((function(t){t.forEach((function(t){"ok"!==t?("error"===t.type&&alert("Server error occured. Please try later."),e.generateMessage("remote",t.name),e.renderErrors()):e.renderErrors()}))})):this.renderErrors()},validateItem:function(e){var t=this,i=e.name,s=e.group,a=e.value,n=e.isKeyupChange,r=this.rules[i]||this.defaultRules[i]||!1;if(r)for(var o in r){var l=r[o];if("required"!==o&&"function"!==o&&""==a)return;switch(o){case"function":if("function"!=typeof l)break;if(l(i,a))break;return void this.generateMessage("function",i,l);case"required":if(!l)break;if(s.length){var u=!1;if(s.forEach((function(e){t.validateRequired(e)&&(u=!0)})),u)break}else if(this.validateRequired(a))break;return void this.generateMessage("required",i);case"email":if(!l)break;if(this.validateEmail(a))break;return void this.generateMessage("email",i);case"minLength":if(!l)break;if(this.validateMinLength(a,l))break;return void this.generateMessage("minLength",i,l);case"maxLength":if(!l)break;if(this.validateMaxLength(a,l))break;return void this.generateMessage("maxLength",i,l);case"phone":if(!l)break;if(this.validatePhone(a))break;return void this.generateMessage("phone",i);case"password":if(!l)break;if(this.validatePassword(a))break;return void this.generateMessage("password",i);case"strength":if(!l||"object"!==(void 0===l?"undefined":_typeof(l)))break;if(l.default&&this.validateStrengthPass(a))break;if(l.custom){var h=void 0;try{h=new RegExp(l.custom)}catch(e){h=this.REGEXP.strengthPass,console.error("Custom regexp for strength rule is not valid. Default regexp was used.")}if(h.test(a))break}return void this.generateMessage("strength",i);case"zip":if(!l)break;if(this.validateZip(a))break;return void this.generateMessage("zip",i);case"remote":if(n)break;if(!l)break;var d=l.url,c=l.successAnswer,p=l.method,f=l.sendParam,v=this.$form.querySelector('input[data-validate-field="'+i+'"]');return this.setterEventListener(v,"keyup",this.handlerKeyup,"remove"),void this.promisesRemote.push(this.validateRemote({name:i,value:a,url:d,method:p,sendParam:f,successAnswer:c}))}}},clearErrors:function(){for(var e=document.querySelectorAll(".js-validate-error-label"),t=0,i=e.length;t<i;++t)e[t].remove();for(var s=0,a=(e=document.querySelectorAll(".js-validate-error-field")).length;s<a;++s)e[s].classList.remove("js-validate-error-field"),e[s].style.border="",e[s].style.color=""},renderErrors:function(){var e=this;if(this.clearErrors(),this.unlockForm(),this.isValidationSuccess=!1,0!==Object.keys(this.result).length){for(var t in this.result){var i=this.result[t].message,s=this.$form.querySelectorAll('[data-validate-field="'+t+'"]'),a=s[s.length-1],n=document.createElement("div");if(n.innerHTML=i,n.className="js-validate-error-label",n.setAttribute("style","color: "+this.colorWrong),a.style.border="1px solid "+this.colorWrong,a.style.color=""+this.colorWrong,a.classList.add("js-validate-error-field"),"checkbox"===a.type||"radio"===a.type){var r=document.querySelector('label[for="'+a.getAttribute("id")+'"]');"label"===a.parentNode.tagName.toLowerCase()?a.parentNode.parentNode.insertBefore(n,null):r?r.parentNode.insertBefore(n,r.nextSibling):a.parentNode.insertBefore(n,a.nextSibling)}else a.parentNode.insertBefore(n,a.nextSibling)}this.tooltipSelectorWrap.length&&(this.state.tooltipsTimer=setTimeout((function(){e.hideTooltips()}),this.tooltipFadeOutTime))}else this.isValidationSuccess=!0},hideTooltips:function(){var e=this;document.querySelectorAll(".js-validate-error-label").forEach((function(t){t.classList.add(e.tooltipFadeOutClass)})),this.state.tooltipsTimer=null},lockForm:function(){for(var e=this.$form.querySelectorAll("input, textarea, button, select"),t=0,i=e.length;t<i;++t)e[t].setAttribute("disabled","disabled"),e[t].style.pointerEvents="none",e[t].style.webitFilter="grayscale(100%)",e[t].style.filter="grayscale(100%)"},unlockForm:function(){for(var e=this.$form.querySelectorAll("input, textarea, button, select"),t=0,i=e.length;t<i;++t)e[t].removeAttribute("disabled"),e[t].style.pointerEvents="",e[t].style.webitFilter="",e[t].style.filter=""}},e.JustValidate=s}(window),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).IMask={})}(this,(function(e){"use strict";var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},i=function(e){return e&&e.Math==Math&&e},s=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof t&&t)||function(){return this}()||Function("return this")(),a={},n=function(e){try{return!!e()}catch(e){return!0}},r=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),o={},l={}.propertyIsEnumerable,u=Object.getOwnPropertyDescriptor,h=u&&!l.call({1:2},1);o.f=h?function(e){var t=u(this,e);return!!t&&t.enumerable}:l;var d,c,p=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},f={}.toString,v=function(e){return f.call(e).slice(8,-1)},m="".split,g=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==v(e)?m.call(e,""):Object(e)}:Object,y=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},b=g,w=y,E=function(e){return b(w(e))},k=function(e){return"object"==typeof e?null!==e:"function"==typeof e},C=s,S=function(e){return"function"==typeof e?e:void 0},x=function(e,t){return arguments.length<2?S(C[e]):C[e]&&C[e][t]},T=x("navigator","userAgent")||"",M=s,A=T,P=M.process,_=M.Deno,D=P&&P.versions||_&&_.version,F=D&&D.v8;F?c=(d=F.split("."))[0]<4?1:d[0]+d[1]:A&&(!(d=A.match(/Edge\/(\d+)/))||d[1]>=74)&&(d=A.match(/Chrome\/(\d+)/))&&(c=d[1]);var z=c&&+c,I=n,O=!!Object.getOwnPropertySymbols&&!I((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&z&&z<41})),L=O&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,B=x,$=L?function(e){return"symbol"==typeof e}:function(e){var t=B("Symbol");return"function"==typeof t&&Object(e)instanceof t},V=k,R={exports:{}},j=s,N=function(e,t){try{Object.defineProperty(j,e,{value:t,configurable:!0,writable:!0})}catch(i){j[e]=t}return t},H=N,G=s["__core-js_shared__"]||H("__core-js_shared__",{}),Y=G;(R.exports=function(e,t){return Y[e]||(Y[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.17.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"});var X=y,q=function(e){return Object(X(e))},W=q,U={}.hasOwnProperty,K=Object.hasOwn||function(e,t){return U.call(W(e),t)},Z=0,J=Math.random(),Q=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++Z+J).toString(36)},ee=s,te=R.exports,ie=K,se=Q,ae=O,ne=L,re=te("wks"),oe=ee.Symbol,le=ne?oe:oe&&oe.withoutSetter||se,ue=k,he=$,de=function(e,t){var i,s;if("string"===t&&"function"==typeof(i=e.toString)&&!V(s=i.call(e)))return s;if("function"==typeof(i=e.valueOf)&&!V(s=i.call(e)))return s;if("string"!==t&&"function"==typeof(i=e.toString)&&!V(s=i.call(e)))return s;throw TypeError("Can't convert object to primitive value")},ce=function(e){return ie(re,e)&&(ae||"string"==typeof re[e])||(ae&&ie(oe,e)?re[e]=oe[e]:re[e]=le("Symbol."+e)),re[e]}("toPrimitive"),pe=function(e,t){if(!ue(e)||he(e))return e;var i,s=e[ce];if(void 0!==s){if(void 0===t&&(t="default"),i=s.call(e,t),!ue(i)||he(i))return i;throw TypeError("Can't convert object to primitive value")}return void 0===t&&(t="number"),de(e,t)},fe=$,ve=function(e){var t=pe(e,"string");return fe(t)?t:String(t)},me=k,ge=s.document,ye=me(ge)&&me(ge.createElement),be=function(e){return ye?ge.createElement(e):{}},we=!r&&!n((function(){return 7!=Object.defineProperty(be("div"),"a",{get:function(){return 7}}).a})),Ee=r,ke=o,Ce=p,Se=E,xe=ve,Te=K,Me=we,Ae=Object.getOwnPropertyDescriptor;a.f=Ee?Ae:function(e,t){if(e=Se(e),t=xe(t),Me)try{return Ae(e,t)}catch(e){}if(Te(e,t))return Ce(!ke.f.call(e,t),e[t])};var Pe={},_e=k,De=function(e){if(!_e(e))throw TypeError(String(e)+" is not an object");return e},Fe=r,ze=we,Ie=De,Oe=ve,Le=Object.defineProperty;Pe.f=Fe?Le:function(e,t,i){if(Ie(e),t=Oe(t),Ie(i),ze)try{return Le(e,t,i)}catch(e){}if("get"in i||"set"in i)throw TypeError("Accessors not supported");return"value"in i&&(e[t]=i.value),e};var Be=Pe,$e=p,Ve=r?function(e,t,i){return Be.f(e,t,$e(1,i))}:function(e,t,i){return e[t]=i,e},Re={exports:{}},je=G,Ne=Function.toString;"function"!=typeof je.inspectSource&&(je.inspectSource=function(e){return Ne.call(e)});var He,Ge,Ye,Xe=je.inspectSource,qe=Xe,We=s.WeakMap,Ue="function"==typeof We&&/native code/.test(qe(We)),Ke=R.exports,Ze=Q,Je=Ke("keys"),Qe={},et=Ue,tt=k,it=Ve,st=K,at=G,nt=function(e){return Je[e]||(Je[e]=Ze(e))},rt=Qe,ot=s.WeakMap;if(et||at.state){var lt=at.state||(at.state=new ot),ut=lt.get,ht=lt.has,dt=lt.set;He=function(e,t){if(ht.call(lt,e))throw new TypeError("Object already initialized");return t.facade=e,dt.call(lt,e,t),t},Ge=function(e){return ut.call(lt,e)||{}},Ye=function(e){return ht.call(lt,e)}}else{var ct=nt("state");rt[ct]=!0,He=function(e,t){if(st(e,ct))throw new TypeError("Object already initialized");return t.facade=e,it(e,ct,t),t},Ge=function(e){return st(e,ct)?e[ct]:{}},Ye=function(e){return st(e,ct)}}var pt={set:He,get:Ge,has:Ye,enforce:function(e){return Ye(e)?Ge(e):He(e,{})},getterFor:function(e){return function(t){var i;if(!tt(t)||(i=Ge(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return i}}},ft=s,vt=Ve,mt=K,gt=N,yt=Xe,bt=pt.get,wt=pt.enforce,Et=String(String).split("String");(Re.exports=function(e,t,i,s){var a,n=!!s&&!!s.unsafe,r=!!s&&!!s.enumerable,o=!!s&&!!s.noTargetGet;"function"==typeof i&&("string"!=typeof t||mt(i,"name")||vt(i,"name",t),(a=wt(i)).source||(a.source=Et.join("string"==typeof t?t:""))),e!==ft?(n?!o&&e[t]&&(r=!0):delete e[t],r?e[t]=i:vt(e,t,i)):r?e[t]=i:gt(t,i)})(Function.prototype,"toString",(function(){return"function"==typeof this&&bt(this).source||yt(this)}));var kt={},Ct=Math.ceil,St=Math.floor,xt=function(e){return isNaN(e=+e)?0:(e>0?St:Ct)(e)},Tt=xt,Mt=Math.min,At=function(e){return e>0?Mt(Tt(e),9007199254740991):0},Pt=xt,_t=Math.max,Dt=Math.min,Ft=E,zt=At,It=function(e,t){var i=Pt(e);return i<0?_t(i+t,0):Dt(i,t)},Ot=function(e){return function(t,i,s){var a,n=Ft(t),r=zt(n.length),o=It(s,r);if(e&&i!=i){for(;r>o;)if((a=n[o++])!=a)return!0}else for(;r>o;o++)if((e||o in n)&&n[o]===i)return e||o||0;return!e&&-1}},Lt={includes:Ot(!0),indexOf:Ot(!1)},Bt=K,$t=E,Vt=Lt.indexOf,Rt=Qe,jt=function(e,t){var i,s=$t(e),a=0,n=[];for(i in s)!Bt(Rt,i)&&Bt(s,i)&&n.push(i);for(;t.length>a;)Bt(s,i=t[a++])&&(~Vt(n,i)||n.push(i));return n},Nt=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Ht=jt,Gt=Nt.concat("length","prototype");kt.f=Object.getOwnPropertyNames||function(e){return Ht(e,Gt)};var Yt={};Yt.f=Object.getOwnPropertySymbols;var Xt=kt,qt=Yt,Wt=De,Ut=x("Reflect","ownKeys")||function(e){var t=Xt.f(Wt(e)),i=qt.f;return i?t.concat(i(e)):t},Kt=K,Zt=Ut,Jt=a,Qt=Pe,ei=n,ti=/#|\.prototype\./,ii=function(e,t){var i=ai[si(e)];return i==ri||i!=ni&&("function"==typeof t?ei(t):!!t)},si=ii.normalize=function(e){return String(e).replace(ti,".").toLowerCase()},ai=ii.data={},ni=ii.NATIVE="N",ri=ii.POLYFILL="P",oi=ii,li=s,ui=a.f,hi=Ve,di=Re.exports,ci=N,pi=function(e,t){for(var i=Zt(t),s=Qt.f,a=Jt.f,n=0;n<i.length;n++){var r=i[n];Kt(e,r)||s(e,r,a(t,r))}},fi=oi,vi=function(e,t){var i,s,a,n,r,o=e.target,l=e.global,u=e.stat;if(i=l?li:u?li[o]||ci(o,{}):(li[o]||{}).prototype)for(s in t){if(n=t[s],a=e.noTargetGet?(r=ui(i,s))&&r.value:i[s],!fi(l?s:o+(u?".":"#")+s,e.forced)&&void 0!==a){if(typeof n==typeof a)continue;pi(n,a)}(e.sham||a&&a.sham)&&hi(n,"sham",!0),di(i,s,n,e)}},mi=jt,gi=Nt,yi=Object.keys||function(e){return mi(e,gi)},bi=r,wi=n,Ei=yi,ki=Yt,Ci=o,Si=q,xi=g,Ti=Object.assign,Mi=Object.defineProperty,Ai=!Ti||wi((function(){if(bi&&1!==Ti({b:1},Ti(Mi({},"a",{enumerable:!0,get:function(){Mi(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},i=Symbol();return e[i]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),7!=Ti({},e)[i]||"abcdefghijklmnopqrst"!=Ei(Ti({},t)).join("")}))?function(e,t){for(var i=Si(e),s=arguments.length,a=1,n=ki.f,r=Ci.f;s>a;)for(var o,l=xi(arguments[a++]),u=n?Ei(l).concat(n(l)):Ei(l),h=u.length,d=0;h>d;)o=u[d++],bi&&!r.call(l,o)||(i[o]=l[o]);return i}:Ti;vi({target:"Object",stat:!0,forced:Object.assign!==Ai},{assign:Ai});var Pi=$,_i=function(e){if(Pi(e))throw TypeError("Cannot convert a Symbol value to a string");return String(e)},Di=xt,Fi=_i,zi=y,Ii=function(e){var t=Fi(zi(this)),i="",s=Di(e);if(s<0||s==1/0)throw RangeError("Wrong number of repetitions");for(;s>0;(s>>>=1)&&(t+=t))1&s&&(i+=t);return i};vi({target:"String",proto:!0},{repeat:Ii});var Oi=At,Li=_i,Bi=Ii,$i=y,Vi=Math.ceil,Ri=function(e){return function(t,i,s){var a,n,r=Li($i(t)),o=r.length,l=void 0===s?" ":Li(s),u=Oi(i);return u<=o||""==l?r:(a=u-o,(n=Bi.call(l,Vi(a/l.length))).length>a&&(n=n.slice(0,a)),e?r+n:n+r)}},ji={start:Ri(!1),end:Ri(!0)},Ni=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(T),Hi=ji.start;vi({target:"String",proto:!0,forced:Ni},{padStart:function(e){return Hi(this,e,arguments.length>1?arguments[1]:void 0)}});var Gi=ji.end;function Yi(e){return(Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function qi(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function Wi(e,t,i){return t&&qi(e.prototype,t),i&&qi(e,i),e}function Ui(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Zi(e,t)}function Ki(e){return(Ki=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Zi(e,t){return(Zi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ji(e,t){if(null==e)return{};var i,s,a=function(e,t){if(null==e)return{};var i,s,a={},n=Object.keys(e);for(s=0;s<n.length;s++)i=n[s],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)i=n[s],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}function Qi(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function es(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var i,s=Ki(e);if(t){var a=Ki(this).constructor;i=Reflect.construct(s,arguments,a)}else i=s.apply(this,arguments);return Qi(this,i)}}function ts(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ki(e)););return e}function is(e,t,i){return(is="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,i){var s=ts(e,t);if(s){var a=Object.getOwnPropertyDescriptor(s,t);return a.get?a.get.call(i):a.value}})(e,t,i||e)}function ss(e,t,i,s){return(ss="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,t,i,s){var a,n=ts(e,t);if(n){if((a=Object.getOwnPropertyDescriptor(n,t)).set)return a.set.call(s,i),!0;if(!a.writable)return!1}if(a=Object.getOwnPropertyDescriptor(s,t)){if(!a.writable)return!1;a.value=i,Object.defineProperty(s,t,a)}else!function(e,t,i){t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i}(s,t,i);return!0})(e,t,i,s)}function as(e,t,i,s,a){if(!ss(e,t,i,s||e)&&a)throw new Error("failed to set property");return i}function ns(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==i)return;var s,a,n=[],r=!0,o=!1;try{for(i=i.call(e);!(r=(s=i.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==i.return||i.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return rs(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return rs(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,s=new Array(t);i<t;i++)s[i]=e[i];return s}function os(e){return"string"==typeof e||e instanceof String}vi({target:"String",proto:!0,forced:Ni},{padEnd:function(e){return Gi(this,e,arguments.length>1?arguments[1]:void 0)}}),vi({global:!0},{globalThis:s});var ls="NONE",us="LEFT",hs="FORCE_LEFT",ds="RIGHT",cs="FORCE_RIGHT";function ps(e){switch(e){case us:return hs;case ds:return cs;default:return e}}function fs(e){return e.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}var vs=function(){function e(t,i,s,a){for(Xi(this,e),this.value=t,this.cursorPos=i,this.oldValue=s,this.oldSelection=a;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return Wi(e,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?ls:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?ds:us}}]),e}(),ms=function(){function e(t){Xi(this,e),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},t)}return Wi(e,[{key:"aggregate",value:function(e){return this.rawInserted+=e.rawInserted,this.skip=this.skip||e.skip,this.inserted+=e.inserted,this.tailShift+=e.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),e}(),gs=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=arguments.length>2?arguments[2]:void 0;Xi(this,e),this.value=t,this.from=i,this.stop=s}return Wi(e,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(e){this.value+=String(e)}},{key:"appendTo",value:function(e){return e.append(this.toString(),{tail:!0}).aggregate(e._appendPlaceholder())}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(e){Object.assign(this,e)}},{key:"shiftBefore",value:function(e){if(this.from>=e||!this.value.length)return"";var t=this.value[0];return this.value=this.value.slice(1),t}}]),e}();function ys(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new ys.InputMask(e,t)}var bs=function(){function e(t){Xi(this,e),this._value="",this._update(Object.assign({},e.DEFAULTS,t)),this.isInitialized=!0}return Wi(e,[{key:"updateOptions",value:function(e){Object.keys(e).length&&this.withValueRefresh(this._update.bind(this,e))}},{key:"_update",value:function(e){Object.assign(this,e)}},{key:"state",get:function(){return{_value:this.value}},set:function(e){this._value=e._value}},{key:"reset",value:function(){this._value=""}},{key:"value",get:function(){return this._value},set:function(e){this.resolve(e)}},{key:"resolve",value:function(e){return this.reset(),this.append(e,{input:!0},""),this.doCommit(),this.value}},{key:"unmaskedValue",get:function(){return this.value},set:function(e){this.reset(),this.append(e,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(e){this.value=this.doFormat(e)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(e){this.reset(),this.append(e,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}},{key:"nearestInputPos",value:function(e,t){return e}},{key:"extractInput",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this.value.slice(e,t)}},{key:"extractTail",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return new gs(this.extractInput(e,t),e)}},{key:"appendTail",value:function(e){return os(e)&&(e=new gs(String(e))),e.appendTo(this)}},{key:"_appendCharRaw",value:function(e){return e?(this._value+=e,new ms({inserted:e,rawInserted:e})):new ms}},{key:"_appendChar",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2?arguments[2]:void 0,s=this.state,a=this._appendCharRaw(this.doPrepare(e,t),t);if(a.inserted){var n,r=!1!==this.doValidate(t);if(r&&null!=i){var o=this.state;this.overwrite&&(n=i.state,i.shiftBefore(this.value.length));var l=this.appendTail(i);(r=l.rawInserted===i.toString())&&l.inserted&&(this.state=o)}r||(a=new ms,this.state=s,i&&n&&(i.state=n))}return a}},{key:"_appendPlaceholder",value:function(){return new ms}},{key:"append",value:function(e,t,i){if(!os(e))throw new Error("value should be string");var s=new ms,a=os(i)?new gs(String(i)):i;t&&t.tail&&(t._beforeTailState=this.state);for(var n=0;n<e.length;++n)s.aggregate(this._appendChar(e[n],t,a));return null!=a&&(s.tailShift+=this.appendTail(a).tailShift),s}},{key:"remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this._value=this.value.slice(0,e)+this.value.slice(t),new ms}},{key:"withValueRefresh",value:function(e){if(this._refreshing||!this.isInitialized)return e();this._refreshing=!0;var t=this.rawInputValue,i=this.value,s=e();return this.rawInputValue=t,this.value&&this.value!==i&&0===i.indexOf(this.value)&&this.append(i.slice(this.value.length),{},""),delete this._refreshing,s}},{key:"runIsolated",value:function(e){if(this._isolated||!this.isInitialized)return e(this);this._isolated=!0;var t=this.state,i=e(this);return this.state=t,delete this._isolated,i}},{key:"doPrepare",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.prepare?this.prepare(e,this,t):e}},{key:"doValidate",value:function(e){return(!this.validate||this.validate(this.value,this,e))&&(!this.parent||this.parent.doValidate(e))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(e){return this.format?this.format(e,this):e}},{key:"doParse",value:function(e){return this.parse?this.parse(e,this):e}},{key:"splice",value:function(e,t,i,s){var a=e+t,n=this.extractTail(a),r=this.nearestInputPos(e,s);return new ms({tailShift:r-e}).aggregate(this.remove(r)).aggregate(this.append(i,{input:!0},n))}}]),e}();function ws(e){if(null==e)throw new Error("mask property should be defined");return e instanceof RegExp?ys.MaskedRegExp:os(e)?ys.MaskedPattern:e instanceof Date||e===Date?ys.MaskedDate:e instanceof Number||"number"==typeof e||e===Number?ys.MaskedNumber:Array.isArray(e)||e===Array?ys.MaskedDynamic:ys.Masked&&e.prototype instanceof ys.Masked?e:e instanceof Function?ys.MaskedFunction:e instanceof ys.Masked?e.constructor:(console.warn("Mask not found for mask",e),ys.Masked)}function Es(e){if(ys.Masked&&e instanceof ys.Masked)return e;var t=(e=Object.assign({},e)).mask;if(ys.Masked&&t instanceof ys.Masked)return t;var i=ws(t);if(!i)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new i(e)}bs.DEFAULTS={format:function(e){return e},parse:function(e){return e}},ys.Masked=bs,ys.createMask=Es;var ks=["mask"],Cs={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},Ss=function(){function e(t){Xi(this,e);var i=t.mask,s=Ji(t,ks);this.masked=Es({mask:i}),Object.assign(this,s)}return Wi(e,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return 0===e&&t>=1?(this._isFilled=!1,this.masked.remove(e,t)):new ms}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"_appendChar",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this._isFilled)return new ms;var i=this.masked.state,s=this.masked._appendChar(e,t);return s.inserted&&!1===this.doValidate(t)&&(s.inserted=s.rawInserted="",this.masked.state=i),s.inserted||this.isOptional||this.lazy||t.input||(s.inserted=this.placeholderChar),s.skip=!s.inserted&&!this.isOptional,this._isFilled=Boolean(s.inserted),s}},{key:"append",value:function(){var e;return(e=this.masked).append.apply(e,arguments)}},{key:"_appendPlaceholder",value:function(){var e=new ms;return this._isFilled||this.isOptional||(this._isFilled=!0,e.inserted=this.placeholderChar),e}},{key:"extractTail",value:function(){var e;return(e=this.masked).extractTail.apply(e,arguments)}},{key:"appendTail",value:function(){var e;return(e=this.masked).appendTail.apply(e,arguments)}},{key:"extractInput",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=arguments.length>2?arguments[2]:void 0;return this.masked.extractInput(e,t,i)}},{key:"nearestInputPos",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ls,i=0,s=this.value.length,a=Math.min(Math.max(e,i),s);switch(t){case us:case hs:return this.isComplete?a:i;case ds:case cs:return this.isComplete?a:s;case ls:default:return a}}},{key:"doValidate",value:function(){var e,t;return(e=this.masked).doValidate.apply(e,arguments)&&(!this.parent||(t=this.parent).doValidate.apply(t,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(e){this.masked.state=e.masked,this._isFilled=e._isFilled}}]),e}(),xs=function(){function e(t){Xi(this,e),Object.assign(this,t),this._value=""}return Wi(e,[{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length;return this._value=this._value.slice(0,e)+this._value.slice(t),this._value||(this._isRawInput=!1),new ms}},{key:"nearestInputPos",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ls,i=0,s=this._value.length;switch(t){case us:case hs:return i;case ls:case ds:case cs:default:return s}}},{key:"extractInput",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return i.raw&&this._isRawInput&&this._value.slice(e,t)||""}},{key:"isComplete",get:function(){return!0}},{key:"_appendChar",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=new ms;if(this._value)return i;var s=this.char===e[0],a=s&&(this.isUnmasking||t.input||t.raw)&&!t.tail;return a&&(i.rawInserted=this.char),this._value=i.inserted=this.char,this._isRawInput=a&&(t.raw||t.input),i}},{key:"_appendPlaceholder",value:function(){var e=new ms;return this._value||(this._value=e.inserted=this.char),e}},{key:"extractTail",value:function(){return arguments.length>1&&void 0!==arguments[1]||this.value.length,new gs("")}},{key:"appendTail",value:function(e){return os(e)&&(e=new gs(String(e))),e.appendTo(this)}},{key:"append",value:function(e,t,i){var s=this._appendChar(e,t);return null!=i&&(s.tailShift+=this.appendTail(i).tailShift),s}},{key:"doCommit",value:function(){}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(e){Object.assign(this,e)}}]),e}(),Ts=["chunks"],Ms=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;Xi(this,e),this.chunks=t,this.from=i}return Wi(e,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(t){if(String(t)){os(t)&&(t=new gs(String(t)));var i=this.chunks[this.chunks.length-1],s=i&&(i.stop===t.stop||null==t.stop)&&t.from===i.from+i.toString().length;if(t instanceof gs)s?i.extend(t.toString()):this.chunks.push(t);else if(t instanceof e){if(null==t.stop)for(var a;t.chunks.length&&null==t.chunks[0].stop;)(a=t.chunks.shift()).from+=t.from,this.extend(a);t.toString()&&(t.stop=t.blockIndex,this.chunks.push(t))}}}},{key:"appendTo",value:function(t){if(!(t instanceof ys.MaskedPattern))return new gs(this.toString()).appendTo(t);for(var i=new ms,s=0;s<this.chunks.length&&!i.skip;++s){var a=this.chunks[s],n=t._mapPosToBlock(t.value.length),r=a.stop,o=void 0;if(null!=r&&(!n||n.index<=r)&&((a instanceof e||t._stops.indexOf(r)>=0)&&i.aggregate(t._appendPlaceholder(r)),o=a instanceof e&&t._blocks[r]),o){var l=o.appendTail(a);l.skip=!1,i.aggregate(l),t._value+=l.inserted;var u=a.toString().slice(l.rawInserted.length);u&&i.aggregate(t.append(u,{tail:!0}))}else i.aggregate(t.append(a.toString(),{tail:!0}))}return i}},{key:"state",get:function(){return{chunks:this.chunks.map((function(e){return e.state})),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(t){var i=t.chunks,s=Ji(t,Ts);Object.assign(this,s),this.chunks=i.map((function(t){var i="chunks"in t?new e:new gs;return i.state=t,i}))}},{key:"shiftBefore",value:function(e){if(this.from>=e||!this.chunks.length)return"";for(var t=e-this.from,i=0;i<this.chunks.length;){var s=this.chunks[i],a=s.shiftBefore(t);if(s.toString()){if(!a)break;++i}else this.chunks.splice(i,1);if(a)return a}return""}}]),e}(),As=function(e){Ui(i,e);var t=es(i);function i(){return Xi(this,i),t.apply(this,arguments)}return Wi(i,[{key:"_update",value:function(e){e.mask&&(e.validate=function(t){return t.search(e.mask)>=0}),is(Ki(i.prototype),"_update",this).call(this,e)}}]),i}(bs);ys.MaskedRegExp=As;var Ps=["_blocks"],_s=function(e){Ui(i,e);var t=es(i);function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Xi(this,i),e.definitions=Object.assign({},Cs,e.definitions),t.call(this,Object.assign({},i.DEFAULTS,e))}return Wi(i,[{key:"_update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.definitions=Object.assign({},this.definitions,e.definitions),is(Ki(i.prototype),"_update",this).call(this,e),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var e=this,t=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var s=this.mask;if(s&&t)for(var a=!1,n=!1,r=0;r<s.length;++r){if(this.blocks)if("continue"===function(){var t=s.slice(r),i=Object.keys(e.blocks).filter((function(e){return 0===t.indexOf(e)}));i.sort((function(e,t){return t.length-e.length}));var a=i[0];if(a){var n=Es(Object.assign({parent:e,lazy:e.lazy,placeholderChar:e.placeholderChar,overwrite:e.overwrite},e.blocks[a]));return n&&(e._blocks.push(n),e._maskedBlocks[a]||(e._maskedBlocks[a]=[]),e._maskedBlocks[a].push(e._blocks.length-1)),r+=a.length-1,"continue"}}())continue;var o=s[r],l=o in t;if(o!==i.STOP_CHAR)if("{"!==o&&"}"!==o)if("["!==o&&"]"!==o){if(o===i.ESCAPE_CHAR){if(++r,!(o=s[r]))break;l=!1}var u=l?new Ss({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:t[o],isOptional:n}):new xs({char:o,isUnmasking:a});this._blocks.push(u)}else n=!n;else a=!a;else this._stops.push(this._blocks.length)}}},{key:"state",get:function(){return Object.assign({},is(Ki(i.prototype),"state",this),{_blocks:this._blocks.map((function(e){return e.state}))})},set:function(e){var t=e._blocks,s=Ji(e,Ps);this._blocks.forEach((function(e,i){return e.state=t[i]})),as(Ki(i.prototype),"state",s,this,!0)}},{key:"reset",value:function(){is(Ki(i.prototype),"reset",this).call(this),this._blocks.forEach((function(e){return e.reset()}))}},{key:"isComplete",get:function(){return this._blocks.every((function(e){return e.isComplete}))}},{key:"doCommit",value:function(){this._blocks.forEach((function(e){return e.doCommit()})),is(Ki(i.prototype),"doCommit",this).call(this)}},{key:"unmaskedValue",get:function(){return this._blocks.reduce((function(e,t){return e+t.unmaskedValue}),"")},set:function(e){as(Ki(i.prototype),"unmaskedValue",e,this,!0)}},{key:"value",get:function(){return this._blocks.reduce((function(e,t){return e+t.value}),"")},set:function(e){as(Ki(i.prototype),"value",e,this,!0)}},{key:"appendTail",value:function(e){return is(Ki(i.prototype),"appendTail",this).call(this,e).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this._mapPosToBlock(this.value.length),s=new ms;if(!i)return s;for(var a=i.index;;++a){var n=this._blocks[a];if(!n)break;var r=n._appendChar(e,t),o=r.skip;if(s.aggregate(r),o||r.rawInserted)break}return s}},{key:"extractTail",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,s=new Ms;return t===i||this._forEachBlocksInRange(t,i,(function(t,i,a,n){var r=t.extractTail(a,n);r.stop=e._findStopBefore(i),r.from=e._blockStartPos(i),r instanceof Ms&&(r.blockIndex=i),s.extend(r)})),s}},{key:"extractInput",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e===t)return"";var s="";return this._forEachBlocksInRange(e,t,(function(e,t,a,n){s+=e.extractInput(a,n,i)})),s}},{key:"_findStopBefore",value:function(e){for(var t,i=0;i<this._stops.length;++i){var s=this._stops[i];if(!(s<=e))break;t=s}return t}},{key:"_appendPlaceholder",value:function(e){var t=this,i=new ms;if(this.lazy&&null==e)return i;var s=this._mapPosToBlock(this.value.length);if(!s)return i;var a=s.index,n=null!=e?e:this._blocks.length;return this._blocks.slice(a,n).forEach((function(s){if(!s.lazy||null!=e){var a=null!=s._blocks?[s._blocks.length]:[],n=s._appendPlaceholder.apply(s,a);t._value+=n.inserted,i.aggregate(n)}})),i}},{key:"_mapPosToBlock",value:function(e){for(var t="",i=0;i<this._blocks.length;++i){var s=this._blocks[i],a=t.length;if(e<=(t+=s.value).length)return{index:i,offset:e-a}}}},{key:"_blockStartPos",value:function(e){return this._blocks.slice(0,e).reduce((function(e,t){return e+t.value.length}),0)}},{key:"_forEachBlocksInRange",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=arguments.length>2?arguments[2]:void 0,s=this._mapPosToBlock(e);if(s){var a=this._mapPosToBlock(t),n=a&&s.index===a.index,r=s.offset,o=a&&n?a.offset:this._blocks[s.index].value.length;if(i(this._blocks[s.index],s.index,r,o),a&&!n){for(var l=s.index+1;l<a.index;++l)i(this._blocks[l],l,0,this._blocks[l].value.length);i(this._blocks[a.index],a.index,0,a.offset)}}}},{key:"remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,s=is(Ki(i.prototype),"remove",this).call(this,e,t);return this._forEachBlocksInRange(e,t,(function(e,t,i,a){s.aggregate(e.remove(i,a))})),s}},{key:"nearestInputPos",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ls,i=this._mapPosToBlock(e)||{index:0,offset:0},s=i.offset,a=i.index,n=this._blocks[a];if(!n)return e;var r=s;0!==r&&r<n.value.length&&(r=n.nearestInputPos(s,ps(t)));var o=r===n.value.length,l=0===r;if(!l&&!o)return this._blockStartPos(a)+r;var u=o?a+1:a;if(t===ls){if(u>0){var h=u-1,d=this._blocks[h],c=d.nearestInputPos(0,ls);if(!d.value.length||c!==d.value.length)return this._blockStartPos(u)}for(var p=u,f=p;f<this._blocks.length;++f){var v=this._blocks[f],m=v.nearestInputPos(0,ls);if(!v.value.length||m!==v.value.length)return this._blockStartPos(f)+m}for(var g=u-1;g>=0;--g){var y=this._blocks[g],b=y.nearestInputPos(0,ls);if(!y.value.length||b!==y.value.length)return this._blockStartPos(g)+y.value.length}return e}if(t===us||t===hs){for(var w,E=u;E<this._blocks.length;++E)if(this._blocks[E].value){w=E;break}if(null!=w){var k=this._blocks[w],C=k.nearestInputPos(0,ds);if(0===C&&k.unmaskedValue.length)return this._blockStartPos(w)+C}for(var S,x=-1,T=u-1;T>=0;--T){var M=this._blocks[T],A=M.nearestInputPos(M.value.length,hs);if(M.value&&0===A||(S=T),0!==A){if(A!==M.value.length)return this._blockStartPos(T)+A;x=T;break}}if(t===us)for(var P=x+1;P<=Math.min(u,this._blocks.length-1);++P){var _=this._blocks[P],D=_.nearestInputPos(0,ls),F=this._blockStartPos(P)+D;if(F>e)break;if(D!==_.value.length)return F}if(x>=0)return this._blockStartPos(x)+this._blocks[x].value.length;if(t===hs||this.lazy&&!this.extractInput()&&!Ds(this._blocks[u]))return 0;if(null!=S)return this._blockStartPos(S);for(var z=u;z<this._blocks.length;++z){var I=this._blocks[z],O=I.nearestInputPos(0,ls);if(!I.value.length||O!==I.value.length)return this._blockStartPos(z)+O}return 0}if(t===ds||t===cs){for(var L,B,$=u;$<this._blocks.length;++$){var V=this._blocks[$],R=V.nearestInputPos(0,ls);if(R!==V.value.length){B=this._blockStartPos($)+R,L=$;break}}if(null!=L&&null!=B){for(var j=L;j<this._blocks.length;++j){var N=this._blocks[j],H=N.nearestInputPos(0,cs);if(H!==N.value.length)return this._blockStartPos(j)+H}return t===cs?this.value.length:B}for(var G=Math.min(u,this._blocks.length-1);G>=0;--G){var Y=this._blocks[G],X=Y.nearestInputPos(Y.value.length,us);if(0!==X){var q=this._blockStartPos(G)+X;if(q>=e)return q;break}}}return e}},{key:"maskedBlock",value:function(e){return this.maskedBlocks(e)[0]}},{key:"maskedBlocks",value:function(e){var t=this,i=this._maskedBlocks[e];return i?i.map((function(e){return t._blocks[e]})):[]}}]),i}(bs);function Ds(e){if(!e)return!1;var t=e.value;return!t||e.nearestInputPos(0,ls)!==t.length}_s.DEFAULTS={lazy:!0,placeholderChar:"_"},_s.STOP_CHAR="`",_s.ESCAPE_CHAR="\\",_s.InputDefinition=Ss,_s.FixedDefinition=xs,ys.MaskedPattern=_s;var Fs=function(e){Ui(i,e);var t=es(i);function i(){return Xi(this,i),t.apply(this,arguments)}return Wi(i,[{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"_update",value:function(e){e=Object.assign({to:this.to||0,from:this.from||0},e);var t=String(e.to).length;null!=e.maxLength&&(t=Math.max(t,e.maxLength)),e.maxLength=t;for(var s=String(e.from).padStart(t,"0"),a=String(e.to).padStart(t,"0"),n=0;n<a.length&&a[n]===s[n];)++n;e.mask=a.slice(0,n).replace(/0/g,"\\0")+"0".repeat(t-n),is(Ki(i.prototype),"_update",this).call(this,e)}},{key:"isComplete",get:function(){return is(Ki(i.prototype),"isComplete",this)&&Boolean(this.value)}},{key:"boundaries",value:function(e){var t="",i="",s=ns(e.match(/^(\D*)(\d*)(\D*)/)||[],3),a=s[1],n=s[2];return n&&(t="0".repeat(a.length)+n,i="9".repeat(a.length)+n),[t=t.padEnd(this.maxLength,"0"),i=i.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(e=is(Ki(i.prototype),"doPrepare",this).call(this,e,t).replace(/\D/g,""),!this.autofix)return e;for(var s=String(this.from).padStart(this.maxLength,"0"),a=String(this.to).padStart(this.maxLength,"0"),n=this.value,r="",o=0;o<e.length;++o){var l=n+r+e[o],u=this.boundaries(l),h=ns(u,2),d=h[0],c=h[1];Number(c)<this.from?r+=s[l.length-1]:Number(d)>this.to?r+=a[l.length-1]:r+=e[o]}return r}},{key:"doValidate",value:function(){var e,t=this.value,s=t.search(/[^0]/);if(-1===s&&t.length<=this._matchFrom)return!0;for(var a=this.boundaries(t),n=ns(a,2),r=n[0],o=n[1],l=arguments.length,u=new Array(l),h=0;h<l;h++)u[h]=arguments[h];return this.from<=Number(o)&&Number(r)<=this.to&&(e=is(Ki(i.prototype),"doValidate",this)).call.apply(e,[this].concat(u))}}]),i}(_s);ys.MaskedRange=Fs;var zs=function(e){Ui(i,e);var t=es(i);function i(e){return Xi(this,i),t.call(this,Object.assign({},i.DEFAULTS,e))}return Wi(i,[{key:"_update",value:function(e){e.mask===Date&&delete e.mask,e.pattern&&(e.mask=e.pattern);var t=e.blocks;e.blocks=Object.assign({},i.GET_DEFAULT_BLOCKS()),e.min&&(e.blocks.Y.from=e.min.getFullYear()),e.max&&(e.blocks.Y.to=e.max.getFullYear()),e.min&&e.max&&e.blocks.Y.from===e.blocks.Y.to&&(e.blocks.m.from=e.min.getMonth()+1,e.blocks.m.to=e.max.getMonth()+1,e.blocks.m.from===e.blocks.m.to&&(e.blocks.d.from=e.min.getDate(),e.blocks.d.to=e.max.getDate())),Object.assign(e.blocks,t),Object.keys(e.blocks).forEach((function(t){var i=e.blocks[t];"autofix"in i||(i.autofix=e.autofix)})),is(Ki(i.prototype),"_update",this).call(this,e)}},{key:"doValidate",value:function(){for(var e,t=this.date,s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];return(e=is(Ki(i.prototype),"doValidate",this)).call.apply(e,[this].concat(a))&&(!this.isComplete||this.isDateExist(this.value)&&null!=t&&(null==this.min||this.min<=t)&&(null==this.max||t<=this.max))}},{key:"isDateExist",value:function(e){return this.format(this.parse(e,this),this).indexOf(e)>=0}},{key:"date",get:function(){return this.typedValue},set:function(e){this.typedValue=e}},{key:"typedValue",get:function(){return this.isComplete?is(Ki(i.prototype),"typedValue",this):null},set:function(e){as(Ki(i.prototype),"typedValue",e,this,!0)}}]),i}(_s);zs.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(e){return[String(e.getDate()).padStart(2,"0"),String(e.getMonth()+1).padStart(2,"0"),e.getFullYear()].join(".")},parse:function(e){var t=ns(e.split("."),3),i=t[0],s=t[1],a=t[2];return new Date(a,s-1,i)}},zs.GET_DEFAULT_BLOCKS=function(){return{d:{mask:Fs,from:1,to:31,maxLength:2},m:{mask:Fs,from:1,to:12,maxLength:2},Y:{mask:Fs,from:1900,to:9999}}},ys.MaskedDate=zs;var Is=function(){function e(){Xi(this,e)}return Wi(e,[{key:"selectionStart",get:function(){var e;try{e=this._unsafeSelectionStart}catch(e){}return null!=e?e:this.value.length}},{key:"selectionEnd",get:function(){var e;try{e=this._unsafeSelectionEnd}catch(e){}return null!=e?e:this.value.length}},{key:"select",value:function(e,t){if(null!=e&&null!=t&&(e!==this.selectionStart||t!==this.selectionEnd))try{this._unsafeSelect(e,t)}catch(e){}}},{key:"_unsafeSelect",value:function(e,t){}},{key:"isActive",get:function(){return!1}},{key:"bindEvents",value:function(e){}},{key:"unbindEvents",value:function(){}}]),e}();ys.MaskElement=Is;var Os=function(e){Ui(i,e);var t=es(i);function i(e){var s;return Xi(this,i),(s=t.call(this)).input=e,s._handlers={},s}return Wi(i,[{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"_unsafeSelect",value:function(e,t){this.input.setSelectionRange(e,t)}},{key:"value",get:function(){return this.input.value},set:function(e){this.input.value=e}},{key:"bindEvents",value:function(e){var t=this;Object.keys(e).forEach((function(s){return t._toggleEventHandler(i.EVENTS_MAP[s],e[s])}))}},{key:"unbindEvents",value:function(){var e=this;Object.keys(this._handlers).forEach((function(t){return e._toggleEventHandler(t)}))}},{key:"_toggleEventHandler",value:function(e,t){this._handlers[e]&&(this.input.removeEventListener(e,this._handlers[e]),delete this._handlers[e]),t&&(this.input.addEventListener(e,t),this._handlers[e]=t)}}]),i}(Is);Os.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},ys.HTMLMaskElement=Os;var Ls=function(e){Ui(i,e);var t=es(i);function i(){return Xi(this,i),t.apply(this,arguments)}return Wi(i,[{key:"_unsafeSelectionStart",get:function(){var e=this.rootElement,t=e.getSelection&&e.getSelection();return t&&t.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var e=this.rootElement,t=e.getSelection&&e.getSelection();return t&&this._unsafeSelectionStart+String(t).length}},{key:"_unsafeSelect",value:function(e,t){if(this.rootElement.createRange){var i=this.rootElement.createRange();i.setStart(this.input.firstChild||this.input,e),i.setEnd(this.input.lastChild||this.input,t);var s=this.rootElement,a=s.getSelection&&s.getSelection();a&&(a.removeAllRanges(),a.addRange(i))}}},{key:"value",get:function(){return this.input.textContent},set:function(e){this.input.textContent=e}}]),i}(Os);ys.HTMLContenteditableMaskElement=Ls;var Bs=["mask"],$s=function(){function e(t,i){Xi(this,e),this.el=t instanceof Is?t:t.isContentEditable&&"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName?new Ls(t):new Os(t),this.masked=Es(i),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return Wi(e,[{key:"mask",get:function(){return this.masked.mask},set:function(e){if(!this.maskEquals(e))if(e instanceof ys.Masked||this.masked.constructor!==ws(e)){var t=Es({mask:e});t.unmaskedValue=this.masked.unmaskedValue,this.masked=t}else this.masked.updateOptions({mask:e})}},{key:"maskEquals",value:function(e){return null==e||e===this.masked.mask||e===Date&&this.masked instanceof zs}},{key:"value",get:function(){return this._value},set:function(e){this.masked.value=e,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(e){this.masked.unmaskedValue=e,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(e){this.masked.typedValue=e,this.updateControl(),this.alignCursor()}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el&&this.el.unbindEvents()}},{key:"_fireEvent",value:function(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];var a=this._listeners[e];a&&a.forEach((function(e){return e.apply(void 0,i)}))}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(e){this.el&&this.el.isActive&&(this.el.select(e,e),this._saveSelection())}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var e=this.masked.unmaskedValue,t=this.masked.value,i=this.unmaskedValue!==e||this.value!==t;this._unmaskedValue=e,this._value=t,this.el.value!==t&&(this.el.value=t),i&&this._fireChangeEvents()}},{key:"updateOptions",value:function(e){var t=e.mask,i=Ji(e,Bs),s=!this.maskEquals(t),a=!function e(t,i){if(i===t)return!0;var s,a=Array.isArray(i),n=Array.isArray(t);if(a&&n){if(i.length!=t.length)return!1;for(s=0;s<i.length;s++)if(!e(i[s],t[s]))return!1;return!0}if(a!=n)return!1;if(i&&t&&"object"===Yi(i)&&"object"===Yi(t)){var r=i instanceof Date,o=t instanceof Date;if(r&&o)return i.getTime()==t.getTime();if(r!=o)return!1;var l=i instanceof RegExp,u=t instanceof RegExp;if(l&&u)return i.toString()==t.toString();if(l!=u)return!1;var h=Object.keys(i);for(s=0;s<h.length;s++)if(!Object.prototype.hasOwnProperty.call(t,h[s]))return!1;for(s=0;s<h.length;s++)if(!e(t[h[s]],i[h[s]]))return!1;return!0}return!(!i||!t||"function"!=typeof i||"function"!=typeof t)&&i.toString()===t.toString()}(this.masked,i);s&&(this.mask=t),a&&this.masked.updateOptions(i),(s||a)&&this.updateControl()}},{key:"updateCursor",value:function(e){null!=e&&(this.cursorPos=e,this._delayUpdateCursor(e))}},{key:"_delayUpdateCursor",value:function(e){var t=this;this._abortUpdateCursor(),this._changingCursorPos=e,this._cursorChanging=setTimeout((function(){t.el&&(t.cursorPos=t._changingCursorPos,t._abortUpdateCursor())}),10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept",this._inputEvent),this.masked.isComplete&&this._fireEvent("complete",this._inputEvent)}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,us)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(e,t){return this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t),this}},{key:"off",value:function(e,t){if(!this._listeners[e])return this;if(!t)return delete this._listeners[e],this;var i=this._listeners[e].indexOf(t);return i>=0&&this._listeners[e].splice(i,1),this}},{key:"_onInput",value:function(e){if(this._inputEvent=e,this._abortUpdateCursor(),!this._selection)return this.updateValue();var t=new vs(this.el.value,this.cursorPos,this.value,this._selection),i=this.masked.rawInputValue,s=this.masked.splice(t.startChangePos,t.removed.length,t.inserted,t.removeDirection).offset,a=i===this.masked.rawInputValue?t.removeDirection:ls,n=this.masked.nearestInputPos(t.startChangePos+s,a);this.updateControl(),this.updateCursor(n),delete this._inputEvent}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(e){e.preventDefault(),e.stopPropagation()}},{key:"_onFocus",value:function(e){this.alignCursorFriendly()}},{key:"_onClick",value:function(e){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}}]),e}();ys.InputMask=$s;var Vs=function(e){Ui(i,e);var t=es(i);function i(){return Xi(this,i),t.apply(this,arguments)}return Wi(i,[{key:"_update",value:function(e){e.enum&&(e.mask="*".repeat(e.enum[0].length)),is(Ki(i.prototype),"_update",this).call(this,e)}},{key:"doValidate",value:function(){for(var e,t=this,s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];return this.enum.some((function(e){return e.indexOf(t.unmaskedValue)>=0}))&&(e=is(Ki(i.prototype),"doValidate",this)).call.apply(e,[this].concat(a))}}]),i}(_s);ys.MaskedEnum=Vs;var Rs=function(e){Ui(i,e);var t=es(i);function i(e){return Xi(this,i),t.call(this,Object.assign({},i.DEFAULTS,e))}return Wi(i,[{key:"_update",value:function(e){is(Ki(i.prototype),"_update",this).call(this,e),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var e="^"+(this.allowNegative?"[+|\\-]?":""),t=(this.scale?"("+fs(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(e+"(0|([1-9]+\\d*))?"+t),this._numberRegExp=new RegExp(e+"\\d*"+t),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(fs).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(fs(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(e){return e.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(e){var t=e.split(this.radix);return t[0]=t[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),t.join(this.radix)}},{key:"doPrepare",value:function(e){for(var t,s=arguments.length,a=new Array(s>1?s-1:0),n=1;n<s;n++)a[n-1]=arguments[n];return(t=is(Ki(i.prototype),"doPrepare",this)).call.apply(t,[this,this._removeThousandsSeparators(e.replace(this._mapToRadixRegExp,this.radix))].concat(a))}},{key:"_separatorsCount",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=0,s=0;s<e;++s)this._value.indexOf(this.thousandsSeparator,s)===s&&(++i,t&&(e+=this.thousandsSeparator.length));return i}},{key:"_separatorsCountFromSlice",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._value;return this._separatorsCount(this._removeThousandsSeparators(e).length,!0)}},{key:"extractInput",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,s=arguments.length>2?arguments[2]:void 0,a=this._adjustRangeWithSeparators(e,t),n=ns(a,2);return e=n[0],t=n[1],this._removeThousandsSeparators(is(Ki(i.prototype),"extractInput",this).call(this,e,t,s))}},{key:"_appendCharRaw",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.thousandsSeparator)return is(Ki(i.prototype),"_appendCharRaw",this).call(this,e,t);var s=t.tail&&t._beforeTailState?t._beforeTailState._value:this._value,a=this._separatorsCountFromSlice(s);this._value=this._removeThousandsSeparators(this.value);var n=is(Ki(i.prototype),"_appendCharRaw",this).call(this,e,t);this._value=this._insertThousandsSeparators(this._value);var r=t.tail&&t._beforeTailState?t._beforeTailState._value:this._value,o=this._separatorsCountFromSlice(r);return n.tailShift+=(o-a)*this.thousandsSeparator.length,n.skip=!n.rawInserted&&e===this.thousandsSeparator,n}},{key:"_findSeparatorAround",value:function(e){if(this.thousandsSeparator){var t=e-this.thousandsSeparator.length+1,i=this.value.indexOf(this.thousandsSeparator,t);if(i<=e)return i}return-1}},{key:"_adjustRangeWithSeparators",value:function(e,t){var i=this._findSeparatorAround(e);i>=0&&(e=i);var s=this._findSeparatorAround(t);return s>=0&&(t=s+this.thousandsSeparator.length),[e,t]}},{key:"remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=this._adjustRangeWithSeparators(e,t),s=ns(i,2);e=s[0],t=s[1];var a=this.value.slice(0,e),n=this.value.slice(t),r=this._separatorsCount(a.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(a+n));var o=this._separatorsCountFromSlice(a);return new ms({tailShift:(o-r)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(e,t){if(!this.thousandsSeparator)return e;switch(t){case ls:case us:case hs:var i=this._findSeparatorAround(e-1);if(i>=0){var s=i+this.thousandsSeparator.length;if(e<s||this.value.length<=s||t===hs)return i}break;case ds:case cs:var a=this._findSeparatorAround(e);if(a>=0)return a+this.thousandsSeparator.length}return e}},{key:"doValidate",value:function(e){var t=(e.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));if(t){var s=this.number;t=t&&!isNaN(s)&&(null==this.min||this.min>=0||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)}return t&&is(Ki(i.prototype),"doValidate",this).call(this,e)}},{key:"doCommit",value:function(){if(this.value){var e=this.number,t=e;null!=this.min&&(t=Math.max(t,this.min)),null!=this.max&&(t=Math.min(t,this.max)),t!==e&&(this.unmaskedValue=String(t));var s=this.value;this.normalizeZeros&&(s=this._normalizeZeros(s)),this.padFractionalZeros&&(s=this._padFractionalZeros(s)),this._value=s}is(Ki(i.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(e){var t=this._removeThousandsSeparators(e).split(this.radix);return t[0]=t[0].replace(/^(\D*)(0*)(\d*)/,(function(e,t,i,s){return t+s})),e.length&&!/\d$/.test(t[0])&&(t[0]=t[0]+"0"),t.length>1&&(t[1]=t[1].replace(/0*$/,""),t[1].length||(t.length=1)),this._insertThousandsSeparators(t.join(this.radix))}},{key:"_padFractionalZeros",value:function(e){if(!e)return e;var t=e.split(this.radix);return t.length<2&&t.push(""),t[1]=t[1].padEnd(this.scale,"0"),t.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(e){as(Ki(i.prototype),"unmaskedValue",e.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(e){as(Ki(i.prototype),"unmaskedValue",String(e),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(e){this.typedValue=e}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),i}(bs);Rs.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},ys.MaskedNumber=Rs;var js=function(e){Ui(i,e);var t=es(i);function i(){return Xi(this,i),t.apply(this,arguments)}return Wi(i,[{key:"_update",value:function(e){e.mask&&(e.validate=e.mask),is(Ki(i.prototype),"_update",this).call(this,e)}}]),i}(bs);ys.MaskedFunction=js;var Ns=["compiledMasks","currentMaskRef","currentMask"],Hs=function(e){Ui(i,e);var t=es(i);function i(e){var s;return Xi(this,i),(s=t.call(this,Object.assign({},i.DEFAULTS,e))).currentMask=null,s}return Wi(i,[{key:"_update",value:function(e){is(Ki(i.prototype),"_update",this).call(this,e),"mask"in e&&(this.compiledMasks=Array.isArray(e.mask)?e.mask.map((function(e){return Es(e)})):[])}},{key:"_appendCharRaw",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this._applyDispatch(e,t);return this.currentMask&&i.aggregate(this.currentMask._appendChar(e,t)),i}},{key:"_applyDispatch",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.tail&&null!=t._beforeTailState?t._beforeTailState._value:this.value,s=this.rawInputValue,a=t.tail&&null!=t._beforeTailState?t._beforeTailState._rawInputValue:s,n=s.slice(a.length),r=this.currentMask,o=new ms,l=r&&r.state;if(this.currentMask=this.doDispatch(e,Object.assign({},t)),this.currentMask)if(this.currentMask!==r){if(this.currentMask.reset(),a){var u=this.currentMask.append(a,{raw:!0});o.tailShift=u.inserted.length-i.length}n&&(o.tailShift+=this.currentMask.append(n,{raw:!0,tail:!0}).tailShift)}else this.currentMask.state=l;return o}},{key:"_appendPlaceholder",value:function(){var e=this._applyDispatch.apply(this,arguments);return this.currentMask&&e.aggregate(this.currentMask._appendPlaceholder()),e}},{key:"doDispatch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.dispatch(e,this,t)}},{key:"doValidate",value:function(){for(var e,t,s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];return(e=is(Ki(i.prototype),"doValidate",this)).call.apply(e,[this].concat(a))&&(!this.currentMask||(t=this.currentMask).doValidate.apply(t,a))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach((function(e){return e.reset()}))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(e){as(Ki(i.prototype),"value",e,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(e){as(Ki(i.prototype),"unmaskedValue",e,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(e){var t=String(e);this.currentMask&&(this.currentMask.typedValue=e,t=this.currentMask.unmaskedValue),this.unmaskedValue=t}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"remove",value:function(){var e,t=new ms;this.currentMask&&t.aggregate((e=this.currentMask).remove.apply(e,arguments)).aggregate(this._applyDispatch());return t}},{key:"state",get:function(){return Object.assign({},is(Ki(i.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map((function(e){return e.state})),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(e){var t=e.compiledMasks,s=e.currentMaskRef,a=e.currentMask,n=Ji(e,Ns);this.compiledMasks.forEach((function(e,i){return e.state=t[i]})),null!=s&&(this.currentMask=s,this.currentMask.state=a),as(Ki(i.prototype),"state",n,this,!0)}},{key:"extractInput",value:function(){var e;return this.currentMask?(e=this.currentMask).extractInput.apply(e,arguments):""}},{key:"extractTail",value:function(){for(var e,t,s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];return this.currentMask?(e=this.currentMask).extractTail.apply(e,a):(t=is(Ki(i.prototype),"extractTail",this)).call.apply(t,[this].concat(a))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),is(Ki(i.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var e,t,s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];return this.currentMask?(e=this.currentMask).nearestInputPos.apply(e,a):(t=is(Ki(i.prototype),"nearestInputPos",this)).call.apply(t,[this].concat(a))}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:is(Ki(i.prototype),"overwrite",this)},set:function(e){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),i}(bs);Hs.DEFAULTS={dispatch:function(e,t,i){if(t.compiledMasks.length){var s=t.rawInputValue,a=t.compiledMasks.map((function(t,a){return t.reset(),t.append(s,{raw:!0}),t.append(e,i),{weight:t.rawInputValue.length,index:a}}));return a.sort((function(e,t){return t.weight-e.weight})),t.compiledMasks[a[0].index]}}},ys.MaskedDynamic=Hs;var Gs={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function Ys(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Gs.MASKED,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Gs.MASKED,s=Es(e);return function(e){return s.runIsolated((function(s){return s[t]=e,s[i]}))}}function Xs(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];return Ys.apply(void 0,i)(e)}ys.PIPE_TYPE=Gs,ys.createPipe=Ys,ys.pipe=Xs;try{globalThis.IMask=ys}catch(e){}e.HTMLContenteditableMaskElement=Ls,e.HTMLMaskElement=Os,e.InputMask=$s,e.MaskElement=Is,e.Masked=bs,e.MaskedDate=zs,e.MaskedDynamic=Hs,e.MaskedEnum=Vs,e.MaskedFunction=js,e.MaskedNumber=Rs,e.MaskedPattern=_s,e.MaskedRange=Fs,e.MaskedRegExp=As,e.PIPE_TYPE=Gs,e.createMask=Es,e.createPipe=Ys,e.default=ys,e.pipe=Xs,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiU3dpcGVyIiwidGhpcyIsImlzT2JqZWN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJ0YXJnZXQiLCJzcmMiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImxlbmd0aCIsImRvYyIsImRvY3VtZW50Iiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJ3aW4iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwiRG9tNyIsImFyciIsImkiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZWxzIiwidGVtcFBhcmVudCIsImh0bWwiLCJ0cmltIiwiaW5kZXhPZiIsInRvQ3JlYXRlIiwiaW5uZXJIVE1MIiwicHVzaCIsIm1hdGNoIiwic3BsaXQiLCJub2RlVHlwZSIsInVuaXF1ZSIsInVuaXF1ZUFycmF5IiwiZm4iLCJwcm90b3R5cGUiLCJDbGFzcyIsIk1ldGhvZHMiLCJhZGRDbGFzcyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJqIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJhdHRyIiwiYXR0cnMiLCJ2YWx1ZSIsImFyZ3VtZW50cyQxIiwiYXJndW1lbnRzIiwiZ2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwiZGF0YSIsImVsIiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsImRhdGFLZXkiLCJ0cmFuc2Zvcm0iLCJlbFN0eWxlIiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwid2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwib24iLCJhc3NpZ24iLCJhcmdzIiwibGVuIiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJlIiwiZXZlbnREYXRhIiwiZG9tN0V2ZW50RGF0YSIsInVuc2hpZnQiLCJpcyIsImFwcGx5IiwicGFyZW50cyIsImsiLCJoYW5kbGVFdmVudCIsInVuZGVmaW5lZCIsImV2ZW50cyIsImV2ZW50JDEiLCJkb203TGl2ZUxpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJldmVudCIsImRvbTdMaXN0ZW5lcnMiLCJvZmYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJkb203cHJveHkiLCJzcGxpY2UiLCJ0cmlnZ2VyIiwiZXZ0IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmaWx0ZXIiLCJkYXRhSW5kZXgiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZCIsImNhbGxiYWNrIiwiZG9tIiwiZmlyZUNhbGxCYWNrIiwiY2FsbCIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsInN0eWxlcyIsIm9mZnNldFdpZHRoIiwicGFyc2VGbG9hdCIsIm91dGVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInRvcCIsImxlZnQiLCJjc3MiLCJwcm9wcyIsInByb3AiLCJlYWNoIiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJpbmRleCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZXEiLCJyZXR1cm5JbmRleCIsImFwcGVuZCIsIm5ld0NoaWxkIiwidGVtcERpdiIsImZpcnN0Q2hpbGQiLCJhcHBlbmRDaGlsZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEFsbCIsIm5leHRFbHMiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwibWF0Y2hlZEl0ZW1zIiwicmVtb3ZlQ2hpbGQiLCJ0b0FkZCIsIm1ldGhvZE5hbWUiLCJVdGlscyIsImRlbGV0ZVByb3BzIiwib2JqZWN0IiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIm1hcCIsImEiLCJyZXBsYWNlIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidG9TdHJpbmciLCJtNDEiLCJtNDIiLCJwYXJzZVVybFF1ZXJ5IiwidXJsIiwicGFyYW1zIiwicGFyYW0iLCJxdWVyeSIsInVybFRvUGFyc2UiLCJwYXJhbXNQYXJ0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibyIsImxlbiQxIiwidG8iLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiU3VwcG9ydCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm9ic2VydmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZ2VzdHVyZXMiLCJTd2lwZXJDbGFzcyIsImV2ZW50c0xpc3RlbmVycyIsImV2ZW50TmFtZSIsInN0YXRpY0FjY2Vzc29ycyIsImNvbXBvbmVudHMiLCJjb25maWd1cmFibGUiLCJwcmlvcml0eSIsIm1ldGhvZCIsIm9uY2UiLCJvbmNlSGFuZGxlciIsImY3cHJveHkiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJldmVudHNBcnJheSIsInVzZU1vZHVsZXNQYXJhbXMiLCJpbnN0YW5jZVBhcmFtcyIsImluc3RhbmNlIiwibW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJ1c2VNb2R1bGVzIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtcyIsIm1vZHVsZVByb3BOYW1lIiwibW9kdWxlUHJvcCIsImJpbmQiLCJtb2R1bGVFdmVudE5hbWUiLCJjcmVhdGUiLCJzZXQiLCJ1c2UiLCJpbnN0YWxsTW9kdWxlIiwibmFtZSIsInByb3RvIiwic3RhdGljIiwiaW5zdGFsbCIsIm0iLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiJGVsIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwicGFyc2VJbnQiLCJzaXplIiwidXBkYXRlU2xpZGVzIiwiJHdyYXBwZXJFbCIsInN3aXBlclNpemUiLCJydGwiLCJydGxUcmFuc2xhdGUiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXMiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJzbGlkZXNGb3JNYXJnaW4iLCJzbGlkZUluZGV4IiwiY3NzTW9kZSIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwic2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJzbGlkZXNQZXJDb2x1bW4iLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJtYXgiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJzbGlkZSIsIm5ld1NsaWRlT3JkZXJJbmRleCIsImNvbHVtbiIsInJvdyIsInNsaWRlc1Blckdyb3VwIiwiZ3JvdXBJbmRleCIsInNsaWRlSW5kZXhJbkdyb3VwIiwiY29sdW1uc0luR3JvdXAiLCJtaW4iLCItd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwIiwiLW1vei1ib3gtb3JkaW5hbC1ncm91cCIsIi1tcy1mbGV4LW9yZGVyIiwiLXdlYmtpdC1vcmRlciIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJib3hTaXppbmckMSIsInN3aXBlclNsaWRlU2l6ZSIsImNlbnRlcmVkU2xpZGVzIiwiYWJzIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJpJDEiLCJzbGlkZXNHcmlkSXRlbSIsImkkMiIsInNsaWRlc0dyaWRJdGVtJDEiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiYWxsU2xpZGVzU2l6ZSQxIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4Iiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hTbGlkZXNWaXNpYmlsaXR5IiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwidXBkYXRlQXV0b0hlaWdodCIsInNwZWVkIiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsInZpc2libGVTbGlkZXMiLCJhY3RpdmVJbmRleCIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwidHJhbnNsYXRlIiwib2Zmc2V0Q2VudGVyIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlUHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJhdXRvSGVpZ2h0Iiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwicHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm11bHRpcGxpZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwiaXNFbmQiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwiYWN0aXZlU2xpZGUiLCJyZWFsSW5kZXgiLCJzbGlkZUFjdGl2ZUNsYXNzIiwibG9vcCIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwibmV4dFNsaWRlIiwic2xpZGVOZXh0Q2xhc3MiLCJwcmV2U2xpZGUiLCJzbGlkZVByZXZDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4Iiwic2tpcCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsIndyYXBwZXJFbCIsIngiLCJ5IiwicHJldmlvdXNUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInJ1bkNhbGxiYWNrcyIsInRyYW5zbGF0ZUJvdW5kcyIsImludGVybmFsIiwic3dpcGVyIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwibmV3VHJhbnNsYXRlIiwiaXNIIiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3llZCIsInRyYW5zaXRpb24kMSIsInRyYW5zaXRpb25TdGFydCIsImRpcmVjdGlvbiIsImRpciIsInNsaWRlVG8iLCJpbml0aWFsU2xpZGUiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2IiwidCIsInNjcm9sbFdpZHRoIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwibG9vcGVkU2xpZGVzIiwic2xpZGVOZXh0IiwiaW5jcmVtZW50IiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwicHJldkluZGV4Iiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInNsaWRlVG9JbmRleCIsImxvb3BDcmVhdGUiLCJsb29wRmlsbEdyb3VwV2l0aEJsYW5rIiwiYmxhbmtTbGlkZXNOdW0iLCJibGFua05vZGUiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJjbG9uZU5vZGUiLCJkaWZmIiwibG9vcERlc3Ryb3kiLCJncmFiQ3Vyc29yIiwic2V0R3JhYkN1cnNvciIsIm1vdmluZyIsInNpbXVsYXRlVG91Y2giLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsInBsYXRmb3JtIiwidWEiLCJkZXZpY2UiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsImFuZHJvaWQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsImllIiwiZWRnZSIsImZpcmVmb3giLCJ3aW5kb3dzIiwiZWxlY3Ryb24iLCJtYWNvcyIsIm1hbmlwdWxhdGlvbiIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlQWxsU2xpZGVzIiwiRGV2aWNlIiwiaW9zIiwiYW5kcm9pZENocm9tZSIsImRlc2t0b3AiLCJjb3Jkb3ZhIiwicGhvbmVnYXAiLCJ0b0xvd2VyQ2FzZSIsIm9zIiwib3NWZXJzaW9uIiwid2ViVmlldyIsInN0YW5kYWxvbmUiLCJ3ZWJ2aWV3IiwicGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJvblRvdWNoU3RhcnQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJ0b3VjaGVzIiwib3JpZ2luYWxFdmVudCIsIiR0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiaXNUb3VjaEV2ZW50IiwidHlwZSIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsIm5vU3dpcGluZyIsIm5vU3dpcGluZ1NlbGVjdG9yIiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwidGFyZ2V0VG91Y2hlcyIsInBhZ2VYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WCIsInN0YXJ0WSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsInByZXZlbnREZWZhdWx0IiwiZm9ybUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0Iiwib25Ub3VjaE1vdmUiLCJ0YXJnZXRUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJwb3ciLCJ0b3VjaEFuZ2xlIiwiYXRhbjIiLCJQSSIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsIm5lc3RlZCIsInN0b3BQcm9wYWdhdGlvbiIsInN0YXJ0VHJhbnNsYXRlIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsInRvdWNoUmF0aW8iLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwicmVzaXN0YW5jZSIsImZvbGxvd0ZpbmdlciIsImZyZWVNb2RlIiwidmVsb2NpdGllcyIsInBvc2l0aW9uIiwidGltZSIsIm9uVG91Y2hFbmQiLCJjdXJyZW50UG9zIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJsYXN0Q2xpY2tUaW1lIiwiZnJlZU1vZGVNb21lbnR1bSIsImxhc3RNb3ZlRXZlbnQiLCJwb3AiLCJ2ZWxvY2l0eUV2ZW50IiwiZGlzdGFuY2UiLCJ2ZWxvY2l0eSIsImZyZWVNb2RlTWluaW11bVZlbG9jaXR5IiwiZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJtb21lbnR1bUR1cmF0aW9uIiwiZnJlZU1vZGVNb21lbnR1bVJhdGlvIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsIm5lZWRzTG9vcEZpeCIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZSIsImZyZWVNb2RlU3RpY2t5IiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsImxvbmdTd2lwZXNNcyIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsImluY3JlbWVudCQxIiwicmF0aW8iLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwic2hvcnRTd2lwZXMiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwib25SZXNpemUiLCJicmVha3BvaW50cyIsInNldEJyZWFrcG9pbnQiLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJydW4iLCJvbkNsaWNrIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uU2Nyb2xsIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGVmYXVsdHMiLCJpbml0IiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJ1bmlxdWVOYXZFbGVtZW50cyIsInByZWxvYWRJbWFnZXMiLCJ1cGRhdGVPbkltYWdlc1JlYWR5Iiwibm9Td2lwaW5nQ2xhc3MiLCJwYXNzaXZlTGlzdGVuZXJzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsInNsaWRlQ2xhc3MiLCJzbGlkZUJsYW5rQ2xhc3MiLCJ3cmFwcGVyQ2xhc3MiLCJwcm90b3R5cGVzIiwiYXR0YWNoRXZlbnRzIiwidG91Y2hFdmVudHMiLCJzdGFydCIsIm1vdmUiLCJlbmQiLCJwYXNzaXZlIiwiY2FuY2VsIiwiZGV0YWNoRXZlbnRzIiwiYnJlYWtwb2ludCIsImdldEJyZWFrcG9pbnQiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRPbmx5UGFyYW1zIiwicGFyYW1WYWx1ZSIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJpbm5lckhlaWdodCIsInNvcnQiLCJiIiwicmVmIiwiaW5uZXJXaWR0aCIsIndhc0xvY2tlZCIsImxhc3RTbGlkZVBvc2l0aW9uIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsInN1ZmZpeCIsInJlbW92ZUNsYXNzZXMiLCJpbWFnZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW1hZ2VzTG9hZGVkIiwiaW1hZ2VzVG9Mb2FkIiwiY3VycmVudFNyYyIsImV4dGVuZGVkRGVmYXVsdHMiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwibW9kdWxlUGFyYW1OYW1lIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwic3dpcGVycyIsImNvbnRhaW5lckVsIiwibmV3UGFyYW1zIiwic2hhZG93Um9vdCIsIm9wdGlvbnMiLCJ0b3VjaEV2ZW50c1RvdWNoIiwidG91Y2hFdmVudHNEZXNrdG9wIiwiY2xpY2tUaW1lb3V0IiwiX19wcm90b19fIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsInNsaWRlRWwiLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJEZXZpY2UkMSIsIlN1cHBvcnQkMSIsInN1cHBvcnQiLCJCcm93c2VyIiwiaXNFZGdlIiwiaXNTYWZhcmkiLCJpc1dlYlZpZXciLCJ0ZXN0IiwiQnJvd3NlciQxIiwiYnJvd3NlciIsIlJlc2l6ZSIsInJlc2l6ZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJPYnNlcnZlciIsImZ1bmMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsImF0dGFjaCIsIk9ic2VydmVyRnVuYyIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZVBhcmVudHMiLCJjb250YWluZXJQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJkaXNjb25uZWN0IiwiT2JzZXJ2ZXIkMSIsIlZpcnR1YWwiLCJmb3JjZSIsInJlZiQxIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJyZWYkMiIsInByZXZpb3VzRnJvbSIsImZyb20iLCJwcmV2aW91c1RvIiwicHJldmlvdXNTbGlkZXNHcmlkIiwicmVuZGVyU2xpZGUiLCJwcmV2aW91c09mZnNldCIsIm9mZnNldFByb3AiLCJzbGlkZXNBZnRlciIsInNsaWRlc0JlZm9yZSIsIm9uUmVuZGVyZWQiLCJsYXp5IiwibG9hZCIsInJlbmRlckV4dGVybmFsIiwic2xpZGVzVG9SZW5kZXIiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJjYWNoZSIsIiRzbGlkZUVsIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiJGNhY2hlZEVsIiwiY2FjaGVkRWxJbmRleCIsIlZpcnR1YWwkMSIsImJlZm9yZUluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJLZXlib2FyZCIsImhhbmRsZSIsImtjIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGFnZVVwRG93biIsImtleWJvYXJkIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJvbmx5SW5WaWV3cG9ydCIsImluVmlldyIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0Iiwic3dpcGVyT2Zmc2V0Iiwic3dpcGVyQ29vcmQiLCJyZXR1cm5WYWx1ZSIsImVuYWJsZSIsImRpc2FibGUiLCJLZXlib2FyZCQxIiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwibGFzdEV2ZW50QmVmb3JlU25hcCIsInJlY2VudFdoZWVsRXZlbnRzIiwiaXNTdXBwb3J0ZWQiLCJlbGVtZW50IiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiaXNFdmVudFN1cHBvcnRlZCIsInNYIiwic1kiLCJwWCIsInBZIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2VFbnRlciIsIm1vdXNlRW50ZXJlZCIsImhhbmRsZU1vdXNlTGVhdmUiLCJtb3VzZXdoZWVsIiwiZXZlbnRzVGFyZ2VkIiwicmVsZWFzZU9uRWRnZXMiLCJkZWx0YSIsInJ0bEZhY3RvciIsImZvcmNlVG9BeGlzIiwiaW52ZXJ0IiwibmV3RXZlbnQkMSIsInNpZ24iLCJpZ25vcmVXaGVlbEV2ZW50cyIsInNlbnNpdGl2aXR5IiwidGltZW91dCIsInJlY2VudFdoZWVsRXZlbnRzJDEiLCJzaGlmdCIsInByZXZFdmVudCQxIiwiZmlyc3RFdmVudCIsInNuYXBUb1RocmVzaG9sZCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwibmV3RXZlbnQiLCJyYXciLCJwcmV2RXZlbnQiLCJhbmltYXRlU2xpZGVyIiwicmVsZWFzZVNjcm9sbCIsImdldFRpbWUiLCJOYXZpZ2F0aW9uIiwiJG5leHRFbCIsIiRwcmV2RWwiLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIlBhZ2luYXRpb24iLCJwYWdpbmF0aW9uIiwiY3VycmVudCIsInRvdGFsIiwicGFnaW5hdGlvblR5cGUiLCJidWxsZXRzIiwiZmlyc3RJbmRleCIsImxhc3RJbmRleCIsIm1pZEluZGV4IiwiZHluYW1pY0J1bGxldHMiLCJidWxsZXRTaXplIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCIkZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCIkbGFzdERpc3BsYXllZEJ1bGxldCIsImR5bmFtaWNCdWxsZXRzTGVuZ3RoIiwiYnVsbGV0c09mZnNldCIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInJlbmRlckN1c3RvbSIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0Q2xhc3MiLCJyZW5kZXJGcmFjdGlvbiIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJyZW5kZXJQcm9ncmVzc2JhciIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwiY2xpY2thYmxlIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiaGlkZGVuQ2xhc3MiLCJTY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsIiRkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsIm9wYWNpdHkiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJkaXNwbGF5IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXREcmFnUG9zaXRpb24iLCJwb3NpdGlvblJhdGlvIiwiZHJhZ1N0YXJ0UG9zIiwib25EcmFnU3RhcnQiLCJkcmFnVGltZW91dCIsIm9uRHJhZ01vdmUiLCJvbkRyYWdFbmQiLCJzbmFwT25SZWxlYXNlIiwiZW5hYmxlRHJhZ2dhYmxlIiwiYWN0aXZlTGlzdGVuZXIiLCJkaXNhYmxlRHJhZ2dhYmxlIiwiJHN3aXBlckVsIiwiZHJhZ0VsIiwiZHJhZ2dhYmxlIiwiUGFyYWxsYXgiLCJzZXRUcmFuc2Zvcm0iLCJwIiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50U2NhbGUiLCJwYXJhbGxheCIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJab29tIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwib25HZXN0dXJlU3RhcnQiLCJ6b29tIiwiZ2VzdHVyZSIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJzY2FsZVN0YXJ0IiwiJGltYWdlRWwiLCIkaW1hZ2VXcmFwRWwiLCJtYXhSYXRpbyIsImlzU2NhbGluZyIsIm9uR2VzdHVyZUNoYW5nZSIsInNjYWxlTW92ZSIsIm9uR2VzdHVyZUVuZCIsInRvdWNoZXNTdGFydCIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0IiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsInRvdWNoZXNDdXJyZW50IiwicHJldlBvc2l0aW9uWCIsInByZXZQb3NpdGlvblkiLCJwcmV2VGltZSIsIm1vbWVudHVtRHVyYXRpb25YIiwibW9tZW50dW1EdXJhdGlvblkiLCJtb21lbnR1bURpc3RhbmNlWCIsIm5ld1Bvc2l0aW9uWCIsIm1vbWVudHVtRGlzdGFuY2VZIiwibmV3UG9zaXRpb25ZIiwib25UcmFuc2l0aW9uRW5kIiwib3V0IiwiaW4iLCJ0b3VjaFgiLCJ0b3VjaFkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlIiwic2xpZGVTZWxlY3RvciIsIkxhenkiLCJsb2FkSW5TbGlkZSIsImxvYWRJbkR1cGxpY2F0ZSIsIiRpbWFnZXMiLCJlbGVtZW50Q2xhc3MiLCJsb2FkZWRDbGFzcyIsImxvYWRpbmdDbGFzcyIsImltYWdlSW5kZXgiLCJiYWNrZ3JvdW5kIiwiJHBpY3R1cmVFbCIsInNvdXJjZUluZGV4Iiwic291cmNlRWwiLCIkc291cmNlIiwic2xpZGVPcmlnaW5hbEluZGV4Iiwib3JpZ2luYWxTbGlkZSIsImR1cGxpY2F0ZWRTbGlkZSIsInNsaWRlRXhpc3QiLCJpbml0aWFsSW1hZ2VMb2FkZWQiLCJlbEluZGV4IiwibG9hZFByZXZOZXh0IiwibG9hZFByZXZOZXh0QW1vdW50IiwiYW1vdW50IiwibWF4SW5kZXgiLCJtaW5JbmRleCIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJndWVzcyIsImkxIiwiaTMiLCJiaW5hcnlTZWFyY2giLCJhcnJheSIsImludGVycG9sYXRlIiwiZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbiIsImMiLCJjb250cm9sbGVyIiwic3BsaW5lIiwic2V0VHJhbnNsYXRlJDEiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwiY29udHJvbGxlZCIsImNvbnRyb2wiLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiYnkiLCJpbnZlcnNlIiwic2V0Q29udHJvbGxlZFRyYW5zaXRpb24iLCJhMTF5IiwibWFrZUVsRm9jdXNhYmxlIiwibWFrZUVsTm90Rm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsTGFiZWwiLCJsYWJlbCIsImRpc2FibGVFbCIsImVuYWJsZUVsIiwib25FbnRlcktleSIsIm5vdGlmeSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJwcmV2U2xpZGVNZXNzYWdlIiwiY2xpY2siLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwiYnVsbGV0RWwiLCIkYnVsbGV0RWwiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsIkhpc3RvcnkiLCJoYXNoTmF2aWdhdGlvbiIsInBhdGhzIiwiZ2V0UGF0aFZhbHVlcyIsInNjcm9sbFRvU2xpZGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJwYXRoQXJyYXkiLCJwYXJ0Iiwic2V0SGlzdG9yeSIsInNsdWdpZnkiLCJpbmNsdWRlcyIsImN1cnJlbnRTdGF0ZSIsInN0YXRlIiwiSGFzaE5hdmlnYXRpb24iLCJvbkhhc2hDYW5nZSIsIm5ld0hhc2giLCJzZXRIYXNoIiwid2F0Y2hTdGF0ZSIsIkF1dG9wbGF5IiwiJGFjdGl2ZVNsaWRlRWwiLCJyZXZlcnNlRGlyZWN0aW9uIiwic3RvcE9uTGFzdFNsaWRlIiwicGF1c2UiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIkZhZGUiLCJ0eCIsInR5Iiwic2xpZGVPcGFjaXR5IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJpZ2dlckV2ZW50cyIsIkN1YmUiLCIkY3ViZVNoYWRvd0VsIiwic3dpcGVyV2lkdGgiLCJzd2lwZXJIZWlnaHQiLCJjdWJlRWZmZWN0Iiwid3JhcHBlclJvdGF0ZSIsInNoYWRvdyIsInNsaWRlQW5nbGUiLCJyb3VuZCIsInR6Iiwic2xpZGVTaGFkb3dzIiwic2hhZG93QmVmb3JlIiwic2hhZG93QWZ0ZXIiLCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4iLCItbW96LXRyYW5zZm9ybS1vcmlnaW4iLCItbXMtdHJhbnNmb3JtLW9yaWdpbiIsInRyYW5zZm9ybS1vcmlnaW4iLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dBbmdsZSIsInNpbiIsImNvcyIsInNjYWxlMSIsInNoYWRvd1NjYWxlIiwic2NhbGUyIiwiekZhY3RvciIsIkZsaXAiLCJmbGlwRWZmZWN0IiwibGltaXRSb3RhdGlvbiIsInJvdGF0ZVkiLCJyb3RhdGVYIiwiekluZGV4IiwiQ292ZXJmbG93IiwiY292ZXJmbG93RWZmZWN0IiwiY2VudGVyIiwicm90YXRlIiwiZGVwdGgiLCJvZmZzZXRNdWx0aXBsaWVyIiwibW9kaWZpZXIiLCJ0cmFuc2xhdGVaIiwic3RyZXRjaCIsInNsaWRlVHJhbnNmb3JtIiwiJHNoYWRvd0JlZm9yZUVsIiwiJHNoYWRvd0FmdGVyRWwiLCJwcmVmaXhlZFBvaW50ZXJFdmVudHMiLCJwZXJzcGVjdGl2ZU9yaWdpbiIsIlRodW1icyIsInRodW1ic1BhcmFtcyIsInRodW1icyIsInN3aXBlckNyZWF0ZWQiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsInNsaWRlVGh1bWJBY3RpdmVDbGFzcyIsImN1cnJlbnRJbmRleCIsImluaXRpYWwiLCJhdXRvU2Nyb2xsT2Zmc2V0IiwidXNlT2Zmc2V0IiwibmV3VGh1bWJzSW5kZXgiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJwcmV2VGh1bWJzSW5kZXgiLCJuZXh0VGh1bWJzSW5kZXgiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsIm11bHRpcGxlQWN0aXZlVGh1bWJzIiwiaGlkZU9uQ2xpY2siLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsImlzSGlkZGVuIiwiYnVsbGV0RWxlbWVudCIsIm51bWJlciIsImFjdGl2ZUluZGV4Q2hhbmdlIiwic25hcEluZGV4Q2hhbmdlIiwic2xpZGVzTGVuZ3RoQ2hhbmdlIiwic25hcEdyaWRMZW5ndGhDaGFuZ2UiLCJkcmFnQ2xhc3MiLCJjb250YWluZXJDbGFzcyIsInpvb21lZFNsaWRlQ2xhc3MiLCJ0b3VjaFN0YXJ0IiwidG91Y2hFbmQiLCJkb3VibGVUYXAiLCJzbGlkZUNoYW5nZSIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInByZWxvYWRlckNsYXNzIiwic2Nyb2xsIiwic2Nyb2xsYmFyRHJhZ01vdmUiLCJub3RpZmljYXRpb25DbGFzcyIsInBhZ2luYXRpb25VcGRhdGUiLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImJlZm9yZVRyYW5zaXRpb25TdGFydCIsInNsaWRlckZpcnN0TW92ZSIsImJlZm9yZURlc3Ryb3kiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsInR5cGVzVG9QYXRjaCIsInJvb3QiLCJzZXRUaW1lb3V0RnVuYyIsIm5vb3AiLCJQcm9taXNlIiwiVHlwZUVycm9yIiwiX3N0YXRlIiwiX2hhbmRsZWQiLCJfdmFsdWUiLCJfZGVmZXJyZWRzIiwiZG9SZXNvbHZlIiwiZGVmZXJyZWQiLCJfaW1tZWRpYXRlRm4iLCJjYiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInJldCIsInJlamVjdCIsInByb21pc2UiLCJyZXNvbHZlIiwibmV3VmFsdWUiLCJ0aGVuIiwiZmluYWxlIiwidGhpc0FyZyIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsIkhhbmRsZXIiLCJkb25lIiwicmVhc29uIiwiZXgiLCJwcm9tIiwiYWxsIiwicmVtYWluaW5nIiwicmVzIiwicmFjZSIsInZhbHVlcyIsInNldEltbWVkaWF0ZSIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwiX3NldEltbWVkaWF0ZUZuIiwiX3NldFVuaGFuZGxlZFJlamVjdGlvbkZuIiwiZm9ybWF0UGFyYW1zIiwibGV0dGVyIiwiYWpheCIsImRlYnVnIiwiZXJyb3IiLCJhc3luYyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwic2VuZCIsIkp1c3RWYWxpZGF0ZSIsInJ1bGVzIiwibWVzc2FnZXMiLCJjb2xvcldyb25nIiwicmVzdWx0IiwiZWxlbWVudHMiLCJ0b29sdGlwIiwidG9vbHRpcEZhZGVPdXRUaW1lIiwiZmFkZU91dFRpbWUiLCJ0b29sdGlwRmFkZU91dENsYXNzIiwiZmFkZU91dENsYXNzIiwidG9vbHRpcFNlbGVjdG9yV3JhcCIsInNlbGVjdG9yV3JhcCIsImJpbmRIYW5kbGVyS2V5dXAiLCJoYW5kbGVyS2V5dXAiLCJzdWJtaXRIYW5kbGVyIiwiaW52YWxpZEZvcm1DYWxsYmFjayIsInByb21pc2VzUmVtb3RlIiwiaXNWYWxpZGF0aW9uU3VjY2VzcyIsImZvY3VzV3JvbmdGaWVsZCIsIlJFR0VYUCIsImVtYWlsIiwiemlwIiwicGhvbmUiLCJwYXNzd29yZCIsInN0cmVuZ3RoUGFzcyIsIkRFRkFVTFRfUkVNT1RFX0VSUk9SIiwidG9vbHRpcHNUaW1lciIsInNldEZvcm0iLCJkZWZhdWx0UnVsZXMiLCJyZXF1aXJlZCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImRlZmF1bHRNZXNzYWdlcyIsInJlbW90ZSIsInN0cmVuZ3RoIiwiZnVuY3Rpb24iLCJldiIsImVsZW0iLCJpdGVtIiwidmFsaWRhdGVJdGVtIiwiZ3JvdXAiLCJpc0tleXVwQ2hhbmdlIiwicmVuZGVyRXJyb3JzIiwic2V0dGVyRXZlbnRMaXN0ZW5lciIsImdldEVsZW1lbnRzUmVhbFZhbHVlIiwiJGVsZW1zIiwiJGZvcm0iLCJjaGVja2VkIiwidmFsaWRhdGlvbkZhaWxlZCIsIiRmaXJzdEVycm9yRmllbGQiLCJmb2N1cyIsInZhbGlkYXRpb25TdWNjZXNzIiwicmVhbFZhbHVlcyIsInN1Ym1pdCIsImZvcm0iLCJfdGhpcyIsImdldEVsZW1lbnRzIiwiaXNFbWFpbCIsImlzWmlwIiwiaXNQaG9uZSIsImlzUGFzc3dvcmQiLCJpc0VtcHR5IiwibmV3VmFsIiwiY2hlY2tMZW5ndGhNYXgiLCJjaGVja0xlbmd0aE1pbiIsImNoZWNrU3RyZW5ndGhQYXNzIiwiX3RoaXMyIiwiZWxlbXMiLCJfbG9vcCIsImlzRWxlbUluR3JvdXAiLCJmaW5kRWxlbSIsInZhbGlkYXRlRWxlbWVudHMiLCJ2YWxpZGF0ZVJlcXVpcmVkIiwidmFsaWRhdGVFbWFpbCIsInZhbGlkYXRlUGhvbmUiLCJ2YWxpZGF0ZU1pbkxlbmd0aCIsInZhbGlkYXRlTWF4TGVuZ3RoIiwidmFsaWRhdGVTdHJlbmd0aFBhc3MiLCJ2YWxpZGF0ZVBhc3N3b3JkIiwidmFsaWRhdGVaaXAiLCJ2YWxpZGF0ZVJlbW90ZSIsIl9yZWYiLCJzdWNjZXNzQW5zd2VyIiwic2VuZFBhcmFtIiwiZ2VuZXJhdGVNZXNzYWdlIiwicnVsZSIsImN1c3RvbU1lc3NhZ2UiLCJfdGhpczMiLCJsb2NrRm9ybSIsInJlc3AiLCJhbGVydCIsIl9yZWYyIiwiX3RoaXM0IiwicnVsZVZhbHVlIiwiaXNTdWNjZXNzVmFsaWRhdGVHcm91cCIsImRlZmF1bHQiLCJjdXN0b20iLCJyZWdleHAiLCJSZWdFeHAiLCIkZWxlbSIsImNsZWFyRXJyb3JzIiwiX2kiLCJfbGVuIiwiYm9yZGVyIiwiY29sb3IiLCJfdGhpczUiLCJ1bmxvY2tGb3JtIiwiX2l0ZW0iLCJkaXYiLCIkbGFiZWwiLCJ0YWdOYW1lIiwibmV4dFNpYmxpbmciLCJoaWRlVG9vbHRpcHMiLCJfdGhpczYiLCJ3ZWJpdEZpbHRlciIsImdsb2JhbFRoaXMiLCJJTWFzayIsImNvbW1vbmpzR2xvYmFsIiwiY2hlY2siLCJpdCIsImdsb2JhbCRjIiwiRnVuY3Rpb24iLCJvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmYWlscyQ2IiwiZXhlYyIsImRlc2NyaXB0b3JzIiwib2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciQxIiwiTkFTSE9STl9CVUciLCIxIiwiZiIsIlYiLCJkZXNjcmlwdG9yIiwidmVyc2lvbiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQyIiwiYml0bWFwIiwidG9TdHJpbmckMyIsImNsYXNzb2YiLCJpbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQ0IiwiSW5kZXhlZE9iamVjdCQxIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQzIiwidG9JbmRleGVkT2JqZWN0JDMiLCJpc09iamVjdCQ1IiwiZ2xvYmFsJGIiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsImdldEJ1aWx0SW4kMyIsIm5hbWVzcGFjZSIsImVuZ2luZVVzZXJBZ2VudCIsImdsb2JhbCRhIiwidXNlckFnZW50JDEiLCJwcm9jZXNzIiwiRGVubyIsInZlcnNpb25zIiwidjgiLCJWOF9WRVJTSU9OIiwiZmFpbHMkMyIsIm5hdGl2ZVN5bWJvbCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsIlN0cmluZyIsInNoYW0iLCJ1c2VTeW1ib2xBc1VpZCIsImdldEJ1aWx0SW4kMSIsImlzU3ltYm9sJDMiLCIkU3ltYm9sIiwiaXNPYmplY3QkNCIsInNoYXJlZCQzIiwiZ2xvYmFsJDkiLCJzZXRHbG9iYWwkMyIsInNldEdsb2JhbCQyIiwic2hhcmVkU3RvcmUiLCJzdG9yZSQyIiwibW9kZSIsImNvcHlyaWdodCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUkMiIsInRvT2JqZWN0JDIiLCJhcmd1bWVudCIsInRvT2JqZWN0JDEiLCJoYXNPd25Qcm9wZXJ0eSIsImhhcyQ2IiwiaGFzT3duIiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwidWlkJDIiLCJnbG9iYWwkNyIsInNoYXJlZCQyIiwiaGFzJDUiLCJ1aWQkMSIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsIlN5bWJvbCQxIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImlzT2JqZWN0JDMiLCJpc1N5bWJvbCQyIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImlucHV0IiwicHJlZiIsInZhbHVlT2YiLCJUT19QUklNSVRJVkUiLCJ3ZWxsS25vd25TeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImV4b3RpY1RvUHJpbSIsImlzU3ltYm9sJDEiLCJ0b1Byb3BlcnR5S2V5JDIiLCJpc09iamVjdCQyIiwiZG9jdW1lbnQkMSIsIkVYSVNUUyIsImllOERvbURlZmluZSIsIkRFU0NSSVBUT1JTJDMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSQxIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDEiLCJ0b0luZGV4ZWRPYmplY3QkMiIsInRvUHJvcGVydHlLZXkkMSIsImhhcyQ0IiwiSUU4X0RPTV9ERUZJTkUkMSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwiUCIsIm9iamVjdERlZmluZVByb3BlcnR5IiwiaXNPYmplY3QkMSIsImFuT2JqZWN0JDIiLCJERVNDUklQVE9SUyQyIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCQxIiwidG9Qcm9wZXJ0eUtleSIsIiRkZWZpbmVQcm9wZXJ0eSIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSQxIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDMiLCJyZWRlZmluZSQxIiwic3RvcmUkMSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwic2V0JDEiLCJoYXMkMyIsImluc3BlY3RTb3VyY2UkMiIsImluc3BlY3RTb3VyY2UkMSIsIldlYWtNYXAkMSIsIldlYWtNYXAiLCJuYXRpdmVXZWFrTWFwIiwic2hhcmVkJDEiLCJ1aWQiLCJoaWRkZW5LZXlzJDMiLCJOQVRJVkVfV0VBS19NQVAiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMiIsIm9iamVjdEhhcyIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMkMiIsInN0b3JlIiwid21nZXQiLCJ3bWhhcyIsImhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsImdsb2JhbCQzIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDEiLCJoYXMkMiIsInNldEdsb2JhbCQxIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJzaW1wbGUiLCJub1RhcmdldEdldCIsInNvdXJjZSIsIm9iamVjdEdldE93blByb3BlcnR5TmFtZXMiLCJjZWlsJDEiLCJ0b0ludGVnZXIkMyIsImlzTmFOIiwidG9JbnRlZ2VyJDIiLCJtaW4kMSIsInRvTGVuZ3RoJDIiLCJ0b0ludGVnZXIkMSIsInRvSW5kZXhlZE9iamVjdCQxIiwidG9MZW5ndGgkMSIsInRvQWJzb2x1dGVJbmRleCIsImludGVnZXIiLCJjcmVhdGVNZXRob2QkMSIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiaGFzJDEiLCJ0b0luZGV4ZWRPYmplY3QiLCJoaWRkZW5LZXlzJDEiLCJvYmplY3RLZXlzSW50ZXJuYWwiLCJuYW1lcyIsImVudW1CdWdLZXlzJDIiLCJpbnRlcm5hbE9iamVjdEtleXMkMSIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQxIiwiYW5PYmplY3QiLCJvd25LZXlzJDEiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJmYWlscyQxIiwicmVwbGFjZW1lbnQiLCJpc0ZvcmNlZCQxIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwiaXNGb3JjZWRfMSIsImdsb2JhbCQyIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJfZXhwb3J0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJmb3JjZWQiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJlbnVtQnVnS2V5cyIsIm9iamVjdEtleXMkMSIsIkRFU0NSSVBUT1JTIiwiZmFpbHMiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b09iamVjdCIsIkluZGV4ZWRPYmplY3QiLCIkYXNzaWduIiwiQSIsIkIiLCJjaHIiLCJUIiwiYXJndW1lbnRzTGVuZ3RoIiwiUyIsImlzU3ltYm9sIiwidG9TdHJpbmckMiIsInRvSW50ZWdlciIsInRvU3RyaW5nJDEiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDEiLCJzdHJpbmdSZXBlYXQiLCJjb3VudCIsInN0ciIsIm4iLCJJbmZpbml0eSIsIlJhbmdlRXJyb3IiLCJyZXBlYXQiLCJ0b0xlbmd0aCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjcmVhdGVNZXRob2QiLCJJU19FTkQiLCJmaWxsU3RyaW5nIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJzdHJpbmdQYWQiLCJzdHJpbmdQYWRXZWJraXRCdWciLCIkcGFkU3RhcnQiLCJwYWRTdGFydCIsIiRwYWRFbmQiLCJfY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUHJveHkiLCJCb29sZWFuIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiX3N1cGVyUHJvcEJhc2UiLCJwcm9wZXJ0eSIsIl9nZXQiLCJyZWNlaXZlciIsImJhc2UiLCJfc2V0IiwiaXNTdHJpY3QiLCJFcnJvciIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiYXJyMiIsImlzU3RyaW5nIiwicGFkRW5kIiwiRElSRUNUSU9OIiwiZm9yY2VEaXJlY3Rpb24iLCJlc2NhcGVSZWdFeHAiLCJBY3Rpb25EZXRhaWxzIiwiY3Vyc29yUG9zIiwib2xkVmFsdWUiLCJvbGRTZWxlY3Rpb24iLCJzdGFydENoYW5nZVBvcyIsImluc2VydGVkQ291bnQiLCJyZW1vdmVkQ291bnQiLCJzdWJzdHJpbmciLCJDaGFuZ2VEZXRhaWxzIiwiZGV0YWlscyIsImluc2VydGVkIiwicmF3SW5zZXJ0ZWQiLCJ0YWlsU2hpZnQiLCJDb250aW51b3VzVGFpbERldGFpbHMiLCJ0YWlsIiwibWFza2VkIiwiYWdncmVnYXRlIiwiX2FwcGVuZFBsYWNlaG9sZGVyIiwicG9zIiwic2hpZnRDaGFyIiwiSW5wdXRNYXNrIiwiTWFza2VkIiwiX3VwZGF0ZSIsIkRFRkFVTFRTIiwiaXNJbml0aWFsaXplZCIsIndpdGhWYWx1ZVJlZnJlc2giLCJyZXNldCIsImRvQ29tbWl0IiwiZG9QYXJzZSIsImRvRm9ybWF0IiwiZXh0cmFjdElucHV0IiwiZnJvbVBvcyIsInRvUG9zIiwiYXBwZW5kVG8iLCJjaCIsImZsYWdzIiwiY2hlY2tUYWlsIiwiY29uc2lzdGVudFN0YXRlIiwiX2FwcGVuZENoYXJSYXciLCJkb1ByZXBhcmUiLCJjb25zaXN0ZW50VGFpbCIsImFwcGVuZGVkIiwiZG9WYWxpZGF0ZSIsImJlZm9yZVRhaWxTdGF0ZSIsIm92ZXJ3cml0ZSIsInNoaWZ0QmVmb3JlIiwidGFpbERldGFpbHMiLCJhcHBlbmRUYWlsIiwiX2JlZm9yZVRhaWxTdGF0ZSIsImNpIiwiX2FwcGVuZENoYXIiLCJfcmVmcmVzaGluZyIsInJhd0lucHV0IiwicmF3SW5wdXRWYWx1ZSIsIl9pc29sYXRlZCIsInByZXBhcmUiLCJ2YWxpZGF0ZSIsImNvbW1pdCIsImZvcm1hdCIsInBhcnNlIiwiZGVsZXRlQ291bnQiLCJyZW1vdmVEaXJlY3Rpb24iLCJ0YWlsUG9zIiwiZXh0cmFjdFRhaWwiLCJuZWFyZXN0SW5wdXRQb3MiLCJtYXNrZWRDbGFzcyIsIm1hc2siLCJNYXNrZWRSZWdFeHAiLCJNYXNrZWRQYXR0ZXJuIiwiTWFza2VkRGF0ZSIsIk51bWJlciIsIk1hc2tlZE51bWJlciIsIk1hc2tlZER5bmFtaWMiLCJNYXNrZWRGdW5jdGlvbiIsImNyZWF0ZU1hc2siLCJNYXNrZWRDbGFzcyIsInYiLCJfZXhjbHVkZWQkNCIsIkRFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMiLCIwIiwiKiIsIlBhdHRlcm5JbnB1dERlZmluaXRpb24iLCJibG9ja09wdHMiLCJfaXNGaWxsZWQiLCJpc09wdGlvbmFsIiwicGxhY2Vob2xkZXJDaGFyIiwidW5tYXNrZWRWYWx1ZSIsIl90aGlzJG1hc2tlZCIsIl90aGlzJG1hc2tlZDIiLCJfdGhpcyRtYXNrZWQzIiwibWluUG9zIiwibWF4UG9zIiwiYm91bmRQb3MiLCJpc0NvbXBsZXRlIiwiX3RoaXMkbWFza2VkNCIsIl90aGlzJHBhcmVudCIsIlBhdHRlcm5GaXhlZERlZmluaXRpb24iLCJpc1VubWFza2luZyIsIl9pc1Jhd0lucHV0IiwiY2hhciIsImlzUmVzb2x2ZWQiLCJfZXhjbHVkZWQkMyIsIkNodW5rc1RhaWxEZXRhaWxzIiwiY2h1bmtzIiwidGFpbENodW5rIiwibGFzdENodW5rIiwiZXh0ZW5kTGFzdCIsImZpcnN0VGFpbENodW5rIiwiYmxvY2tJbmRleCIsImNodW5rIiwibGFzdEJsb2NrSXRlciIsIl9tYXBQb3NUb0Jsb2NrIiwiY2h1bmtCbG9jayIsIl9zdG9wcyIsIl9ibG9ja3MiLCJyZW1haW5DaGFycyIsImNzdGF0ZSIsImNodW5rU2hpZnRQb3MiLCJfTWFza2VkIiwiX3N1cGVyIiwiX2V4Y2x1ZGVkJDIiLCJkZWZpbml0aW9ucyIsIl9yZWJ1aWxkTWFzayIsImRlZnMiLCJfbWFza2VkQmxvY2tzIiwicGF0dGVybiIsInVubWFza2luZ0Jsb2NrIiwib3B0aW9uYWxCbG9jayIsImJsb2NrcyIsImJOYW1lcyIsImJOYW1lIiwibWFza2VkQmxvY2siLCJfaXNJbnB1dCIsIlNUT1BfQ0hBUiIsIkVTQ0FQRV9DSEFSIiwiZGVmIiwibWFza2VkU3RhdGUiLCJiaSIsImV2ZXJ5IiwicmVkdWNlIiwiYmxvY2tJdGVyIiwiX2Jsb2NrIiwiYmxvY2tEZXRhaWxzIiwiY2h1bmtUYWlsIiwiX2ZvckVhY2hCbG9ja3NJblJhbmdlIiwiYkZyb21Qb3MiLCJiVG9Qb3MiLCJibG9ja0NodW5rIiwiX2ZpbmRTdG9wQmVmb3JlIiwiX2Jsb2NrU3RhcnRQb3MiLCJfIiwic3RvcEJlZm9yZSIsInNpIiwidG9CbG9ja0luZGV4Iiwic3RhcnRCbG9ja0l0ZXIiLCJzdGFydEJsb2NrSW5kZXgiLCJlbmRCbG9ja0luZGV4IiwiYkRldGFpbHMiLCJhY2NWYWwiLCJfYmxvY2syIiwiYmxvY2tTdGFydFBvcyIsImZyb21CbG9ja0l0ZXIiLCJ0b0Jsb2NrSXRlciIsImlzU2FtZUJsb2NrIiwiZnJvbUJsb2NrU3RhcnRQb3MiLCJmcm9tQmxvY2tFbmRQb3MiLCJyZW1vdmVEZXRhaWxzIiwiYmVnaW5CbG9ja0RhdGEiLCJiZWdpbkJsb2NrT2Zmc2V0IiwiYmVnaW5CbG9ja0luZGV4IiwiYmVnaW5CbG9jayIsImJlZ2luQmxvY2tDdXJzb3JQb3MiLCJjdXJzb3JBdFJpZ2h0IiwiY3Vyc29yQXRMZWZ0Iiwic2VhcmNoQmxvY2tJbmRleCIsImJsb2NrSW5kZXhBdExlZnQiLCJibG9ja0F0TGVmdCIsImJsb2NrSW5wdXRQb3MiLCJmaXJzdElucHV0QXRSaWdodCIsImJsb2NrQXRSaWdodCIsIl9ibG9ja0lucHV0UG9zIiwiX2JpIiwiX2Jsb2NrMyIsIl9ibG9ja0lucHV0UG9zMiIsImZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQiLCJfYmkyIiwiZmlsbGVkQmxvY2siLCJfYmxvY2tJbnB1dFBvczMiLCJmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4IiwiZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgiLCJfYmkzIiwiX2Jsb2NrNCIsIl9ibG9ja0lucHV0UG9zNCIsIl9iaTQiLCJfYmxvY2s1IiwiX2Jsb2NrSW5wdXRQb3M1IiwiYmxvY2tBbGlnbmVkUG9zIiwiaXNJbnB1dCIsIl9iaTUiLCJfYmxvY2s2IiwiX2Jsb2NrSW5wdXRQb3M2IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcyIsIl9iaTYiLCJfYmxvY2s3IiwiX2Jsb2NrSW5wdXRQb3M3IiwiX2JpNyIsIl9ibG9jazgiLCJfYmxvY2tJbnB1dFBvczgiLCJfYmk4IiwiX2Jsb2NrOSIsIl9ibG9ja0lucHV0UG9zOSIsImFsaWduZWRQb3MiLCJtYXNrZWRCbG9ja3MiLCJpbmRpY2VzIiwiZ2kiLCJibG9jayIsIklucHV0RGVmaW5pdGlvbiIsIkZpeGVkRGVmaW5pdGlvbiIsIk1hc2tlZFJhbmdlIiwiX01hc2tlZFBhdHRlcm4iLCJmcm9tU3RyIiwidG9TdHIiLCJzYW1lQ2hhcnNDb3VudCIsIm1pbnN0ciIsIm1heHN0ciIsInBsYWNlaG9sZGVyIiwibnVtIiwiYXV0b2ZpeCIsInByZXBTdHIiLCJuZXh0VmFsIiwiX3RoaXMkYm91bmRhcmllcyIsImJvdW5kYXJpZXMiLCJfdGhpcyRib3VuZGFyaWVzMiIsIl9nZXQyIiwiZmlyc3ROb25aZXJvIiwiX21hdGNoRnJvbSIsIl90aGlzJGJvdW5kYXJpZXMzIiwiX3RoaXMkYm91bmRhcmllczQiLCJfa2V5IiwiR0VUX0RFRkFVTFRfQkxPQ0tTIiwiWSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJkIiwiZ2V0RGF0ZSIsImJrIiwiZGF0ZSIsImlzRGF0ZUV4aXN0IiwidHlwZWRWYWx1ZSIsIl9zdHIkc3BsaXQyIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwiTWFza0VsZW1lbnQiLCJfdW5zYWZlU2VsZWN0aW9uU3RhcnQiLCJfdW5zYWZlU2VsZWN0aW9uRW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJfdW5zYWZlU2VsZWN0IiwiSFRNTE1hc2tFbGVtZW50IiwiX01hc2tFbGVtZW50IiwiX2hhbmRsZXJzIiwiZ2V0Um9vdE5vZGUiLCJyb290RWxlbWVudCIsInNldFNlbGVjdGlvblJhbmdlIiwiX3RvZ2dsZUV2ZW50SGFuZGxlciIsIkVWRU5UU19NQVAiLCJzZWxlY3Rpb25DaGFuZ2UiLCJkcm9wIiwiSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IiwiX0hUTUxNYXNrRWxlbWVudCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImNyZWF0ZVJhbmdlIiwicmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImxhc3RDaGlsZCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiX2V4Y2x1ZGVkJDEiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIl9saXN0ZW5lcnMiLCJfdW5tYXNrZWRWYWx1ZSIsIl9zYXZlU2VsZWN0aW9uIiwiX29uSW5wdXQiLCJfb25DaGFuZ2UiLCJfb25Ecm9wIiwiX29uRm9jdXMiLCJfb25DbGljayIsImFsaWduQ3Vyc29yIiwiYWxpZ25DdXJzb3JGcmllbmRseSIsIl9iaW5kRXZlbnRzIiwidXBkYXRlVmFsdWUiLCJtYXNrRXF1YWxzIiwidXBkYXRlT3B0aW9ucyIsInVwZGF0ZUNvbnRyb2wiLCJiaW5kRXZlbnRzIiwidW5iaW5kRXZlbnRzIiwibGlzdGVuZXJzIiwibCIsIl9jdXJzb3JDaGFuZ2luZyIsIl9jaGFuZ2luZ0N1cnNvclBvcyIsImlzQWN0aXZlIiwic2VsZWN0IiwiX3NlbGVjdGlvbiIsIm5ld1VubWFza2VkVmFsdWUiLCJpc0NoYW5nZWQiLCJfZmlyZUNoYW5nZUV2ZW50cyIsInJlc3RPcHRzIiwidXBkYXRlTWFzayIsInVwZGF0ZU9wdHMiLCJvYmplY3RJbmNsdWRlcyIsImFyckEiLCJhcnJCIiwiZGF0ZUEiLCJkYXRlQiIsInJlZ2V4cEEiLCJyZWdleHBCIiwiX2RlbGF5VXBkYXRlQ3Vyc29yIiwiX2Fib3J0VXBkYXRlQ3Vyc29yIiwiX2ZpcmVFdmVudCIsIl9pbnB1dEV2ZW50IiwiaEluZGV4Iiwib2xkUmF3VmFsdWUiLCJyZW1vdmVkIiwidXBkYXRlQ3Vyc29yIiwiX3VuYmluZEV2ZW50cyIsIk1hc2tlZEVudW0iLCJlbnVtIiwic29tZSIsIl91cGRhdGVSZWdFeHBzIiwiYWxsb3dOZWdhdGl2ZSIsInJhZGl4IiwiX251bWJlclJlZ0V4cElucHV0IiwiX251bWJlclJlZ0V4cCIsIl9tYXBUb1JhZGl4UmVnRXhwIiwibWFwVG9SYWRpeCIsIl90aG91c2FuZHNTZXBhcmF0b3JSZWdFeHAiLCJ0aG91c2FuZHNTZXBhcmF0b3IiLCJwYXJ0cyIsIl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzIiwiZXh0ZW5kT25TZXBhcmF0b3JzIiwiX3NlcGFyYXRvcnNDb3VudCIsIl90aGlzJF9hZGp1c3RSYW5nZVdpdCIsIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzIiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0MiIsInByZXZCZWZvcmVUYWlsVmFsdWUiLCJwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCIsIl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UiLCJhcHBlbmREZXRhaWxzIiwiX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnMiLCJiZWZvcmVUYWlsVmFsdWUiLCJiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50Iiwic2VhcmNoRnJvbSIsInNlcGFyYXRvclBvcyIsInNlcGFyYXRvckFyb3VuZEZyb21Qb3MiLCJfZmluZFNlcGFyYXRvckFyb3VuZCIsInNlcGFyYXRvckFyb3VuZFRvUG9zIiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0MyIsIl90aGlzJF9hZGp1c3RSYW5nZVdpdDQiLCJ2YWx1ZUJlZm9yZVBvcyIsInZhbHVlQWZ0ZXJQb3MiLCJzZXBhcmF0b3JBdExlZnRQb3MiLCJzZXBhcmF0b3JBdExlZnRFbmRQb3MiLCJzZXBhcmF0b3JBdFJpZ2h0UG9zIiwidmFsaWQiLCJ2YWxpZG51bSIsImZvcm1hdHRlZCIsIm5vcm1hbGl6ZVplcm9zIiwiX25vcm1hbGl6ZVplcm9zIiwicGFkRnJhY3Rpb25hbFplcm9zIiwiX3BhZEZyYWN0aW9uYWxaZXJvcyIsInplcm9zIiwic2lnbmVkIiwiX2V4Y2x1ZGVkIiwiY3VycmVudE1hc2siLCJjb21waWxlZE1hc2tzIiwiX2FwcGx5RGlzcGF0Y2giLCJwcmV2VmFsdWVCZWZvcmVUYWlsIiwiaW5wdXRWYWx1ZSIsImluc2VydFZhbHVlIiwiX3Jhd0lucHV0VmFsdWUiLCJ0YWlsVmFsdWUiLCJwcmV2TWFzayIsInByZXZNYXNrU3RhdGUiLCJkb0Rpc3BhdGNoIiwiZGlzcGF0Y2giLCJfdGhpcyRjdXJyZW50TWFzayIsIl90aGlzJGN1cnJlbnRNYXNrMiIsImN1cnJlbnRNYXNrUmVmIiwibWkiLCJfdGhpcyRjdXJyZW50TWFzazMiLCJfdGhpcyRjdXJyZW50TWFzazQiLCJfZ2V0MyIsIl9sZW4yIiwiX2tleTIiLCJfdGhpcyRjdXJyZW50TWFzazUiLCJfZ2V0NCIsIl9sZW4zIiwiX2tleTMiLCJpbnB1dHMiLCJ3ZWlnaHQiLCJpMiIsIlBJUEVfVFlQRSIsIk1BU0tFRCIsIlVOTUFTS0VEIiwiVFlQRUQiLCJjcmVhdGVQaXBlIiwicnVuSXNvbGF0ZWQiLCJwaXBlIiwicGlwZUFyZ3MiXSwibWFwcGluZ3MiOiJDQVlDLFNBQVVBLEVBQVFDLEdBQ0ksaUJBQVpDLFNBQTBDLG9CQUFYQyxP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QUFtQzloRSxHQUU1Q2swQyxHQUFNd3RCLFVBQVlBLEdBQ2xCeHRCLEdBQU00dEIsV0FBYUEsR0FDbkI1dEIsR0FBTTh0QixLQUFPQSxHQUViLElBQ0UvdEIsV0FBV0MsTUFBUUEsR0FDbkIsTUFBT3Z5QyxJQUVUbkksRUFBUTAvRCwrQkFBaUNBLEdBQ3pDMS9ELEVBQVFnL0QsZ0JBQWtCQSxHQUMxQmgvRCxFQUFRZ3dELFVBQVlBLEdBQ3BCaHdELEVBQVEwK0QsWUFBY0EsR0FDdEIxK0QsRUFBUWl3RCxPQUFTQSxHQUNqQmp3RCxFQUFRaXpELFdBQWFBLEdBQ3JCanpELEVBQVFvekQsY0FBZ0JBLEdBQ3hCcHpELEVBQVFzakUsV0FBYUEsR0FDckJ0akUsRUFBUXF6RCxlQUFpQkEsR0FDekJyekQsRUFBUW16RCxhQUFlQSxHQUN2Qm56RCxFQUFRZ3pELGNBQWdCQSxHQUN4Qmh6RCxFQUFRdThELFlBQWNBLEdBQ3RCdjhELEVBQVEreUQsYUFBZUEsR0FDdkIveUQsRUFBUWtvRSxVQUFZQSxHQUNwQmxvRSxFQUFRc3pELFdBQWFBLEdBQ3JCdHpELEVBQVFzb0UsV0FBYUEsR0FDckJ0b0UsRUFBaUIsUUFBSTA2QyxHQUNyQjE2QyxFQUFRd29FLEtBQU9BLEdBRWY5bkUsT0FBT3lRLGVBQWVuUixFQUFTLGFBQWMsQ0FBRXdHLE9BQU8iLCJmaWxlIjoibGlicy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3dpcGVyIDUuNC41XG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cDovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjAgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogSnVuZSAxNiwgMjAyMFxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU3dpcGVyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogU1NSIFdpbmRvdyAyLjAuMFxuICAgICAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAgICAgKlxuICAgICAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICAgICAqXG4gICAgICogTGljZW5zZWQgdW5kZXIgTUlUXG4gICAgICpcbiAgICAgKiBSZWxlYXNlZCBvbjogTWF5IDEyLCAyMDIwXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICAgICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAnY29uc3RydWN0b3InIGluIG9iaiAmJlxuICAgICAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IHt9OyB9XG4gICAgICAgIGlmIChzcmMgPT09IHZvaWQgMCkgeyBzcmMgPSB7fTsgfVxuICAgICAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgeyB0YXJnZXRba2V5XSA9IHNyY1trZXldOyB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdCh0YXJnZXRba2V5XSkgJiZcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgdmFyIHNzckRvY3VtZW50ID0ge1xuICAgICAgICBib2R5OiB7fSxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIG5vZGVOYW1lOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RWxlbWVudEJ5SWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUVsZW1lbnROUzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBpbXBvcnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGhhc2g6ICcnLFxuICAgICAgICAgICAgaG9zdDogJycsXG4gICAgICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgICAgICBzZWFyY2g6ICcnLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuXG4gICAgdmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgdmFyIHNzcldpbmRvdyA9IHtcbiAgICAgICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgICAgICBuYXZpZ2F0b3I6IHtcbiAgICAgICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgICAgIH0sXG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICAgICAgaHJlZjogJycsXG4gICAgICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICAgICAgc2VhcmNoOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgaGlzdG9yeToge1xuICAgICAgICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGdvOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBiYWNrOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIH0sXG4gICAgICAgIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgSW1hZ2U6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgRGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBzY3JlZW46IHt9LFxuICAgICAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBtYXRjaE1lZGlhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuXG4gICAgLyoqXG4gICAgICogRG9tNyAyLjEuNVxuICAgICAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAgICAgKiBodHRwOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbS5odG1sXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAgICAgKiBUaGUgaURhbmdlcm8udXNcbiAgICAgKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL1xuICAgICAqXG4gICAgICogTGljZW5zZWQgdW5kZXIgTUlUXG4gICAgICpcbiAgICAgKiBSZWxlYXNlZCBvbjogTWF5IDE1LCAyMDIwXG4gICAgICovXG5cbiAgICB2YXIgRG9tNyA9IGZ1bmN0aW9uIERvbTcoYXJyKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAvLyBDcmVhdGUgYXJyYXktbGlrZSBvYmplY3RcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHNlbGZbaV0gPSBhcnJbaV07XG4gICAgICB9XG4gICAgICBzZWxmLmxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAvLyBSZXR1cm4gY29sbGVjdGlvbiB3aXRoIG1ldGhvZHNcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICB2YXIgYXJyID0gW107XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpZiAoc2VsZWN0b3IgJiYgIWNvbnRleHQpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFyIGVscztcbiAgICAgICAgICB2YXIgdGVtcFBhcmVudDtcbiAgICAgICAgICB2YXIgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB7IHRvQ3JlYXRlID0gJ3VsJzsgfVxuICAgICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHsgdG9DcmVhdGUgPSAndGJvZHknOyB9XG4gICAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB7IHRvQ3JlYXRlID0gJ3RyJzsgfVxuICAgICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHsgdG9DcmVhdGUgPSAndGFibGUnOyB9XG4gICAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHsgdG9DcmVhdGUgPSAnc2VsZWN0JzsgfVxuICAgICAgICAgICAgdGVtcFBhcmVudCA9IGRvYy5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgICAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFjb250ZXh0ICYmIHNlbGVjdG9yWzBdID09PSAnIycgJiYgIXNlbGVjdG9yLm1hdGNoKC9bIC48Pjp+XS8pKSB7XG4gICAgICAgICAgICAgIC8vIFB1cmUgSUQgc2VsZWN0b3JcbiAgICAgICAgICAgICAgZWxzID0gW2RvYy5nZXRFbGVtZW50QnlJZChzZWxlY3Rvci50cmltKCkuc3BsaXQoJyMnKVsxXSldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gT3RoZXIgc2VsZWN0b3JzXG4gICAgICAgICAgICAgIGVscyA9IChjb250ZXh0IHx8IGRvYykucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAoZWxzW2ldKSB7IGFyci5wdXNoKGVsc1tpXSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbiB8fCBzZWxlY3RvciA9PT0gZG9jKSB7XG4gICAgICAgICAgLy8gTm9kZS9lbGVtZW50XG4gICAgICAgICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLmxlbmd0aCA+IDAgJiYgc2VsZWN0b3JbMF0ubm9kZVR5cGUpIHtcbiAgICAgICAgICAvLyBBcnJheSBvZiBlbGVtZW50cyBvciBpbnN0YW5jZSBvZiBEb21cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHNlbGVjdG9yW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyhhcnIpO1xuICAgIH1cblxuICAgICQuZm4gPSBEb203LnByb3RvdHlwZTtcbiAgICAkLkNsYXNzID0gRG9tNztcbiAgICAkLkRvbTcgPSBEb203O1xuXG4gICAgZnVuY3Rpb24gdW5pcXVlKGFycikge1xuICAgICAgdmFyIHVuaXF1ZUFycmF5ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgeyB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmlxdWVBcnJheTtcbiAgICB9XG5cbiAgICAvLyBDbGFzc2VzIGFuZCBhdHRyaWJ1dGVzXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgeyB0aGlzW2pdLmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbal0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHsgdGhpc1tqXS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbaV0pOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICAgIGlmICghdGhpc1swXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHJldHVybiB0aGlzWzBdLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7IHRoaXNbal0uY2xhc3NMaXN0LnRvZ2dsZShjbGFzc2VzW2ldKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBHZXQgYXR0clxuICAgICAgICBpZiAodGhpc1swXSkgeyByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpOyB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBhdHRyc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMkMS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9iamVjdFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZ1bmN0aW9uIHJlbW92ZUF0dHIoYXR0cikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGVsO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZWwgPSB0aGlzWzBdO1xuICAgICAgICAvLyBHZXQgdmFsdWVcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgKGtleSBpbiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZSgoXCJkYXRhLVwiICsga2V5KSk7XG4gICAgICAgICAgaWYgKGRhdGFLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCB2YWx1ZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVsID0gdGhpc1tpXTtcbiAgICAgICAgaWYgKCFlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSB7IGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fTsgfVxuICAgICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBUcmFuc2Zvcm1zXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBlbFN0eWxlID0gdGhpc1tpXS5zdHlsZTtcbiAgICAgICAgZWxTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGVsU3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gKyBcIm1zXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICAgIGVsU3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIGVsU3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gRXZlbnRzXG4gICAgZnVuY3Rpb24gb24oKSB7XG4gICAgICB2YXIgYXNzaWduO1xuXG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgIHZhciBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgICAgdmFyIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGFyZ3NbMl07XG4gICAgICB2YXIgY2FwdHVyZSA9IGFyZ3NbM107XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgKGFzc2lnbiA9IGFyZ3MsIGV2ZW50VHlwZSA9IGFzc2lnblswXSwgbGlzdGVuZXIgPSBhc3NpZ25bMV0sIGNhcHR1cmUgPSBhc3NpZ25bMl0pO1xuICAgICAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICghY2FwdHVyZSkgeyBjYXB0dXJlID0gZmFsc2U7IH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBpZiAoIXRhcmdldCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgeyBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7IH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHBhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBwYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgICAgICBpZiAoJChwYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIHsgbGlzdGVuZXIuYXBwbHkocGFyZW50c1trXSwgZXZlbnREYXRhKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICB2YXIgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcbiAgICAgICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgICAgICB9XG4gICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gICAgICB2YXIgajtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzW2ldO1xuICAgICAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSB7IGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTsgfVxuICAgICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgeyBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdOyB9XG4gICAgICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBldmVudCQxID0gZXZlbnRzW2pdO1xuICAgICAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgeyBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9OyB9XG4gICAgICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdKSB7IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdID0gW107IH1cbiAgICAgICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdLnB1c2goe1xuICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCQxLCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9mZigpIHtcbiAgICAgIHZhciBhc3NpZ247XG5cbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuICAgICAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdO1xuICAgICAgdmFyIGxpc3RlbmVyID0gYXJnc1syXTtcbiAgICAgIHZhciBjYXB0dXJlID0gYXJnc1szXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAoYXNzaWduID0gYXJncywgZXZlbnRUeXBlID0gYXNzaWduWzBdLCBsaXN0ZW5lciA9IGFzc2lnblsxXSwgY2FwdHVyZSA9IGFzc2lnblsyXSk7XG4gICAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKCFjYXB0dXJlKSB7IGNhcHR1cmUgPSBmYWxzZTsgfVxuXG4gICAgICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHZhciBlbCA9IHRoaXNbal07XG4gICAgICAgICAgdmFyIGhhbmRsZXJzID0gKHZvaWQgMCk7XG4gICAgICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcbiAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgICAgIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuICAgICAgICAgIHZhciBldnQgPSAodm9pZCAwKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXZ0ID0gbmV3IHdpbi5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV2dCA9IGRvYy5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgZXZ0LmRldGFpbCA9IGV2ZW50RGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHsgcmV0dXJuIGRhdGFJbmRleCA+IDA7IH0pO1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgIHZhciBkb20gPSB0aGlzO1xuICAgICAgdmFyIGk7XG4gICAgICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSB7IHJldHVybjsgfVxuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgZG9tLm9uKGV2ZW50c1tpXSwgZmlyZUNhbGxCYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgICB2YXIgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gICAgICAgIHZhciBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICAgICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZWwgPT09IHdpbiA/IHdpbi5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW4gPyB3aW4uc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiAoYm94LnRvcCArIHNjcm9sbFRvcCkgLSBjbGllbnRUb3AsXG4gICAgICAgICAgbGVmdDogKGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCkgLSBjbGllbnRMZWZ0LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVzKCkge1xuICAgICAgaWYgKHRoaXNbMF0pIHsgcmV0dXJuIHdpbi5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpOyB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodGhpc1swXSkgeyByZXR1cm4gd2luLmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY29sbGVjdGlvbiBwYXNzaW5nIGVsZW1lbnRzIHRvIGBjYWxsYmFja2BcbiAgICBmdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gICAgICAvLyBEb24ndCBib3RoZXIgY29udGludWluZyB3aXRob3V0IGEgY2FsbGJhY2tcbiAgICAgIGlmICghY2FsbGJhY2spIHsgcmV0dXJuIHRoaXM7IH1cbiAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb2xsZWN0aW9uXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc1tpXSwgaSwgdGhpc1tpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgLy8gRW5kIHRoZSBsb29wIGVhcmx5XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJldHVybiBgdGhpc2AgdG8gYWxsb3cgY2hhaW5lZCBET00gb3BlcmF0aW9uc1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICAgICAgdmFyIG1hdGNoZWRJdGVtcyA9IFtdO1xuICAgICAgdmFyIGRvbSA9IHRoaXM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChkb21baV0sIGksIGRvbVtpXSkpIHsgbWF0Y2hlZEl0ZW1zLnB1c2goZG9tW2ldKTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KG1hdGNoZWRJdGVtcyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICAgICAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZ1bmN0aW9uIHRleHQodGV4dCkge1xuICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICAgIHJldHVybiB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgdmFyIGNvbXBhcmVXaXRoO1xuICAgICAgdmFyIGk7XG4gICAgICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZWwubWF0Y2hlcykgeyByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7IH1cbiAgICAgICAgZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7IHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9XG4gICAgICAgIGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7IHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7IH1cblxuICAgICAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gZG9jKSB7IHJldHVybiBlbCA9PT0gZG9jOyB9XG4gICAgICBlbHNlIGlmIChzZWxlY3RvciA9PT0gd2luKSB7IHJldHVybiBlbCA9PT0gd2luOyB9XG5cbiAgICAgIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzWzBdO1xuICAgICAgdmFyIGk7XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgeyBpICs9IDE7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gdGhpczsgfVxuICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgdmFyIHJldHVybkluZGV4O1xuICAgICAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgICAgICBpZiAocmV0dXJuSW5kZXggPCAwKSB7IHJldHVybiBuZXcgRG9tNyhbXSk7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzW3JldHVybkluZGV4XV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzW2luZGV4XV0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIG5ld0NoaWxkO1xuXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGFyZ3MubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgbmV3Q2hpbGQgPSBhcmdzW2tdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuICAgICAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgajtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykgeyByZXR1cm4gbmV3IERvbTcoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBuZXh0RWxzID0gW107XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgaWYgKCFlbCkgeyByZXR1cm4gbmV3IERvbTcoW10pOyB9XG4gICAgICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgIHZhciBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICgkKG5leHQpLmlzKHNlbGVjdG9yKSkgeyBuZXh0RWxzLnB1c2gobmV4dCk7IH1cbiAgICAgICAgfSBlbHNlIHsgbmV4dEVscy5wdXNoKG5leHQpOyB9XG4gICAgICAgIGVsID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyhuZXh0RWxzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJldihzZWxlY3Rvcikge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgeyByZXR1cm4gbmV3IERvbTcoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTsgfVxuICAgICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICAgICAgdmFyIHByZXZFbHMgPSBbXTtcbiAgICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgICBpZiAoIWVsKSB7IHJldHVybiBuZXcgRG9tNyhbXSk7IH1cbiAgICAgIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgIHZhciBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoJChwcmV2KS5pcyhzZWxlY3RvcikpIHsgcHJldkVscy5wdXNoKHByZXYpOyB9XG4gICAgICAgIH0gZWxzZSB7IHByZXZFbHMucHVzaChwcmV2KTsgfVxuICAgICAgICBlbCA9IHByZXY7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IERvbTcocHJldkVscyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICAgICAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSB7IHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpOyB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICQodW5pcXVlKHBhcmVudHMpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICAgICAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKCQocGFyZW50KS5pcyhzZWxlY3RvcikpIHsgcGFyZW50cy5wdXNoKHBhcmVudCk7IH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gICAgICB2YXIgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgICB9XG4gICAgICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBmb3VuZEVsZW1lbnRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyhmb3VuZEVsZW1lbnRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkTm9kZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTsgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGROb2Rlc1tqXS5ub2RlVHlwZSA9PT0gMSAmJiAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyh1bmlxdWUoY2hpbGRyZW4pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHsgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBkb20gPSB0aGlzO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgajtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciB0b0FkZCA9ICQoYXJnc1tpXSk7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGRvbVtkb20ubGVuZ3RoXSA9IHRvQWRkW2pdO1xuICAgICAgICAgIGRvbS5sZW5ndGggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICB2YXIgTWV0aG9kcyA9IHtcbiAgICAgIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgICAgIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgICAgIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgICAgIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgICAgIGF0dHI6IGF0dHIsXG4gICAgICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICAgIG9uOiBvbixcbiAgICAgIG9mZjogb2ZmLFxuICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG4gICAgICBvdXRlcldpZHRoOiBvdXRlcldpZHRoLFxuICAgICAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIGVhY2g6IGVhY2gsXG4gICAgICBodG1sOiBodG1sLFxuICAgICAgdGV4dDogdGV4dCxcbiAgICAgIGlzOiBpcyxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIGVxOiBlcSxcbiAgICAgIGFwcGVuZDogYXBwZW5kLFxuICAgICAgcHJlcGVuZDogcHJlcGVuZCxcbiAgICAgIG5leHQ6IG5leHQsXG4gICAgICBuZXh0QWxsOiBuZXh0QWxsLFxuICAgICAgcHJldjogcHJldixcbiAgICAgIHByZXZBbGw6IHByZXZBbGwsXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHBhcmVudHM6IHBhcmVudHMsXG4gICAgICBjbG9zZXN0OiBjbG9zZXN0LFxuICAgICAgZmluZDogZmluZCxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICBhZGQ6IGFkZCxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAkLmZuW21ldGhvZE5hbWVdID0gJC5mblttZXRob2ROYW1lXSB8fCBNZXRob2RzW21ldGhvZE5hbWVdO1xuICAgIH0pO1xuXG4gICAgdmFyIFV0aWxzID0ge1xuICAgICAgZGVsZXRlUHJvcHM6IGZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICAgICAgICB2YXIgb2JqZWN0ID0gb2JqO1xuICAgICAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBuZXh0VGljazogZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICAgIGlmICggZGVsYXkgPT09IHZvaWQgMCApIGRlbGF5ID0gMDtcblxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xuICAgICAgfSxcbiAgICAgIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICAgIH0sXG4gICAgICBnZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICAgICAgICBpZiAoIGF4aXMgPT09IHZvaWQgMCApIGF4aXMgPSAneCc7XG5cbiAgICAgICAgdmFyIG1hdHJpeDtcbiAgICAgICAgdmFyIGN1clRyYW5zZm9ybTtcbiAgICAgICAgdmFyIHRyYW5zZm9ybU1hdHJpeDtcblxuICAgICAgICB2YXIgY3VyU3R5bGUgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgICAgICAgaWYgKHdpbi5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnJlcGxhY2UoJywnLCAnLicpOyB9KS5qb2luKCcsICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbi5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgICAgICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgICAgIGlmICh3aW4uV2ViS2l0Q1NTTWF0cml4KSB7IGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IH1cbiAgICAgICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSB7IGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7IH1cbiAgICAgICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgICAgICBlbHNlIHsgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICAgICAgaWYgKHdpbi5XZWJLaXRDU1NNYXRyaXgpIHsgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgfVxuICAgICAgICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIHsgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTsgfVxuICAgICAgICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgICAgIGVsc2UgeyBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG4gICAgICB9LFxuICAgICAgcGFyc2VVcmxRdWVyeTogZnVuY3Rpb24gcGFyc2VVcmxRdWVyeSh1cmwpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0ge307XG4gICAgICAgIHZhciB1cmxUb1BhcnNlID0gdXJsIHx8IHdpbi5sb2NhdGlvbi5ocmVmO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHBhcmFtcztcbiAgICAgICAgdmFyIHBhcmFtO1xuICAgICAgICB2YXIgbGVuZ3RoO1xuICAgICAgICBpZiAodHlwZW9mIHVybFRvUGFyc2UgPT09ICdzdHJpbmcnICYmIHVybFRvUGFyc2UubGVuZ3RoKSB7XG4gICAgICAgICAgdXJsVG9QYXJzZSA9IHVybFRvUGFyc2UuaW5kZXhPZignPycpID4gLTEgPyB1cmxUb1BhcnNlLnJlcGxhY2UoL1xcUypcXD8vLCAnJykgOiAnJztcbiAgICAgICAgICBwYXJhbXMgPSB1cmxUb1BhcnNlLnNwbGl0KCcmJykuZmlsdGVyKGZ1bmN0aW9uIChwYXJhbXNQYXJ0KSB7IHJldHVybiBwYXJhbXNQYXJ0ICE9PSAnJzsgfSk7XG4gICAgICAgICAgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcGFyYW0gPSBwYXJhbXNbaV0ucmVwbGFjZSgvI1xcUysvZywgJycpLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICBxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMF0pXSA9IHR5cGVvZiBwYXJhbVsxXSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkZWNvZGVVUklDb21wb25lbnQocGFyYW1bMV0pIHx8ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICB9LFxuICAgICAgaXNPYmplY3Q6IGZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgby5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICAgICAgfSxcbiAgICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4kMSA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuJDEtLSApIGFyZ3NbIGxlbiQxIF0gPSBhcmd1bWVudHNbIGxlbiQxIF07XG5cbiAgICAgICAgdmFyIHRvID0gT2JqZWN0KGFyZ3NbMF0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICAgICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKTtcbiAgICAgICAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgIFV0aWxzLmV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG87XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgU3VwcG9ydCA9IChmdW5jdGlvbiBTdXBwb3J0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG91Y2g6ICEhKCgnb250b3VjaHN0YXJ0JyBpbiB3aW4pIHx8ICh3aW4uRG9jdW1lbnRUb3VjaCAmJiBkb2MgaW5zdGFuY2VvZiB3aW4uRG9jdW1lbnRUb3VjaCkpLFxuXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICEhd2luLlBvaW50ZXJFdmVudCAmJiAoJ21heFRvdWNoUG9pbnRzJyBpbiB3aW4ubmF2aWdhdG9yKSAmJiB3aW4ubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID49IDAsXG5cbiAgICAgICAgb2JzZXJ2ZXI6IChmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgICAgIHJldHVybiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbiB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luKTtcbiAgICAgICAgfSgpKSxcblxuICAgICAgICBwYXNzaXZlTGlzdGVuZXI6IChmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gTm8gc3VwcG9ydFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgICAgICB9KCkpLFxuXG4gICAgICAgIGdlc3R1cmVzOiAoZnVuY3Rpb24gY2hlY2tHZXN0dXJlcygpIHtcbiAgICAgICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW47XG4gICAgICAgIH0oKSksXG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU3dpcGVyQ2xhc3MgPSBmdW5jdGlvbiBTd2lwZXJDbGFzcyhwYXJhbXMpIHtcbiAgICAgIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5wYXJhbXMgPSBwYXJhbXM7XG5cbiAgICAgIC8vIEV2ZW50c1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgaWYgKHNlbGYucGFyYW1zICYmIHNlbGYucGFyYW1zLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHNlbGYucGFyYW1zLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICBzZWxmLm9uKGV2ZW50TmFtZSwgc2VsZi5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3RhdGljQWNjZXNzb3JzID0geyBjb21wb25lbnRzOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICBTd2lwZXJDbGFzcy5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbiAoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBzZWxmOyB9XG4gICAgICB2YXIgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgeyBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTsgfVxuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIFN3aXBlckNsYXNzLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSAoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBzZWxmOyB9XG4gICAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICAgIGlmIChvbmNlSGFuZGxlci5mN3Byb3h5KSB7XG4gICAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmY3cHJveHk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIG9uY2VIYW5kbGVyLmY3cHJveHkgPSBoYW5kbGVyO1xuICAgICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICAgIH07XG5cbiAgICBTd2lwZXJDbGFzcy5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmIChldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IChldmVudEhhbmRsZXIuZjdwcm94eSAmJiBldmVudEhhbmRsZXIuZjdwcm94eSA9PT0gaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIFN3aXBlckNsYXNzLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICAgIHZhciBldmVudHM7XG4gICAgICB2YXIgZGF0YTtcbiAgICAgIHZhciBjb250ZXh0O1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgICAgfVxuICAgICAgdmFyIGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgICBldmVudHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXJzID0gW107XG4gICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgICAgaGFuZGxlcnMucHVzaChldmVudEhhbmRsZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBTd2lwZXJDbGFzcy5wcm90b3R5cGUudXNlTW9kdWxlc1BhcmFtcyA9IGZ1bmN0aW9uIHVzZU1vZHVsZXNQYXJhbXMgKGluc3RhbmNlUGFyYW1zKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSB7IHJldHVybjsgfVxuICAgICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgICAgLy8gRXh0ZW5kIHBhcmFtc1xuICAgICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICAgIFV0aWxzLmV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTd2lwZXJDbGFzcy5wcm90b3R5cGUudXNlTW9kdWxlcyA9IGZ1bmN0aW9uIHVzZU1vZHVsZXMgKG1vZHVsZXNQYXJhbXMpIHtcbiAgICAgICAgaWYgKCBtb2R1bGVzUGFyYW1zID09PSB2b2lkIDAgKSBtb2R1bGVzUGFyYW1zID0ge307XG5cbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHsgcmV0dXJuOyB9XG4gICAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgICB2YXIgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTtcbiAgICAgICAgLy8gRXh0ZW5kIGluc3RhbmNlIG1ldGhvZHMgYW5kIHByb3BzXG4gICAgICAgIGlmIChtb2R1bGUuaW5zdGFuY2UpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhtb2R1bGUuaW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZVByb3BOYW1lKSB7XG4gICAgICAgICAgICB2YXIgbW9kdWxlUHJvcCA9IG1vZHVsZS5pbnN0YW5jZVttb2R1bGVQcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgaW5zdGFuY2VbbW9kdWxlUHJvcE5hbWVdID0gbW9kdWxlUHJvcC5iaW5kKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVFdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLm9uKG1vZHVsZUV2ZW50TmFtZSwgbW9kdWxlLm9uW21vZHVsZUV2ZW50TmFtZV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW9kdWxlIGNyZWF0ZSBjYWxsYmFja1xuICAgICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0YXRpY0FjY2Vzc29ycy5jb21wb25lbnRzLnNldCA9IGZ1bmN0aW9uIChjb21wb25lbnRzKSB7XG4gICAgICB2YXIgQ2xhc3MgPSB0aGlzO1xuICAgICAgaWYgKCFDbGFzcy51c2UpIHsgcmV0dXJuOyB9XG4gICAgICBDbGFzcy51c2UoY29tcG9uZW50cyk7XG4gICAgfTtcblxuICAgIFN3aXBlckNsYXNzLmluc3RhbGxNb2R1bGUgPSBmdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChtb2R1bGUpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBwYXJhbXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICAgIHZhciBDbGFzcyA9IHRoaXM7XG4gICAgICBpZiAoIUNsYXNzLnByb3RvdHlwZS5tb2R1bGVzKSB7IENsYXNzLnByb3RvdHlwZS5tb2R1bGVzID0ge307IH1cbiAgICAgIHZhciBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKCgoT2JqZWN0LmtleXMoQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCkgKyBcIl9cIiArIChVdGlscy5ub3coKSkpKTtcbiAgICAgIENsYXNzLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICAgICAgLy8gUHJvdG90eXBlXG4gICAgICBpZiAobW9kdWxlLnByb3RvKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5wcm90bykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgQ2xhc3MucHJvdG90eXBlW2tleV0gPSBtb2R1bGUucHJvdG9ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBDbGFzc1xuICAgICAgaWYgKG1vZHVsZS5zdGF0aWMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgQ2xhc3Nba2V5XSA9IG1vZHVsZS5zdGF0aWNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBDYWxsYmFja1xuICAgICAgaWYgKG1vZHVsZS5pbnN0YWxsKSB7XG4gICAgICAgIG1vZHVsZS5pbnN0YWxsLmFwcGx5KENsYXNzLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIENsYXNzO1xuICAgIH07XG5cbiAgICBTd2lwZXJDbGFzcy51c2UgPSBmdW5jdGlvbiB1c2UgKG1vZHVsZSkge1xuICAgICAgICB2YXIgcGFyYW1zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIHBhcmFtc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgdmFyIENsYXNzID0gdGhpcztcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0dXJuIENsYXNzLmluc3RhbGxNb2R1bGUobSk7IH0pO1xuICAgICAgICByZXR1cm4gQ2xhc3M7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ2xhc3MuaW5zdGFsbE1vZHVsZS5hcHBseShDbGFzcywgWyBtb2R1bGUgXS5jb25jYXQoIHBhcmFtcyApKTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFN3aXBlckNsYXNzLCBzdGF0aWNBY2Nlc3NvcnMgKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNpemUgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgd2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0O1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWlnaHQgPSAkZWxbMF0uY2xpZW50SGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICAgICAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXJpZ2h0JyksIDEwKTtcbiAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksIDEwKTtcblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcyAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZTtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIHdyb25nUlRMID0gc3dpcGVyLndyb25nUlRMO1xuICAgICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICB2YXIgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICAgICAgdmFyIHNuYXBHcmlkID0gW107XG4gICAgICB2YXIgc2xpZGVzR3JpZCA9IFtdO1xuICAgICAgdmFyIHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuXG4gICAgICBmdW5jdGlvbiBzbGlkZXNGb3JNYXJnaW4oc2xpZGVJbmRleCkge1xuICAgICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gICAgICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICAgICAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIHZhciBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgICB2YXIgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgIHZhciBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgICAgIHZhciBwcmV2U2xpZGVTaXplID0gMDtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgICAgc3BhY2VCZXR3ZWVuID0gKHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwKSAqIHN3aXBlclNpemU7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgICAgIC8vIHJlc2V0IG1hcmdpbnNcbiAgICAgIGlmIChydGwpIHsgc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6ICcnLCBtYXJnaW5Ub3A6ICcnIH0pOyB9XG4gICAgICBlbHNlIHsgc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiAnJywgbWFyZ2luQm90dG9tOiAnJyB9KTsgfVxuXG4gICAgICB2YXIgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGMgc2xpZGVzXG4gICAgICB2YXIgc2xpZGVTaXplO1xuICAgICAgdmFyIHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gICAgICB2YXIgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgICAgIHZhciBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgICAgIHZhciBzbGlkZSA9IHNsaWRlcy5lcShpKTtcbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgICAgIHZhciBuZXdTbGlkZU9yZGVySW5kZXggPSAodm9pZCAwKTtcbiAgICAgICAgICB2YXIgY29sdW1uID0gKHZvaWQgMCk7XG4gICAgICAgICAgdmFyIHJvdyA9ICh2b2lkIDApO1xuICAgICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAocGFyYW1zLnNsaWRlc1Blckdyb3VwICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbikpO1xuICAgICAgICAgICAgdmFyIHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgICAgICAgdmFyIGNvbHVtbnNJbkdyb3VwID0gZ3JvdXBJbmRleCA9PT0gMFxuICAgICAgICAgICAgICA/IHBhcmFtcy5zbGlkZXNQZXJHcm91cFxuICAgICAgICAgICAgICA6IE1hdGgubWluKE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gZ3JvdXBJbmRleCAqIHNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCkgLyBzbGlkZXNQZXJDb2x1bW4pLCBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTtcbiAgICAgICAgICAgIGNvbHVtbiA9IChzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwKSArIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICAgICAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArICgocm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cykgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgICAgc2xpZGVcbiAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgICAgcm93ID0gaSAtIChjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IChjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkpIHtcbiAgICAgICAgICAgICAgcm93ICs9IDE7XG4gICAgICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgICAgICAgY29sdW1uID0gaSAtIChyb3cgKiBzbGlkZXNQZXJSb3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzbGlkZS5jc3MoXG4gICAgICAgICAgICAoXCJtYXJnaW4tXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3RvcCcgOiAnbGVmdCcpKSxcbiAgICAgICAgICAgIChyb3cgIT09IDAgJiYgcGFyYW1zLnNwYWNlQmV0d2VlbikgJiYgKCgocGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgdmFyIHNsaWRlU3R5bGVzID0gd2luLmdldENvbXB1dGVkU3R5bGUoc2xpZGVbMF0sIG51bGwpO1xuICAgICAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICAgIHZhciBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgICAgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpXG4gICAgICAgICAgICAgIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykpO1xuICAgICAgICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKTtcbiAgICAgICAgICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKTtcbiAgICAgICAgICAgICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgICAgICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKTtcbiAgICAgICAgICAgICAgdmFyIGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKTtcbiAgICAgICAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpO1xuICAgICAgICAgICAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSk7XG4gICAgICAgICAgICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSk7XG4gICAgICAgICAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgICAgICAgICAgIHZhciBib3hTaXppbmckMSA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICAgICAgaWYgKGJveFNpemluZyQxICYmIGJveFNpemluZyQxID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgICAgICBzbGlkZVNpemUgPSBoZWlnaHQgKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b20gKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtICgocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikpIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpOyB9XG5cbiAgICAgICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS53aWR0aCA9IHNsaWRlU2l6ZSArIFwicHhcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cblxuICAgICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyAoc2xpZGVTaXplIC8gMikgKyAocHJldlNsaWRlU2l6ZSAvIDIpICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHsgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuOyB9XG4gICAgICAgICAgaWYgKGkgPT09IDApIHsgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuOyB9XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHsgc2xpZGVQb3NpdGlvbiA9IDA7IH1cbiAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTsgfVxuICAgICAgICAgIGlmICgoaW5kZXgpICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSB7IHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSB7IHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuXG4gICAgICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG5cbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHZhciBuZXdTbGlkZXNHcmlkO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICAgICAgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7IH1cbiAgICAgICAgZWxzZSB7ICR3cmFwcGVyRWwuY3NzKHsgaGVpZ2h0OiAoKHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICsgXCJweFwiKSB9KTsgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICAgICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKHN3aXBlci52aXJ0dWFsU2l6ZSAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIC0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgeyAkd3JhcHBlckVsLmNzcyh7IHdpZHRoOiAoKHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICsgXCJweFwiKSB9KTsgfVxuICAgICAgICBlbHNlIHsgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6ICgoc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpIH0pOyB9XG4gICAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc25hcEdyaWQubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgICAgICAgdmFyIHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaSQxXTtcbiAgICAgICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7IH1cbiAgICAgICAgICAgIGlmIChzbmFwR3JpZFtpJDFdIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIHsgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgc25hcEdyaWQubGVuZ3RoOyBpJDIgKz0gMSkge1xuICAgICAgICAgIHZhciBzbGlkZXNHcmlkSXRlbSQxID0gc25hcEdyaWRbaSQyXTtcbiAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZXNHcmlkSXRlbSQxID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSQxKTsgfVxuICAgICAgICAgIGlmIChzbmFwR3JpZFtpJDJdIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSQxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgICAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHsgc25hcEdyaWQgPSBbMF07IH1cblxuICAgICAgaWYgKHBhcmFtcy5zcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGlmIChydGwpIHsgc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7IG1hcmdpbkxlZnQ6IChzcGFjZUJldHdlZW4gKyBcInB4XCIpIH0pOyB9XG4gICAgICAgICAgZWxzZSB7IHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3MoeyBtYXJnaW5SaWdodDogKHNwYWNlQmV0d2VlbiArIFwicHhcIikgfSk7IH1cbiAgICAgICAgfSBlbHNlIHsgc2xpZGVzLmZpbHRlcihzbGlkZXNGb3JNYXJnaW4pLmNzcyh7IG1hcmdpbkJvdHRvbTogKHNwYWNlQmV0d2VlbiArIFwicHhcIikgfSk7IH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICAgICAgdmFyIGFsbFNsaWRlc1NpemUgPSAwO1xuICAgICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgICAgIHZhciBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemU7XG4gICAgICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICAgICAgaWYgKHNuYXAgPCAwKSB7IHJldHVybiAtb2Zmc2V0QmVmb3JlOyB9XG4gICAgICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSB7IHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7IH1cbiAgICAgICAgICByZXR1cm4gc25hcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgICAgIHZhciBhbGxTbGlkZXNTaXplJDEgPSAwO1xuICAgICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgICAgICBhbGxTbGlkZXNTaXplJDEgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbFNsaWRlc1NpemUkMSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgICAgICBpZiAoYWxsU2xpZGVzU2l6ZSQxIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgIHZhciBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUkMSkgLyAyO1xuICAgICAgICAgIHNuYXBHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBzbGlkZXM6IHNsaWRlcyxcbiAgICAgICAgc25hcEdyaWQ6IHNuYXBHcmlkLFxuICAgICAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgICAgICBzbGlkZXNTaXplc0dyaWQ6IHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHsgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTsgfVxuICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0IChzcGVlZCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgYWN0aXZlU2xpZGVzID0gW107XG4gICAgICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgICAgIHZhciBpO1xuICAgICAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgICAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICAgIH1cbiAgICAgIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIEhlaWdodFxuICAgICAgaWYgKG5ld0hlaWdodCkgeyBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ2hlaWdodCcsIChuZXdIZWlnaHQgKyBcInB4XCIpKTsgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzICh0cmFuc2xhdGUpIHtcbiAgICAgIGlmICggdHJhbnNsYXRlID09PSB2b2lkIDAgKSB0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMDtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICAgICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHsgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpOyB9XG5cbiAgICAgIHZhciBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICAgICAgaWYgKHJ0bCkgeyBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7IH1cblxuICAgICAgLy8gVmlzaWJsZSBTbGlkZXNcbiAgICAgIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuXG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICAgICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSAoXG4gICAgICAgICAgKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldFxuICAgICAgICApIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuICAgICAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSkge1xuICAgICAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICAgIHZhciBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgICAgIHZhciBpc1Zpc2libGUgPSAoc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgfHwgKHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgICAgIHx8IChzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemUpO1xuICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgICBzbGlkZXMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzICh0cmFuc2xhdGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRyYW5zbGF0ZSA9IChzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiAoc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIpKSB8fCAwO1xuICAgICAgfVxuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICB2YXIgaXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICB2YXIgaXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gICAgICB2YXIgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gICAgICB2YXIgd2FzRW5kID0gaXNFbmQ7XG4gICAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgICAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgICAgIGlzRW5kID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICAgICAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgICAgIH1cbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgICBpc0JlZ2lubmluZzogaXNCZWdpbm5pbmcsXG4gICAgICAgIGlzRW5kOiBpc0VuZCxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSkgeyBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTsgfVxuXG4gICAgICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gICAgICB9XG4gICAgICBpZiAoKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcpIHx8ICh3YXNFbmQgJiYgIWlzRW5kKSkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIHJlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKCgocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLnNsaWRlTmV4dENsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZVByZXZDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKSkpO1xuXG4gICAgICB2YXIgYWN0aXZlU2xpZGU7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgYWN0aXZlSW5kZXggKyBcIlxcXCJdXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgICAgIGFjdGl2ZVNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcblxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgICAgICBpZiAoYWN0aXZlU2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIjpub3QoLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpKVxuICAgICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikpXG4gICAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICB2YXIgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5lcSgwKTtcbiAgICAgICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICB9XG4gICAgICAvLyBQcmV2IFNsaWRlXG4gICAgICB2YXIgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgICAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCI6bm90KC5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSArIFwiXFxcIl1cIikpXG4gICAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgKyBcIlxcXCJdXCIpKVxuICAgICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgKyBcIlxcXCJdXCIpKVxuICAgICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAocHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICsgXCJcXFwiXVwiKSlcbiAgICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXggKG5ld0FjdGl2ZUluZGV4KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZDtcbiAgICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHByZXZpb3VzSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgcHJldmlvdXNSZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgICAgdmFyIHByZXZpb3VzU25hcEluZGV4ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICAgICAgdmFyIHNuYXBJbmRleDtcbiAgICAgIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSkge1xuICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICAgICAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgYWN0aXZlSW5kZXggPSAwOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgICAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICAgICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgfVxuICAgICAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHsgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTsgfVxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgcmVhbCBpbmRleFxuICAgICAgdmFyIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBzbmFwSW5kZXg6IHNuYXBJbmRleCxcbiAgICAgICAgcmVhbEluZGV4OiByZWFsSW5kZXgsXG4gICAgICAgIHByZXZpb3VzSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleCxcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZSAoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciBzbGlkZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpWzBdO1xuICAgICAgdmFyIHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHsgc2xpZGVGb3VuZCA9IHRydWU7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgICAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9ICQoc2xpZGUpLmluZGV4KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZSA9IHtcbiAgICAgIHVwZGF0ZVNpemU6IHVwZGF0ZVNpemUsXG4gICAgICB1cGRhdGVTbGlkZXM6IHVwZGF0ZVNsaWRlcyxcbiAgICAgIHVwZGF0ZUF1dG9IZWlnaHQ6IHVwZGF0ZUF1dG9IZWlnaHQsXG4gICAgICB1cGRhdGVTbGlkZXNPZmZzZXQ6IHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgICAgIHVwZGF0ZVNsaWRlc1Byb2dyZXNzOiB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgICAgIHVwZGF0ZVByb2dyZXNzOiB1cGRhdGVQcm9ncmVzcyxcbiAgICAgIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gICAgICB1cGRhdGVBY3RpdmVJbmRleDogdXBkYXRlQWN0aXZlSW5kZXgsXG4gICAgICB1cGRhdGVDbGlja2VkU2xpZGU6IHVwZGF0ZUNsaWNrZWRTbGlkZSxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlIChheGlzKSB7XG4gICAgICBpZiAoIGF4aXMgPT09IHZvaWQgMCApIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcblxuICAgICAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50VHJhbnNsYXRlID0gVXRpbHMuZ2V0VHJhbnNsYXRlKCR3cmFwcGVyRWxbMF0sIGF4aXMpO1xuICAgICAgaWYgKHJ0bCkgeyBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7IH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUgKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICB2YXIgeCA9IDA7XG4gICAgICB2YXIgeSA9IDA7XG4gICAgICB2YXIgeiA9IDA7XG5cbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gdHJhbnNsYXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICAgICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgICAgIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIFwiICsgeiArIFwicHgpXCIpKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gICAgICB2YXIgbmV3UHJvZ3Jlc3M7XG4gICAgICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgICB9XG4gICAgICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtaW5UcmFuc2xhdGUgKCkge1xuICAgICAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFswXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4VHJhbnNsYXRlICgpIHtcbiAgICAgIHJldHVybiAoLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8gKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICAgICAgdmFyIG9iajtcblxuICAgICAgaWYgKCB0cmFuc2xhdGUgPT09IHZvaWQgMCApIHRyYW5zbGF0ZSA9IDA7XG4gICAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgICBpZiAoIHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwICkgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgIHZhciBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICB2YXIgbmV3VHJhbnNsYXRlO1xuICAgICAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIHsgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlOyB9XG4gICAgICBlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSB7IG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTsgfVxuICAgICAgZWxzZSB7IG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTsgfVxuXG4gICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuXG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICAgICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKCggb2JqID0ge30sIG9ialtpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSAtbmV3VHJhbnNsYXRlLCBvYmouYmVoYXZpb3IgPSAnc21vb3RoJywgb2JqICkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zbGF0ZSA9IHtcbiAgICAgIGdldFRyYW5zbGF0ZTogZ2V0VHJhbnNsYXRlLFxuICAgICAgc2V0VHJhbnNsYXRlOiBzZXRUcmFuc2xhdGUsXG4gICAgICBtaW5UcmFuc2xhdGU6IG1pblRyYW5zbGF0ZSxcbiAgICAgIG1heFRyYW5zbGF0ZTogbWF4VHJhbnNsYXRlLFxuICAgICAgdHJhbnNsYXRlVG86IHRyYW5zbGF0ZVRvLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uIChkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0IChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICAgICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4O1xuICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXIgPSBkaXJlY3Rpb247XG4gICAgICBpZiAoIWRpcikge1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSB7IGRpciA9ICduZXh0JzsgfVxuICAgICAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ3ByZXYnOyB9XG4gICAgICAgIGVsc2UgeyBkaXIgPSAncmVzZXQnOyB9XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICAgICAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgICAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kJDEgKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gICAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4O1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICAgICAgdmFyIGRpciA9IGRpcmVjdGlvbjtcbiAgICAgIGlmICghZGlyKSB7XG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ25leHQnOyB9XG4gICAgICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgeyBkaXIgPSAncHJldic7IH1cbiAgICAgICAgZWxzZSB7IGRpciA9ICdyZXNldCc7IH1cbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcblxuICAgICAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgICAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zaXRpb24kMSA9IHtcbiAgICAgIHNldFRyYW5zaXRpb246IHNldFRyYW5zaXRpb24sXG4gICAgICB0cmFuc2l0aW9uU3RhcnQ6IHRyYW5zaXRpb25TdGFydCxcbiAgICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQkMSxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2xpZGVUbyAoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgICB2YXIgb2JqO1xuXG4gICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IDA7XG4gICAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZUluZGV4ID0gaW5kZXg7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHsgc2xpZGVJbmRleCA9IDA7IH1cblxuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkO1xuICAgICAgdmFyIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleDtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG4gICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gICAgICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHsgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTsgfVxuXG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG5cbiAgICAgIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gICAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCkgPj0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgeyBkaXJlY3Rpb24gPSAnbmV4dCc7IH1cbiAgICAgIGVsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgeyBkaXJlY3Rpb24gPSAncHJldic7IH1cbiAgICAgIGVsc2UgeyBkaXJlY3Rpb24gPSAncmVzZXQnOyB9XG5cblxuICAgICAgLy8gVXBkYXRlIEluZGV4XG4gICAgICBpZiAoKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB8fCAoIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gVXBkYXRlIEhlaWdodFxuICAgICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHZhciBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIHZhciB0ID0gLXRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIHQgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbygoIG9iaiA9IHt9LCBvYmpbaXNIID8gJ2xlZnQnIDogJ3RvcCddID0gdCwgb2JqLmJlaGF2aW9yID0gJ3Ntb290aCcsIG9iaiApKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpZGVUb0xvb3AgKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSAwO1xuICAgICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBuZXdJbmRleCA9IGluZGV4O1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgICBmdW5jdGlvbiBzbGlkZU5leHQgKHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZztcbiAgICAgIHZhciBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAoYW5pbWF0aW5nKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgICBmdW5jdGlvbiBzbGlkZVByZXYgKHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZztcbiAgICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIGlmIChhbmltYXRpbmcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgfVxuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA8IDApIHsgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpOyB9XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gICAgICB9XG4gICAgICB2YXIgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBub3JtYWxpemUodmFsKTsgfSk7XG4gICAgICB2YXIgbm9ybWFsaXplZFNsaWRlc0dyaWQgPSBzbGlkZXNHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBub3JtYWxpemUodmFsKTsgfSk7XG5cbiAgICAgIHZhciBjdXJyZW50U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpXTtcbiAgICAgIHZhciBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gICAgICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICAgICAgaWYgKCFwcmV2U25hcCAmJiBub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHsgcHJldlNuYXAgPSBzbmFwOyB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZJbmRleDtcbiAgICAgIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgICAgIGlmIChwcmV2SW5kZXggPCAwKSB7IHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgICBmdW5jdGlvbiBzbGlkZVJlc2V0IChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgICBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdCAoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICAgICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgICAgaWYgKCB0aHJlc2hvbGQgPT09IHZvaWQgMCApIHRocmVzaG9sZCA9IDAuNTtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gICAgICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAgICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIG9uIG9yIGFmdGVyIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAgICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICAgICAgdmFyIGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgICAgIHZhciBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICAgICAgaWYgKCh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCkgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAgICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgICAgIHZhciBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICAgICAgdmFyIGN1cnJlbnRTbmFwJDEgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICAgICAgaWYgKCh0cmFuc2xhdGUgLSBwcmV2U25hcCkgPD0gKGN1cnJlbnRTbmFwJDEgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuXG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuXG4gICAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgdmFyIHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgICB2YXIgcmVhbEluZGV4O1xuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7IHJldHVybjsgfVxuICAgICAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gKHNsaWRlc1BlclZpZXcgLyAyKSlcbiAgICAgICAgICAgIHx8IChzbGlkZVRvSW5kZXggPiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSArIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilcIikpXG4gICAgICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICAgICAgVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpXCIpKVxuICAgICAgICAgICAgLmVxKDApXG4gICAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICAgIFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2xpZGUgPSB7XG4gICAgICBzbGlkZVRvOiBzbGlkZVRvLFxuICAgICAgc2xpZGVUb0xvb3A6IHNsaWRlVG9Mb29wLFxuICAgICAgc2xpZGVOZXh0OiBzbGlkZU5leHQsXG4gICAgICBzbGlkZVByZXY6IHNsaWRlUHJldixcbiAgICAgIHNsaWRlUmVzZXQ6IHNsaWRlUmVzZXQsXG4gICAgICBzbGlkZVRvQ2xvc2VzdDogc2xpZGVUb0Nsb3Nlc3QsXG4gICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBzbGlkZVRvQ2xpY2tlZFNsaWRlLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb29wQ3JlYXRlICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpKS5yZW1vdmUoKTtcblxuICAgICAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuXG4gICAgICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICAgICAgdmFyIGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gKHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGJsYW5rTm9kZSA9ICQoZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hZGRDbGFzcygoKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpKSk7XG4gICAgICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiAhcGFyYW1zLmxvb3BlZFNsaWRlcykgeyBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDsgfVxuXG4gICAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICAgICAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICAgICAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICAgICAgc2xpZGVzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgICAgICB2YXIgc2xpZGUgPSAkKGVsKTtcbiAgICAgICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykgeyBhcHBlbmRTbGlkZXMucHVzaChlbCk7IH1cbiAgICAgICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgeyBwcmVwZW5kU2xpZGVzLnB1c2goZWwpOyB9XG4gICAgICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpJDFdLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkkMiA9IHByZXBlbmRTbGlkZXMubGVuZ3RoIC0gMTsgaSQyID49IDA7IGkkMiAtPSAxKSB7XG4gICAgICAgICR3cmFwcGVyRWwucHJlcGVuZCgkKHByZXBlbmRTbGlkZXNbaSQyXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9vcEZpeCAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcblxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgIHZhciBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgICAgIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dDtcbiAgICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIG5ld0luZGV4O1xuICAgICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG5cbiAgICAgIHZhciBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgIHZhciBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcblxuICAgICAgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgICAgIG5ld0luZGV4ID0gKHNsaWRlcy5sZW5ndGggLSAobG9vcGVkU2xpZGVzICogMykpICsgYWN0aXZlSW5kZXg7XG4gICAgICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICAgICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICAgICAgbmV3SW5kZXggPSAtc2xpZGVzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgbG9vcGVkU2xpZGVzO1xuICAgICAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgICAgIHZhciBzbGlkZUNoYW5nZWQkMSA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChzbGlkZUNoYW5nZWQkMSAmJiBkaWZmICE9PSAwKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gICAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvb3BEZXN0cm95ICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIiwuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlQmxhbmtDbGFzcykpKS5yZW1vdmUoKTtcbiAgICAgIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgIH1cblxuICAgIHZhciBsb29wID0ge1xuICAgICAgbG9vcENyZWF0ZTogbG9vcENyZWF0ZSxcbiAgICAgIGxvb3BGaXg6IGxvb3BGaXgsXG4gICAgICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3ksXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IgKG1vdmluZykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoU3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgZWwgPSBzd2lwZXIuZWw7XG4gICAgICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gICAgICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLXdlYmtpdC1ncmFiYmluZycgOiAnLXdlYmtpdC1ncmFiJztcbiAgICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gICAgICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvciAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChTdXBwb3J0LnRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIGdyYWJDdXJzb3IgPSB7XG4gICAgICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICAgICAgdW5zZXRHcmFiQ3Vyc29yOiB1bnNldEdyYWJDdXJzb3IsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFwcGVuZFNsaWRlIChzbGlkZXMpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHsgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTsgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBlbmRTbGlkZSAoc2xpZGVzKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHsgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7IH1cbiAgICAgICAgfVxuICAgICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTbGlkZSAoaW5kZXgsIHNsaWRlcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgICAgfVxuICAgICAgdmFyIGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcblxuICAgICAgdmFyIHNsaWRlc0J1ZmZlciA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICAgICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBzbGlkZXMubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaSQxXSkgeyAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaSQxXSk7IH1cbiAgICAgICAgfVxuICAgICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IGkkMiArPSAxKSB7XG4gICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpJDJdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTbGlkZSAoc2xpZGVzSW5kZXhlcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgICAgIHZhciBpbmRleFRvUmVtb3ZlO1xuXG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHsgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTsgfVxuICAgICAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIHsgbmV3QWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgICB9XG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSB7IHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7IH1cbiAgICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgeyBuZXdBY3RpdmVJbmRleCAtPSAxOyB9XG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICB2YXIgc2xpZGVzSW5kZXhlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbiAgICB9XG5cbiAgICB2YXIgbWFuaXB1bGF0aW9uID0ge1xuICAgICAgYXBwZW5kU2xpZGU6IGFwcGVuZFNsaWRlLFxuICAgICAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUsXG4gICAgICBhZGRTbGlkZTogYWRkU2xpZGUsXG4gICAgICByZW1vdmVTbGlkZTogcmVtb3ZlU2xpZGUsXG4gICAgICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlcyxcbiAgICB9O1xuXG4gICAgdmFyIERldmljZSA9IChmdW5jdGlvbiBEZXZpY2UoKSB7XG4gICAgICB2YXIgcGxhdGZvcm0gPSB3aW4ubmF2aWdhdG9yLnBsYXRmb3JtO1xuICAgICAgdmFyIHVhID0gd2luLm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICAgIHZhciBkZXZpY2UgPSB7XG4gICAgICAgIGlvczogZmFsc2UsXG4gICAgICAgIGFuZHJvaWQ6IGZhbHNlLFxuICAgICAgICBhbmRyb2lkQ2hyb21lOiBmYWxzZSxcbiAgICAgICAgZGVza3RvcDogZmFsc2UsXG4gICAgICAgIGlwaG9uZTogZmFsc2UsXG4gICAgICAgIGlwb2Q6IGZhbHNlLFxuICAgICAgICBpcGFkOiBmYWxzZSxcbiAgICAgICAgZWRnZTogZmFsc2UsXG4gICAgICAgIGllOiBmYWxzZSxcbiAgICAgICAgZmlyZWZveDogZmFsc2UsXG4gICAgICAgIG1hY29zOiBmYWxzZSxcbiAgICAgICAgd2luZG93czogZmFsc2UsXG4gICAgICAgIGNvcmRvdmE6ICEhKHdpbi5jb3Jkb3ZhIHx8IHdpbi5waG9uZWdhcCksXG4gICAgICAgIHBob25lZ2FwOiAhISh3aW4uY29yZG92YSB8fCB3aW4ucGhvbmVnYXApLFxuICAgICAgICBlbGVjdHJvbjogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICB2YXIgc2NyZWVuV2lkdGggPSB3aW4uc2NyZWVuLndpZHRoO1xuICAgICAgdmFyIHNjcmVlbkhlaWdodCA9IHdpbi5zY3JlZW4uaGVpZ2h0O1xuXG4gICAgICB2YXIgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICAgICAgdmFyIGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICAgICAgdmFyIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICAgICAgdmFyIGllID0gdWEuaW5kZXhPZignTVNJRSAnKSA+PSAwIHx8IHVhLmluZGV4T2YoJ1RyaWRlbnQvJykgPj0gMDtcbiAgICAgIHZhciBlZGdlID0gdWEuaW5kZXhPZignRWRnZS8nKSA+PSAwO1xuICAgICAgdmFyIGZpcmVmb3ggPSB1YS5pbmRleE9mKCdHZWNrby8nKSA+PSAwICYmIHVhLmluZGV4T2YoJ0ZpcmVmb3gvJykgPj0gMDtcbiAgICAgIHZhciB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gICAgICB2YXIgZWxlY3Ryb24gPSB1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2VsZWN0cm9uJykgPj0gMDtcbiAgICAgIHZhciBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gICAgICAvLyBpUGFkT3MgMTMgZml4XG4gICAgICBpZiAoIWlwYWRcbiAgICAgICAgJiYgbWFjb3NcbiAgICAgICAgJiYgU3VwcG9ydC50b3VjaFxuICAgICAgICAmJiAoXG4gICAgICAgICAgKHNjcmVlbldpZHRoID09PSAxMDI0ICYmIHNjcmVlbkhlaWdodCA9PT0gMTM2NikgLy8gUHJvIDEyLjlcbiAgICAgICAgICB8fCAoc2NyZWVuV2lkdGggPT09IDgzNCAmJiBzY3JlZW5IZWlnaHQgPT09IDExOTQpIC8vIFBybyAxMVxuICAgICAgICAgIHx8IChzY3JlZW5XaWR0aCA9PT0gODM0ICYmIHNjcmVlbkhlaWdodCA9PT0gMTExMikgLy8gUHJvIDEwLjVcbiAgICAgICAgICB8fCAoc2NyZWVuV2lkdGggPT09IDc2OCAmJiBzY3JlZW5IZWlnaHQgPT09IDEwMjQpIC8vIG90aGVyXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgICAgICBtYWNvcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBkZXZpY2UuaWUgPSBpZTtcbiAgICAgIGRldmljZS5lZGdlID0gZWRnZTtcbiAgICAgIGRldmljZS5maXJlZm94ID0gZmlyZWZveDtcblxuICAgICAgLy8gQW5kcm9pZFxuICAgICAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICAgICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgICAgICBkZXZpY2Uub3NWZXJzaW9uID0gYW5kcm9pZFsyXTtcbiAgICAgICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICAgICAgICBkZXZpY2UuYW5kcm9pZENocm9tZSA9IHVhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignY2hyb21lJykgPj0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgICAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIGlPU1xuICAgICAgaWYgKGlwaG9uZSAmJiAhaXBvZCkge1xuICAgICAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBob25lWzJdLnJlcGxhY2UoL18vZywgJy4nKTtcbiAgICAgICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXBhZCkge1xuICAgICAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgICAgIGRldmljZS5pcGFkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpcG9kKSB7XG4gICAgICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcG9kWzNdID8gaXBvZFszXS5yZXBsYWNlKC9fL2csICcuJykgOiBudWxsO1xuICAgICAgICBkZXZpY2UuaXBvZCA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBpT1MgOCsgY2hhbmdlZCBVQVxuICAgICAgaWYgKGRldmljZS5pb3MgJiYgZGV2aWNlLm9zVmVyc2lvbiAmJiB1YS5pbmRleE9mKCdWZXJzaW9uLycpID49IDApIHtcbiAgICAgICAgaWYgKGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKVswXSA9PT0gJzEwJykge1xuICAgICAgICAgIGRldmljZS5vc1ZlcnNpb24gPSB1YS50b0xvd2VyQ2FzZSgpLnNwbGl0KCd2ZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV2Vidmlld1xuICAgICAgZGV2aWNlLndlYlZpZXcgPSAhISgoaXBob25lIHx8IGlwYWQgfHwgaXBvZCkgJiYgKHVhLm1hdGNoKC8uKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kpIHx8IHdpbi5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpXG4gICAgICAgIHx8ICh3aW4ubWF0Y2hNZWRpYSAmJiB3aW4ubWF0Y2hNZWRpYSgnKGRpc3BsYXktbW9kZTogc3RhbmRhbG9uZSknKS5tYXRjaGVzKTtcbiAgICAgIGRldmljZS53ZWJ2aWV3ID0gZGV2aWNlLndlYlZpZXc7XG4gICAgICBkZXZpY2Uuc3RhbmRhbG9uZSA9IGRldmljZS53ZWJWaWV3O1xuXG4gICAgICAvLyBEZXNrdG9wXG4gICAgICBkZXZpY2UuZGVza3RvcCA9ICEoZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCkgfHwgZWxlY3Ryb247XG4gICAgICBpZiAoZGV2aWNlLmRlc2t0b3ApIHtcbiAgICAgICAgZGV2aWNlLmVsZWN0cm9uID0gZWxlY3Ryb247XG4gICAgICAgIGRldmljZS5tYWNvcyA9IG1hY29zO1xuICAgICAgICBkZXZpY2Uud2luZG93cyA9IHdpbmRvd3M7XG4gICAgICAgIGlmIChkZXZpY2UubWFjb3MpIHtcbiAgICAgICAgICBkZXZpY2Uub3MgPSAnbWFjb3MnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXZpY2Uud2luZG93cykge1xuICAgICAgICAgIGRldmljZS5vcyA9ICd3aW5kb3dzJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQaXhlbCBSYXRpb1xuICAgICAgZGV2aWNlLnBpeGVsUmF0aW8gPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgICAvLyBFeHBvcnQgb2JqZWN0XG4gICAgICByZXR1cm4gZGV2aWNlO1xuICAgIH0oKSk7XG5cbiAgICBmdW5jdGlvbiBvblRvdWNoU3RhcnQgKGV2ZW50KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcblxuICAgICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZSA9IGV2ZW50O1xuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9XG4gICAgICB2YXIgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgICAgIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgICAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHN3aXBlci53cmFwcGVyRWwpLmxlbmd0aCkgeyByZXR1cm47IH1cbiAgICAgIH1cbiAgICAgIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gICAgICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSB7IHJldHVybjsgfVxuICAgICAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiAoXCIuXCIgKyAocGFyYW1zLm5vU3dpcGluZ0NsYXNzKSkpWzBdKSB7XG4gICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICAgICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgeyByZXR1cm47IH1cbiAgICAgIH1cblxuICAgICAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIHRvdWNoZXMuY3VycmVudFkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICB2YXIgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gICAgICAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICAgICAgdmFyIGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgICAgIHZhciBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG4gICAgICBpZiAoXG4gICAgICAgIGVkZ2VTd2lwZURldGVjdGlvblxuICAgICAgICAmJiAoKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQpXG4gICAgICAgIHx8IChzdGFydFggPj0gd2luLnNjcmVlbi53aWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBVdGlscy5leHRlbmQoZGF0YSwge1xuICAgICAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgfSk7XG5cbiAgICAgIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICAgICAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gVXRpbHMubm93KCk7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7IH1cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICB2YXIgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICBpZiAoJHRhcmdldEVsLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSkgeyBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkb2MuYWN0aXZlRWxlbWVudFxuICAgICAgICAgICYmICQoZG9jLmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKVxuICAgICAgICAgICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSAkdGFyZ2V0RWxbMF1cbiAgICAgICAgKSB7XG4gICAgICAgICAgZG9jLmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gICAgICAgIGlmIChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUgKGV2ZW50KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfVxuICAgICAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGUudGFyZ2V0VG91Y2hlcyAmJiAoZS50YXJnZXRUb3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF0pO1xuICAgICAgdmFyIHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIHZhciBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG4gICAgICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgICAgICAvLyBpc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvdWNoZXMsIHtcbiAgICAgICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAgICAgLy8gVmVydGljYWxcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgICAgIHx8IChwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgICB8fCAocGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBkb2MuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHtcbiAgICAgICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgICAgIH1cbiAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgICAgIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcblxuICAgICAgdmFyIGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICAgICAgdmFyIGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydCgoTWF0aC5wb3coIGRpZmZYLCAyICkpICsgKE1hdGgucG93KCBkaWZmWSwgMiApKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgeyByZXR1cm47IH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgdG91Y2hBbmdsZTtcbiAgICAgICAgaWYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKSkge1xuICAgICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBpZiAoKGRpZmZYICogZGlmZlgpICsgKGRpZmZZICogZGlmZlkpID49IDI1KSB7XG4gICAgICAgICAgICB0b3VjaEFuZ2xlID0gKE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogKDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyaWdnZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCcpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgICAgICAvLyBHcmFiIEN1cnNvclxuICAgICAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgICAgIHZhciBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgICAgIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG5cbiAgICAgIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gICAgICBpZiAocnRsKSB7IGRpZmYgPSAtZGlmZjsgfVxuXG4gICAgICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuXG4gICAgICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gICAgICB2YXIgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgICAgIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgICAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICAgICAgfVxuICAgICAgaWYgKChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IChzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxKSArIChNYXRoLnBvdyggKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiksIHJlc2lzdGFuY2VSYXRpbyApKTsgfVxuICAgICAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHsgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEpIC0gKE1hdGgucG93KCAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpLCByZXNpc3RhbmNlUmF0aW8gKSk7IH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICAgICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIH1cblxuXG4gICAgICAvLyBUaHJlc2hvbGRcbiAgICAgIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSB7IHJldHVybjsgfVxuXG4gICAgICAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAvLyBWZWxvY2l0eVxuICAgICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICAgICAgdGltZTogZGF0YS50b3VjaFN0YXJ0VGltZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgICAgIHRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gICAgICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaEVuZCAoZXZlbnQpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuXG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkO1xuICAgICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfVxuICAgICAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgICAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICAgICAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICAgICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaW1lIGRpZmZcbiAgICAgIHZhciB0b3VjaEVuZFRpbWUgPSBVdGlscy5ub3coKTtcbiAgICAgIHZhciB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgICAgIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICAgICAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcbiAgICAgICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmICh0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUpIDwgMzAwKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRhdGEubGFzdENsaWNrVGltZSA9IFV0aWxzLm5vdygpO1xuICAgICAgVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHsgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlOyB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG5cbiAgICAgIHZhciBjdXJyZW50UG9zO1xuICAgICAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICAgICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgICAgICB2YXIgdmVsb2NpdHlFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcblxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSAvPSAyO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cbiAgICAgICAgICAgIGlmICh0aW1lID4gMTUwIHx8IChVdGlscy5ub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSkgPiAzMDApIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ICo9IHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbztcblxuICAgICAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuXG4gICAgICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICAgICAgaWYgKHJ0bCkgeyBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjsgfVxuXG4gICAgICAgICAgdmFyIGRvQm91bmNlID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICAgICAgdmFyIGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICAgICAgdmFyIG5lZWRzTG9vcEZpeDtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7IG5lZWRzTG9vcEZpeCA9IHRydWU7IH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7IG5lZWRzTG9vcEZpeCA9IHRydWU7IH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgdmFyIG5leHRTbGlkZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICAgICAgc3dpcGVyLm9uY2UoJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICAgICAgaWYgKHN3aXBlci52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgICAgIC8vIElmIGZyZWVNb2RlU3RpY2t5IGlzIGFjdGl2ZSBhbmQgdGhlIHVzZXIgZW5kcyBhIHN3aXBlIHdpdGggYSBzbG93LXZlbG9jaXR5XG4gICAgICAgICAgICAgIC8vIGV2ZW50LCB0aGVuIGR1cmF0aW9ucyBjYW4gYmUgMjArIHNlY29uZHMgdG8gc2xpZGUgb25lIChvciB6ZXJvISkgc2xpZGVzLlxuICAgICAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAgICAgLy8gbGltaXQgc2luZ2xlLXNsaWRlIHN3aXBlcyB0byB0aGUgZGVmYXVsdCBzbGlkZSBkdXJhdGlvbi4gVGhpcyBhbHNvIGhhcyB0aGVcbiAgICAgICAgICAgICAgLy8gbmljZSBzaWRlIGVmZmVjdCBvZiBtYXRjaGluZyBzbGlkZSBzcGVlZCBpZiB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBiZWZvcmVcbiAgICAgICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAgICAgLy8gRm9yIGZhc3RlciBzd2lwZXMsIGFsc28gYXBwbHkgbGltaXRzIChhbGJlaXQgaGlnaGVyIG9uZXMpLlxuICAgICAgICAgICAgICB2YXIgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgICAgICB2YXIgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgICAgICAgICAgaWYgKG1vdmVEaXN0YW5jZSA8IGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDEuNTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBkb0JvdW5jZSkge1xuICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcmFtcy5mcmVlTW9kZU1vbWVudHVtIHx8IHRpbWVEaWZmID49IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gICAgICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgICAgIHZhciBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAoaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSkge1xuICAgICAgICB2YXIgaW5jcmVtZW50JDEgPSAoaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50JDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudCQxXSkge1xuICAgICAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudCQxXSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gICAgICB2YXIgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gICAgICB2YXIgaW5jcmVtZW50ID0gKHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgICAgIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgeyBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpOyB9XG4gICAgICAgICAgZWxzZSB7IHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgICBpZiAocmF0aW8gPiAoMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pKSB7IHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7IH1cbiAgICAgICAgICBlbHNlIHsgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTsgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICAgICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICAgICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25SZXNpemUgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIGVsID0gc3dpcGVyLmVsO1xuXG4gICAgICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgbG9ja3NcbiAgICAgIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dDtcbiAgICAgIHZhciBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcblxuICAgICAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuXG4gICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIH1cbiAgICAgIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2Nyb2xsICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChydGxUcmFuc2xhdGUpIHtcbiAgICAgICAgICBzd2lwZXIudHJhbnNsYXRlID0gKCh3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGgpIC0gd3JhcHBlckVsLnNjcm9sbExlZnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IC0wKSB7IHN3aXBlci50cmFuc2xhdGUgPSAwOyB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgdmFyIG5ld1Byb2dyZXNzO1xuICAgICAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gKHRyYW5zbGF0ZXNEaWZmKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBkdW1teUV2ZW50QXR0YWNoZWQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG4gICAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cztcbiAgICAgIHZhciBlbCA9IHN3aXBlci5lbDtcbiAgICAgIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gICAgICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgICAgIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgICAgIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuXG4gICAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgU3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogY2FwdHVyZSB9IDogY2FwdHVyZSk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZHVtbXlFdmVudExpc3RlbmVyKTtcbiAgICAgICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIURldmljZS5pb3MgJiYgIURldmljZS5hbmRyb2lkKSB8fCAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIVN1cHBvcnQudG91Y2ggJiYgRGV2aWNlLmlvcykpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgICAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgd3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2l6ZSBoYW5kbGVyXG4gICAgICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgICAgIHN3aXBlci5vbigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIub24oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cztcbiAgICAgIHZhciBlbCA9IHN3aXBlci5lbDtcbiAgICAgIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gICAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgU3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gICAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNpemUgaGFuZGxlclxuICAgICAgc3dpcGVyLm9mZigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSk7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50cyA9IHtcbiAgICAgIGF0dGFjaEV2ZW50czogYXR0YWNoRXZlbnRzLFxuICAgICAgZGV0YWNoRXZlbnRzOiBkZXRhY2hFdmVudHMsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBzd2lwZXIuaW5pdGlhbGl6ZWQ7XG4gICAgICB2YXIgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlczsgaWYgKCBsb29wZWRTbGlkZXMgPT09IHZvaWQgMCApIGxvb3BlZFNsaWRlcyA9IDA7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICAgdmFyIGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICAgICAgaWYgKCFicmVha3BvaW50cyB8fCAoYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkpIHsgcmV0dXJuOyB9XG5cbiAgICAgIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gICAgICB2YXIgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzKTtcblxuICAgICAgaWYgKGJyZWFrcG9pbnQgJiYgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ICE9PSBicmVha3BvaW50KSB7XG4gICAgICAgIHZhciBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGJyZWFrcG9pbnRPbmx5UGFyYW1zKSB7XG4gICAgICAgICAgWydzbGlkZXNQZXJWaWV3JywgJ3NwYWNlQmV0d2VlbicsICdzbGlkZXNQZXJHcm91cCcsICdzbGlkZXNQZXJHcm91cFNraXAnLCAnc2xpZGVzUGVyQ29sdW1uJ10uZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbVZhbHVlID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnICYmIChwYXJhbVZhbHVlID09PSAnQVVUTycgfHwgcGFyYW1WYWx1ZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycpIHtcbiAgICAgICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VGbG9hdChwYXJhbVZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlSW50KHBhcmFtVmFsdWUsIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICAgICAgICB2YXIgd2FzTXVsdGlSb3cgPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcbiAgICAgICAgdmFyIGlzTXVsdGlSb3cgPSBicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgICAgIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgICAgICAgICRlbC5yZW1vdmVDbGFzcygoKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwibXVsdGlyb3cgXCIgKyAocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJtdWx0aXJvdy1jb2x1bW5cIikpO1xuICAgICAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAgICAgJGVsLmFkZENsYXNzKCgocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJtdWx0aXJvd1wiKSk7XG4gICAgICAgICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgICAgICRlbC5hZGRDbGFzcygoKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwibXVsdGlyb3ctY29sdW1uXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcblxuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICAgICAgaWYgKG5lZWRzUmVMb29wICYmIGluaXRpYWxpemVkKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzKSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludCAoYnJlYWtwb2ludHMpIHtcbiAgICAgIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGhcbiAgICAgIGlmICghYnJlYWtwb2ludHMpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgICAgdmFyIGJyZWFrcG9pbnQgPSBmYWxzZTtcblxuICAgICAgdmFyIHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAoZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgICAgIHZhciBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB3aW4uaW5uZXJIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIHBvaW50OiBwb2ludCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBwb2ludCwgcG9pbnQ6IHBvaW50IH07XG4gICAgICB9KTtcblxuICAgICAgcG9pbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKTsgfSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcmVmID0gcG9pbnRzW2ldO1xuICAgICAgICB2YXIgcG9pbnQgPSByZWYucG9pbnQ7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlIDw9IHdpbi5pbm5lcldpZHRoKSB7XG4gICAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4JztcbiAgICB9XG5cbiAgICB2YXIgYnJlYWtwb2ludHMgPSB7IHNldEJyZWFrcG9pbnQ6IHNldEJyZWFrcG9pbnQsIGdldEJyZWFrcG9pbnQ6IGdldEJyZWFrcG9pbnQgfTtcblxuICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICAgdmFyIHN1ZmZpeGVzID0gW107XG5cbiAgICAgIHN1ZmZpeGVzLnB1c2goJ2luaXRpYWxpemVkJyk7XG4gICAgICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgIHN1ZmZpeGVzLnB1c2goJ2ZyZWUtbW9kZScpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN1ZmZpeGVzLnB1c2goJ2F1dG9oZWlnaHQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgc3VmZml4ZXMucHVzaCgncnRsJyk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgICAgc3VmZml4ZXMucHVzaCgnbXVsdGlyb3cnKTtcbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93LWNvbHVtbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoRGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgICAgc3VmZml4ZXMucHVzaCgnYW5kcm9pZCcpO1xuICAgICAgfVxuICAgICAgaWYgKERldmljZS5pb3MpIHtcbiAgICAgICAgc3VmZml4ZXMucHVzaCgnaW9zJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzdWZmaXhlcy5wdXNoKCdjc3MtbW9kZScpO1xuICAgICAgfVxuXG4gICAgICBzdWZmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdWZmaXgpIHtcbiAgICAgICAgY2xhc3NOYW1lcy5wdXNoKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgc3VmZml4KTtcbiAgICAgIH0pO1xuXG4gICAgICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG5cbiAgICAgICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSB7IGFkZENsYXNzZXM6IGFkZENsYXNzZXMsIHJlbW92ZUNsYXNzZXM6IHJlbW92ZUNsYXNzZXMgfTtcblxuICAgIGZ1bmN0aW9uIGxvYWRJbWFnZSAoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGltYWdlO1xuICAgICAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7IGNhbGxiYWNrKCk7IH1cbiAgICAgIH1cbiAgICAgIHZhciBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gICAgICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICBpbWFnZSA9IG5ldyB3aW4uSW1hZ2UoKTtcbiAgICAgICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSBvblJlYWR5O1xuICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgaW1hZ2Uuc2l6ZXMgPSBzaXplcztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uUmVhZHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICAgICAgb25SZWFkeSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZWxvYWRJbWFnZXMgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcbiAgICAgIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSB7IHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTsgfVxuICAgICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSB7IHN3aXBlci51cGRhdGUoKTsgfVxuICAgICAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgICAgICBzd2lwZXIubG9hZEltYWdlKFxuICAgICAgICAgIGltYWdlRWwsXG4gICAgICAgICAgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSxcbiAgICAgICAgICBpbWFnZUVsLnNyY3NldCB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JyksXG4gICAgICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIG9uUmVhZHlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaW1hZ2VzID0ge1xuICAgICAgbG9hZEltYWdlOiBsb2FkSW1hZ2UsXG4gICAgICBwcmVsb2FkSW1hZ2VzOiBwcmVsb2FkSW1hZ2VzLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gICAgICB2YXIgbGFzdFNsaWRlUG9zaXRpb24gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCA+IDAgJiYgKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiAqIChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpKSArICgoc3dpcGVyLnNsaWRlc1swXSkub2Zmc2V0V2lkdGgpICogc3dpcGVyLnNsaWRlcy5sZW5ndGgpO1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgJiYgbGFzdFNsaWRlUG9zaXRpb24pIHtcbiAgICAgICAgc3dpcGVyLmlzTG9ja2VkID0gbGFzdFNsaWRlUG9zaXRpb24gPD0gc3dpcGVyLnNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICAgICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHsgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpOyB9XG5cbiAgICAgIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICAgICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gICAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbikgeyBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGVja092ZXJmbG93JDEgPSB7IGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3cgfTtcblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIGluaXQ6IHRydWUsXG4gICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgICAgIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgIHNwZWVkOiAzMDAsXG4gICAgICBjc3NNb2RlOiBmYWxzZSxcbiAgICAgIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICAgICAgLy9cbiAgICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG5cbiAgICAgIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgICAgIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gICAgICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuXG4gICAgICAvLyBGcmVlIG1vZGVcbiAgICAgIGZyZWVNb2RlOiBmYWxzZSxcbiAgICAgIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gICAgICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gICAgICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICAgICAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICAgICAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gICAgICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gICAgICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcblxuICAgICAgLy8gQXV0b2hlaWdodFxuICAgICAgYXV0b0hlaWdodDogZmFsc2UsXG5cbiAgICAgIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gICAgICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG5cbiAgICAgIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcblxuICAgICAgLy8gRWZmZWN0c1xuICAgICAgZWZmZWN0OiAnc2xpZGUnLCAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuXG4gICAgICAvLyBTbGlkZXMgZ3JpZFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gICAgICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsIC8vIGluIHB4XG4gICAgICBzbGlkZXNPZmZzZXRBZnRlcjogMCwgLy8gaW4gcHhcbiAgICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gICAgICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuXG4gICAgICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICAgICAgd2F0Y2hPdmVyZmxvdzogZmFsc2UsXG5cbiAgICAgIC8vIFJvdW5kIGxlbmd0aFxuICAgICAgcm91bmRMZW5ndGhzOiBmYWxzZSxcblxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgdG91Y2hSYXRpbzogMSxcbiAgICAgIHRvdWNoQW5nbGU6IDQ1LFxuICAgICAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgICAgIHNob3J0U3dpcGVzOiB0cnVlLFxuICAgICAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgICAgIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICAgICAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gICAgICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gICAgICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gICAgICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcblxuICAgICAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgICAgIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuXG4gICAgICAvLyBSZXNpc3RhbmNlXG4gICAgICByZXNpc3RhbmNlOiB0cnVlLFxuICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuXG4gICAgICAvLyBQcm9ncmVzc1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuXG4gICAgICAvLyBDdXJzb3JcbiAgICAgIGdyYWJDdXJzb3I6IGZhbHNlLFxuXG4gICAgICAvLyBDbGlja3NcbiAgICAgIHByZXZlbnRDbGlja3M6IHRydWUsXG4gICAgICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcblxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICAgICAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcblxuICAgICAgLy8gbG9vcFxuICAgICAgbG9vcDogZmFsc2UsXG4gICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgICAgIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgICAgIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuXG4gICAgICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgICAgIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gICAgICBzd2lwZUhhbmRsZXI6IG51bGwsIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gICAgICBub1N3aXBpbmc6IHRydWUsXG4gICAgICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgICAgIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuXG4gICAgICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcblxuICAgICAgLy8gTlNcbiAgICAgIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsIC8vIE5FV1xuICAgICAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gICAgICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgICAgIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgICAgIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZScsXG4gICAgICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgICAgIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgICAgIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICAgICAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICAgICAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gICAgICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicsXG4gICAgICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG5cbiAgICAgIC8vIENhbGxiYWNrc1xuICAgICAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAgIH07XG5cbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IFwib2ZmXCIgKi9cblxuICAgIHZhciBwcm90b3R5cGVzID0ge1xuICAgICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24kMSxcbiAgICAgIHNsaWRlOiBzbGlkZSxcbiAgICAgIGxvb3A6IGxvb3AsXG4gICAgICBncmFiQ3Vyc29yOiBncmFiQ3Vyc29yLFxuICAgICAgbWFuaXB1bGF0aW9uOiBtYW5pcHVsYXRpb24sXG4gICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICAgIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3ckMSxcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICBpbWFnZXM6IGltYWdlcyxcbiAgICB9O1xuXG4gICAgdmFyIGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcblxuICAgIHZhciBTd2lwZXIgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTd2lwZXJDbGFzcykge1xuICAgICAgZnVuY3Rpb24gU3dpcGVyKCkge1xuICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgICAgIHZhciBlbDtcbiAgICAgICAgdmFyIHBhcmFtcztcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoYXNzaWduID0gYXJncywgZWwgPSBhc3NpZ25bMF0sIHBhcmFtcyA9IGFzc2lnblsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXJhbXMpIHsgcGFyYW1zID0ge307IH1cblxuICAgICAgICBwYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG4gICAgICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSB7IHBhcmFtcy5lbCA9IGVsOyB9XG5cbiAgICAgICAgU3dpcGVyQ2xhc3MuY2FsbCh0aGlzLCBwYXJhbXMpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3RvdHlwZUdyb3VwKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goZnVuY3Rpb24gKHByb3RvTWV0aG9kKSB7XG4gICAgICAgICAgICBpZiAoIVN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdKSB7XG4gICAgICAgICAgICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc3dpcGVyLm1vZHVsZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgICAgIHZhciBtb2R1bGUgPSBzd2lwZXIubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICAgICAgdmFyIG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZS5wYXJhbXNbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0geyBlbmFibGVkOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSB7IHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0geyBlbmFibGVkOiBmYWxzZSB9OyB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgICAgICB2YXIgc3dpcGVyUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgICAgIHN3aXBlci51c2VNb2R1bGVzUGFyYW1zKHN3aXBlclBhcmFtcyk7XG5cbiAgICAgICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgICAgICBzd2lwZXIucGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAgICAgLy8gU2F2ZSBEb20gbGliXG4gICAgICAgIHN3aXBlci4kID0gJDtcblxuICAgICAgICAvLyBGaW5kIGVsXG4gICAgICAgIHZhciAkZWwgPSAkKHN3aXBlci5wYXJhbXMuZWwpO1xuICAgICAgICBlbCA9ICRlbFswXTtcblxuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBzd2lwZXJzID0gW107XG4gICAgICAgICAgJGVsLmVhY2goZnVuY3Rpb24gKGluZGV4LCBjb250YWluZXJFbCkge1xuICAgICAgICAgICAgdmFyIG5ld1BhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgcGFyYW1zLCB7IGVsOiBjb250YWluZXJFbCB9KTtcbiAgICAgICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgICAgICAkZWwuZGF0YSgnc3dpcGVyJywgc3dpcGVyKTtcblxuICAgICAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICAgICAgdmFyICR3cmFwcGVyRWw7XG4gICAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICAgICR3cmFwcGVyRWwgPSAkKGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpKSkpO1xuICAgICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybiAkZWwuY2hpbGRyZW4ob3B0aW9ucyk7IH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHdyYXBwZXJFbCA9ICRlbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXh0ZW5kIFN3aXBlclxuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgJGVsOiAkZWwsXG4gICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgICR3cmFwcGVyRWw6ICR3cmFwcGVyRWwsXG4gICAgICAgICAgd3JhcHBlckVsOiAkd3JhcHBlckVsWzBdLFxuXG4gICAgICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuXG4gICAgICAgICAgLy8gU2xpZGVzXG4gICAgICAgICAgc2xpZGVzOiAkKCksXG4gICAgICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gUlRMXG4gICAgICAgICAgcnRsOiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94JyxcblxuICAgICAgICAgIC8vIEluZGV4ZXNcbiAgICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgICByZWFsSW5kZXg6IDAsXG5cbiAgICAgICAgICAvL1xuICAgICAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgICAgIGlzRW5kOiBmYWxzZSxcblxuICAgICAgICAgIC8vIFByb3BzXG4gICAgICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG5cbiAgICAgICAgICAvLyBMb2Nrc1xuICAgICAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuXG4gICAgICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICAgICAgdG91Y2hFdmVudHM6IChmdW5jdGlvbiB0b3VjaEV2ZW50cygpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXTtcbiAgICAgICAgICAgIHZhciBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcbiAgICAgICAgICAgIGlmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA9IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgICAgICBtb3ZlOiB0b3VjaFsxXSxcbiAgICAgICAgICAgICAgZW5kOiB0b3VjaFsyXSxcbiAgICAgICAgICAgICAgY2FuY2VsOiB0b3VjaFszXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgICAgICBzdGFydDogZGVza3RvcFswXSxcbiAgICAgICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICAgICAgZW5kOiBkZXNrdG9wWzJdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBTdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICAgICAgfSgpKSxcbiAgICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gICAgICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgICAgIGxhc3RDbGlja1RpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGlzVG91Y2hFdmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLy8gQ2xpY2tzXG4gICAgICAgICAgYWxsb3dDbGljazogdHJ1ZSxcblxuICAgICAgICAgIC8vIFRvdWNoZXNcbiAgICAgICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcblxuICAgICAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgICAgICBkaWZmOiAwLFxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvLyBJbWFnZXNcbiAgICAgICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgICAgIGltYWdlc0xvYWRlZDogMCxcblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICAgICAgc3dpcGVyLnVzZU1vZHVsZXMoKTtcblxuICAgICAgICAvLyBJbml0XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgICAgICBzd2lwZXIuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgICAgICByZXR1cm4gc3dpcGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIFN3aXBlckNsYXNzICkgU3dpcGVyLl9fcHJvdG9fXyA9IFN3aXBlckNsYXNzO1xuICAgICAgU3dpcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFN3aXBlckNsYXNzICYmIFN3aXBlckNsYXNzLnByb3RvdHlwZSApO1xuICAgICAgU3dpcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN3aXBlcjtcblxuICAgICAgdmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgZXh0ZW5kZWREZWZhdWx0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxDbGFzczogeyBjb25maWd1cmFibGU6IHRydWUgfSwkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICAgIFN3aXBlci5wcm90b3R5cGUuc2xpZGVzUGVyVmlld0R5bmFtaWMgPSBmdW5jdGlvbiBzbGlkZXNQZXJWaWV3RHluYW1pYyAoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgICAgIHZhciBzd2lwZXJTaXplID0gc3dpcGVyLnNpemU7XG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgdmFyIHNwdiA9IDE7XG4gICAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgdmFyIGJyZWFrTG9vcDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgeyBicmVha0xvb3AgPSB0cnVlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGkkMSA9IGFjdGl2ZUluZGV4IC0gMTsgaSQxID49IDA7IGkkMSAtPSAxKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVzW2kkMV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2kkMV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIHsgYnJlYWtMb29wID0gdHJ1ZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKHZhciBpJDIgPSBhY3RpdmVJbmRleCArIDE7IGkkMiA8IHNsaWRlcy5sZW5ndGg7IGkkMiArPSAxKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVzR3JpZFtpJDJdIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3B2O1xuICAgICAgfTtcblxuICAgICAgU3dpcGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgLy8gQnJlYWtwb2ludHNcbiAgICAgICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgICAgdmFyIHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc2xhdGVkO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgICAgIH07XG5cbiAgICAgIFN3aXBlci5wcm90b3R5cGUuY2hhbmdlRGlyZWN0aW9uID0gZnVuY3Rpb24gY2hhbmdlRGlyZWN0aW9uIChuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUpIHtcbiAgICAgICAgaWYgKCBuZWVkVXBkYXRlID09PSB2b2lkIDAgKSBuZWVkVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICAgICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uKSB8fCAobmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIuJGVsXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKChcIlwiICsgKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBjdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoKFwiXCIgKyAoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIG5ld0RpcmVjdGlvbikpO1xuXG4gICAgICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuXG4gICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVJbmRleCwgc2xpZGVFbCkge1xuICAgICAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICAgICAgaWYgKG5lZWRVcGRhdGUpIHsgc3dpcGVyLnVwZGF0ZSgpOyB9XG5cbiAgICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICAgIH07XG5cbiAgICAgIFN3aXBlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cblxuICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGxvb3BcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgc2l6ZVxuICAgICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgICAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG5cbiAgICAgICAgLy8gSW5pdCBGbGFnXG4gICAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgLy8gRW1pdFxuICAgICAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgICAgfTtcblxuICAgICAgU3dpcGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgICAgIGlmICggZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCApIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgaWYgKCBjbGVhblN0eWxlcyA9PT0gdm9pZCAwICkgY2xlYW5TdHlsZXMgPSB0cnVlO1xuXG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgICAgICAvLyBJbml0IEZsYWdcbiAgICAgICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgICAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAgICAgLy8gRGVzdHJveSBsb29wXG4gICAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICAgICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgaWYgKHNsaWRlcyAmJiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzbGlkZXNcbiAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFtcbiAgICAgICAgICAgICAgICBwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsXG4gICAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlTmV4dENsYXNzLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5zbGlkZVByZXZDbGFzcyBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgICAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgc3dpcGVyLiRlbFswXS5zd2lwZXIgPSBudWxsO1xuICAgICAgICAgIHN3aXBlci4kZWwuZGF0YSgnc3dpcGVyJywgbnVsbCk7XG4gICAgICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIFN3aXBlci5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uIGV4dGVuZERlZmF1bHRzIChuZXdEZWZhdWx0cykge1xuICAgICAgICBVdGlscy5leHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICAgICAgfTtcblxuICAgICAgc3RhdGljQWNjZXNzb3JzLmV4dGVuZGVkRGVmYXVsdHMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICAgIH07XG5cbiAgICAgIHN0YXRpY0FjY2Vzc29ycy5kZWZhdWx0cy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICAgIH07XG5cbiAgICAgIHN0YXRpY0FjY2Vzc29ycy5DbGFzcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTd2lwZXJDbGFzcztcbiAgICAgIH07XG5cbiAgICAgIHN0YXRpY0FjY2Vzc29ycy4kLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICQ7XG4gICAgICB9O1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3dpcGVyLCBzdGF0aWNBY2Nlc3NvcnMgKTtcblxuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9KFN3aXBlckNsYXNzKSk7XG5cbiAgICB2YXIgRGV2aWNlJDEgPSB7XG4gICAgICBuYW1lOiAnZGV2aWNlJyxcbiAgICAgIHByb3RvOiB7XG4gICAgICAgIGRldmljZTogRGV2aWNlLFxuICAgICAgfSxcbiAgICAgIHN0YXRpYzoge1xuICAgICAgICBkZXZpY2U6IERldmljZSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBTdXBwb3J0JDEgPSB7XG4gICAgICBuYW1lOiAnc3VwcG9ydCcsXG4gICAgICBwcm90bzoge1xuICAgICAgICBzdXBwb3J0OiBTdXBwb3J0LFxuICAgICAgfSxcbiAgICAgIHN0YXRpYzoge1xuICAgICAgICBzdXBwb3J0OiBTdXBwb3J0LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEJyb3dzZXIgPSAoZnVuY3Rpb24gQnJvd3NlcigpIHtcbiAgICAgIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgICAgICB2YXIgdWEgPSB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNFZGdlOiAhIXdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgICAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICAgICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luLm5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIEJyb3dzZXIkMSA9IHtcbiAgICAgIG5hbWU6ICdicm93c2VyJyxcbiAgICAgIHByb3RvOiB7XG4gICAgICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gICAgICB9LFxuICAgICAgc3RhdGljOiB7XG4gICAgICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgUmVzaXplID0ge1xuICAgICAgbmFtZTogJ3Jlc2l6ZScsXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICByZXNpemU6IHtcbiAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgncmVzaXplJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgLy8gRW1pdCByZXNpemVcbiAgICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcblxuICAgICAgICAgIC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcbiAgICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG4gICAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIE9ic2VydmVyID0ge1xuICAgICAgZnVuYzogd2luLk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgICAgdmFyIE9ic2VydmVyRnVuYyA9IE9ic2VydmVyLmZ1bmM7XG4gICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW4uc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhLFxuICAgICAgICB9KTtcblxuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIVN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwgeyBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW4gfSk7XG5cbiAgICAgICAgLy8gT2JzZXJ2ZSB3cmFwcGVyXG4gICAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHsgYXR0cmlidXRlczogZmFsc2UgfSk7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgT2JzZXJ2ZXIkMSA9IHtcbiAgICAgIG5hbWU6ICdvYnNlcnZlcicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgICAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBvYnNlcnZlcjoge1xuICAgICAgICAgICAgaW5pdDogT2JzZXJ2ZXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBhdHRhY2g6IE9ic2VydmVyLmF0dGFjaC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBkZXN0cm95OiBPYnNlcnZlci5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIG9ic2VydmVyczogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5vYnNlcnZlci5kZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgVmlydHVhbCA9IHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcmVmID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgdmFyIHNsaWRlc1BlclZpZXcgPSByZWYuc2xpZGVzUGVyVmlldztcbiAgICAgICAgdmFyIHNsaWRlc1Blckdyb3VwID0gcmVmLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICB2YXIgY2VudGVyZWRTbGlkZXMgPSByZWYuY2VudGVyZWRTbGlkZXM7XG4gICAgICAgIHZhciByZWYkMSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICAgICAgdmFyIGFkZFNsaWRlc0JlZm9yZSA9IHJlZiQxLmFkZFNsaWRlc0JlZm9yZTtcbiAgICAgICAgdmFyIGFkZFNsaWRlc0FmdGVyID0gcmVmJDEuYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICAgIHZhciByZWYkMiA9IHN3aXBlci52aXJ0dWFsO1xuICAgICAgICB2YXIgcHJldmlvdXNGcm9tID0gcmVmJDIuZnJvbTtcbiAgICAgICAgdmFyIHByZXZpb3VzVG8gPSByZWYkMi50bztcbiAgICAgICAgdmFyIHNsaWRlcyA9IHJlZiQyLnNsaWRlcztcbiAgICAgICAgdmFyIHByZXZpb3VzU2xpZGVzR3JpZCA9IHJlZiQyLnNsaWRlc0dyaWQ7XG4gICAgICAgIHZhciByZW5kZXJTbGlkZSA9IHJlZiQyLnJlbmRlclNsaWRlO1xuICAgICAgICB2YXIgcHJldmlvdXNPZmZzZXQgPSByZWYkMi5vZmZzZXQ7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcblxuICAgICAgICB2YXIgb2Zmc2V0UHJvcDtcbiAgICAgICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIHsgb2Zmc2V0UHJvcCA9ICdyaWdodCc7IH1cbiAgICAgICAgZWxzZSB7IG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJzsgfVxuXG4gICAgICAgIHZhciBzbGlkZXNBZnRlcjtcbiAgICAgICAgdmFyIHNsaWRlc0JlZm9yZTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGlkZXNBZnRlciA9IHNsaWRlc1BlclZpZXcgKyAoc2xpZGVzUGVyR3JvdXAgLSAxKSArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTtcbiAgICAgICAgdmFyIHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IChzd2lwZXIuc2xpZGVzR3JpZFtmcm9tXSB8fCAwKSAtIChzd2lwZXIuc2xpZGVzR3JpZFswXSB8fCAwKTtcblxuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBzbGlkZXNHcmlkOiBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgICBpZiAoc3dpcGVyLmxhenkgJiYgc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuY3NzKG9mZnNldFByb3AsIChvZmZzZXQgKyBcInB4XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgICAgICBzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzd2lwZXIsIHtcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgIHRvOiB0byxcbiAgICAgICAgICAgIHNsaWRlczogKGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICAgICAgdmFyIHNsaWRlc1RvUmVuZGVyID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICAgICAgfSgpKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVwZW5kSW5kZXhlcyA9IFtdO1xuICAgICAgICB2YXIgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgICAgICBpZiAoZm9yY2UpIHtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpKSkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChpIDwgZnJvbSB8fCBpID4gdG8pIHtcbiAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZCgoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGkgKyBcIlxcXCJdXCIpKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc2xpZGVzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgICBpZiAoaSQxID49IGZyb20gJiYgaSQxIDw9IHRvKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICAgIGFwcGVuZEluZGV4ZXMucHVzaChpJDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGkkMSA+IHByZXZpb3VzVG8pIHsgYXBwZW5kSW5kZXhlcy5wdXNoKGkkMSk7IH1cbiAgICAgICAgICAgICAgaWYgKGkkMSA8IHByZXZpb3VzRnJvbSkgeyBwcmVwZW5kSW5kZXhlcy5wdXNoKGkkMSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJlcGVuZEluZGV4ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYiAtIGE7IH0pLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oJy5zd2lwZXItc2xpZGUnKS5jc3Mob2Zmc2V0UHJvcCwgKG9mZnNldCArIFwicHhcIikpO1xuICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICB9LFxuICAgICAgcmVuZGVyU2xpZGU6IGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICAgICAgaWYgKHBhcmFtcy5jYWNoZSAmJiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0pIHtcbiAgICAgICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkc2xpZGVFbCA9IHBhcmFtcy5yZW5kZXJTbGlkZVxuICAgICAgICAgID8gJChwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpXG4gICAgICAgICAgOiAkKChcIjxkaXYgY2xhc3M9XFxcIlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgKyBcIlxcXCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCI+XCIgKyBzbGlkZSArIFwiPC9kaXY+XCIpKTtcbiAgICAgICAgaWYgKCEkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSB7ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpOyB9XG4gICAgICAgIGlmIChwYXJhbXMuY2FjaGUpIHsgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7IH1cbiAgICAgICAgcmV0dXJuICRzbGlkZUVsO1xuICAgICAgfSxcbiAgICAgIGFwcGVuZFNsaWRlOiBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlc1tpXSkgeyBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgICAgfSxcbiAgICAgIHByZXBlbmRTbGlkZTogZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgICAgIHZhciBudW1iZXJPZk5ld1NsaWRlcyA9IDE7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVzW2ldKSB7IHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlc1tpXSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICAgICAgbnVtYmVyT2ZOZXdTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgIHZhciBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgICAgIHZhciBuZXdDYWNoZSA9IHt9O1xuICAgICAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZWRJbmRleCkge1xuICAgICAgICAgICAgdmFyICRjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgICAgIHZhciBjYWNoZWRFbEluZGV4ID0gJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkRWxJbmRleCkge1xuICAgICAgICAgICAgICAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBwYXJzZUludChjYWNoZWRFbEluZGV4LCAxMCkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSAkY2FjaGVkRWw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVTbGlkZTogZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHNsaWRlc0luZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIHsgYWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSB7IGFjdGl2ZUluZGV4IC09IDE7IH1cbiAgICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVBbGxTbGlkZXM6IGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIFZpcnR1YWwkMSA9IHtcbiAgICAgIG5hbWU6ICd2aXJ0dWFsJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB2aXJ0dWFsOiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgc2xpZGVzOiBbXSxcbiAgICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgdmlydHVhbDoge1xuICAgICAgICAgICAgdXBkYXRlOiBWaXJ0dWFsLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBhcHBlbmRTbGlkZTogVmlydHVhbC5hcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBwcmVwZW5kU2xpZGU6IFZpcnR1YWwucHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHJlbW92ZVNsaWRlOiBWaXJ0dWFsLnJlbW92ZVNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHJlbW92ZUFsbFNsaWRlczogVmlydHVhbC5yZW1vdmVBbGxTbGlkZXMuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgcmVuZGVyU2xpZGU6IFZpcnR1YWwucmVuZGVyU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgc2xpZGVzOiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuc2xpZGVzLFxuICAgICAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwidmlydHVhbFwiKSk7XG4gICAgICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSkge1xuICAgICAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEtleWJvYXJkID0ge1xuICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgICB2YXIgZSA9IGV2ZW50O1xuICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7IGUgPSBlLm9yaWdpbmFsRXZlbnQ7IH0gLy8ganF1ZXJ5IGZpeFxuICAgICAgICB2YXIga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICAgICAgdmFyIHBhZ2VVcERvd24gPSBzd2lwZXIucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd247XG4gICAgICAgIHZhciBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgICAgICB2YXIgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0O1xuICAgICAgICB2YXIgaXNBcnJvd0xlZnQgPSBrYyA9PT0gMzc7XG4gICAgICAgIHZhciBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgICAgIHZhciBpc0Fycm93VXAgPSBrYyA9PT0gMzg7XG4gICAgICAgIHZhciBpc0Fycm93RG93biA9IGtjID09PSA0MDtcbiAgICAgICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93UmlnaHQpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dEb3duKSB8fCBpc1BhZ2VEb3duKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwKSB8fCBpc1BhZ2VVcCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ICYmIGRvYy5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lICYmIChkb2MuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvYy5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5vbmx5SW5WaWV3cG9ydCAmJiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQgfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSkge1xuICAgICAgICAgIHZhciBpblZpZXcgPSBmYWxzZTtcbiAgICAgICAgICAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcbiAgICAgICAgICBpZiAoc3dpcGVyLiRlbC5wYXJlbnRzKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpKSkubGVuZ3RoID4gMCAmJiBzd2lwZXIuJGVsLnBhcmVudHMoKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSB3aW4uaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICAgICAgaWYgKHJ0bCkgeyBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7IH1cbiAgICAgICAgICB2YXIgc3dpcGVyQ29vcmQgPSBbXG4gICAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLFxuICAgICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSxcbiAgICAgICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLFxuICAgICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0gXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aFxuICAgICAgICAgICAgICAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaW5WaWV3KSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0KSB7XG4gICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgICAgICAgIGVsc2UgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwpIHx8ICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmIHJ0bCkpIHsgc3dpcGVyLnNsaWRlTmV4dCgpOyB9XG4gICAgICAgICAgaWYgKCgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwpIHx8ICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmIHJ0bCkpIHsgc3dpcGVyLnNsaWRlUHJldigpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgICAgICAgIGVsc2UgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUGFnZURvd24gfHwgaXNBcnJvd0Rvd24pIHsgc3dpcGVyLnNsaWRlTmV4dCgpOyB9XG4gICAgICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzQXJyb3dVcCkgeyBzd2lwZXIuc2xpZGVQcmV2KCk7IH1cbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuZW1pdCgna2V5UHJlc3MnLCBrYyk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9LFxuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICQoZG9jKS5vbigna2V5ZG93bicsIHN3aXBlci5rZXlib2FyZC5oYW5kbGUpO1xuICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICQoZG9jKS5vZmYoJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICAgICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBLZXlib2FyZCQxID0ge1xuICAgICAgbmFtZTogJ2tleWJvYXJkJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBrZXlib2FyZDoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxuICAgICAgICAgIHBhZ2VVcERvd246IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZW5hYmxlOiBLZXlib2FyZC5lbmFibGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZGlzYWJsZTogS2V5Ym9hcmQuZGlzYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBoYW5kbGU6IEtleWJvYXJkLmhhbmRsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICAgICAgc3dpcGVyLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKCkge1xuICAgICAgdmFyIGV2ZW50TmFtZSA9ICdvbndoZWVsJztcbiAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2M7XG5cbiAgICAgIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3VwcG9ydGVkXG4gICAgICAgICYmIGRvYy5pbXBsZW1lbnRhdGlvblxuICAgICAgICAmJiBkb2MuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZVxuICAgICAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgICAgICYmIGRvYy5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWVcbiAgICAgICkge1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH1cbiAgICB2YXIgTW91c2V3aGVlbCA9IHtcbiAgICAgIGxhc3RTY3JvbGxUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgIGV2ZW50OiBmdW5jdGlvbiBldmVudCgpIHtcbiAgICAgICAgaWYgKHdpbi5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xKSB7IHJldHVybiAnRE9NTW91c2VTY3JvbGwnOyB9XG4gICAgICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICAgICAgfSxcbiAgICAgIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKGUpIHtcbiAgICAgICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgICAgICB2YXIgUElYRUxfU1RFUCA9IDEwO1xuICAgICAgICB2YXIgTElORV9IRUlHSFQgPSA0MDtcbiAgICAgICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4gICAgICAgIHZhciBzWCA9IDA7XG4gICAgICAgIHZhciBzWSA9IDA7IC8vIHNwaW5YLCBzcGluWVxuICAgICAgICB2YXIgcFggPSAwO1xuICAgICAgICB2YXIgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gICAgICAgIC8vIExlZ2FjeVxuICAgICAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgICAgICBpZiAoJ2F4aXMnIGluIGUgJiYgZS5heGlzID09PSBlLkhPUklaT05UQUxfQVhJUykge1xuICAgICAgICAgIHNYID0gc1k7XG4gICAgICAgICAgc1kgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gICAgICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICAgICAgcFkgPSBlLmRlbHRhWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgICAgIHBYID0gZS5kZWx0YVg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZS5zaGlmdEtleSAmJiAhcFgpIHsgLy8gaWYgdXNlciBzY3JvbGxzIHdpdGggc2hpZnQgaGUgd2FudHMgaG9yaXpvbnRhbCBzY3JvbGxcbiAgICAgICAgICBwWCA9IHBZO1xuICAgICAgICAgIHBZID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgocFggfHwgcFkpICYmIGUuZGVsdGFNb2RlKSB7XG4gICAgICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7IC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICAgICAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICAgICAgc1ggPSAocFggPCAxKSA/IC0xIDogMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICAgICAgc1kgPSAocFkgPCAxKSA/IC0xIDogMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3Bpblg6IHNYLFxuICAgICAgICAgIHNwaW5ZOiBzWSxcbiAgICAgICAgICBwaXhlbFg6IHBYLFxuICAgICAgICAgIHBpeGVsWTogcFksXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0WzBdLmNvbnRhaW5zKGUudGFyZ2V0KSAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9IC8vIGpxdWVyeSBmaXhcbiAgICAgICAgdmFyIGRlbHRhID0gMDtcbiAgICAgICAgdmFyIHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgICAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgeyBkZWx0YSA9IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjsgfVxuICAgICAgICAgICAgZWxzZSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWSkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWCkpIHsgZGVsdGEgPSAtZGF0YS5waXhlbFk7IH1cbiAgICAgICAgICBlbHNlIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWx0YSA9PT0gMCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuaW52ZXJ0KSB7IGRlbHRhID0gLWRlbHRhOyB9XG5cbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgICAgIHZhciBuZXdFdmVudCA9IHtcbiAgICAgICAgICAgIHRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSxcbiAgICAgICAgICAgIHJhdzogZXZlbnQsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuICAgICAgICAgIHZhciByZWNlbnRXaGVlbEV2ZW50cyA9IHN3aXBlci5tb3VzZXdoZWVsLnJlY2VudFdoZWVsRXZlbnRzO1xuICAgICAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAgICAgLy8gICBJZiBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgb3JcbiAgICAgICAgICAvLyAgIGlmIHRoZSBzY3JvbGwgaXMgcXVpY2tlciB0aGFuIHRoZSBwcmV2aW91cyBvbmU6XG4gICAgICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgICAgICAvLyBFbHNlICh0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB3aGVlbCBpcyBtb3ZlZCk6XG4gICAgICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgICAgICBpZiAocHJldkV2ZW50KSB7XG4gICAgICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uIHx8IG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MCkge1xuICAgICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG4gICAgICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRnJlZW1vZGUgb3Igc2Nyb2xsQ29udGFpbmVyOlxuXG4gICAgICAgICAgLy8gSWYgd2UgcmVjZW50bHkgc25hcHBlZCBhZnRlciBhIG1vbWVudHVtIHNjcm9sbCwgdGhlbiBpZ25vcmUgd2hlZWwgZXZlbnRzXG4gICAgICAgICAgLy8gdG8gZ2l2ZSB0aW1lIGZvciB0aGUgZGVjZWxlcmF0aW9uIHRvIGZpbmlzaC4gU3RvcCBpZ25vcmluZyBhZnRlciA1MDAgbXNlY3NcbiAgICAgICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgICAgIC8vIGFuIGVuZC1vZi1tb21lbnR1bSBzbmFwKS5cbiAgICAgICAgICB2YXIgbmV3RXZlbnQkMSA9IHsgdGltZTogVXRpbHMubm93KCksIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSB9O1xuICAgICAgICAgIHZhciByZWYgPSBzd2lwZXIubW91c2V3aGVlbDtcbiAgICAgICAgICB2YXIgbGFzdEV2ZW50QmVmb3JlU25hcCA9IHJlZi5sYXN0RXZlbnRCZWZvcmVTbmFwO1xuICAgICAgICAgIHZhciBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXBcbiAgICAgICAgICAgICYmIG5ld0V2ZW50JDEudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMFxuICAgICAgICAgICAgJiYgbmV3RXZlbnQkMS5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhXG4gICAgICAgICAgICAmJiBuZXdFdmVudCQxLmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG4gICAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykge1xuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgKGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5KTtcbiAgICAgICAgICAgIHZhciB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgICAgICB2YXIgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpOyB9XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7IHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpOyB9XG5cbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgICAgICAgaWYgKCghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZykgfHwgKCF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSkge1xuICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgICAgICAvLyBXaGVuIHdoZWVsIHNjcm9sbGluZyBzdGFydHMgd2l0aCBzdGlja3kgKGFrYSBzbmFwKSBlbmFibGVkLCB0aGVuIGRldGVjdFxuICAgICAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAgICAgLy8gMi4gZGlkIGFsbCBOIGV2ZW50cyBhcnJpdmUgaW4gdGhlIGxhc3QgTSAoTT01MDA/KSBtc2Vjcz9cbiAgICAgICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAgICAgLy8gNC4gZG9lcyB0aGUgbGF0ZXN0IGV2ZW50IGhhdmUgYSBkZWx0YSB0aGF0J3Mgc21hbGxlciB0aGFuIFEgKFE9Nj8pIHBpeGVscz9cbiAgICAgICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tdW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlIGZvciBcInJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGxcIiBkZXRlcm1pbmF0aW9uLlxuICAgICAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgdmFyIHJlY2VudFdoZWVsRXZlbnRzJDEgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcbiAgICAgICAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzJDEubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMkMS5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIHByZXZFdmVudCQxID0gcmVjZW50V2hlZWxFdmVudHMkMS5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50cyQxW3JlY2VudFdoZWVsRXZlbnRzJDEubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHZhciBmaXJzdEV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMkMVswXTtcbiAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMkMS5wdXNoKG5ld0V2ZW50JDEpO1xuICAgICAgICAgICAgICBpZiAocHJldkV2ZW50JDEgJiYgKG5ld0V2ZW50JDEuZGVsdGEgPiBwcmV2RXZlbnQkMS5kZWx0YSB8fCBuZXdFdmVudCQxLmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50JDEuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIC8vIEluY3JlYXNpbmcgb3IgcmV2ZXJzZS1zaWduIGRlbHRhIG1lYW5zIHRoZSB1c2VyIHN0YXJ0ZWQgc2Nyb2xsaW5nIGFnYWluLiBDbGVhciB0aGUgd2hlZWwgZXZlbnQgbG9nLlxuICAgICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzJDEuc3BsaWNlKDApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VudFdoZWVsRXZlbnRzJDEubGVuZ3RoID49IDE1XG4gICAgICAgICAgICAgICAgICAmJiBuZXdFdmVudCQxLnRpbWUgLSBmaXJzdEV2ZW50LnRpbWUgPCA1MDBcbiAgICAgICAgICAgICAgICAgICYmIGZpcnN0RXZlbnQuZGVsdGEgLSBuZXdFdmVudCQxLmRlbHRhID49IDFcbiAgICAgICAgICAgICAgICAgICYmIG5ld0V2ZW50JDEuZGVsdGEgPD0gNlxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgICAgIC8vIHRvIHdhaXQgZm9yIG1vcmUgZXZlbnRzLiBTbmFwIEFTQVAgb24gdGhlIG5leHQgdGljay5cbiAgICAgICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGUgc2Nyb2xsIGluc3RlYWQgb2YgcmV2ZXJzaW5nIHRvIHNuYXAuICBUaGVyZWZvcmUsXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgICAgIHZhciBzbmFwVG9UaHJlc2hvbGQgPSBkZWx0YSA+IDAgPyAwLjggOiAwLjI7XG4gICAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50JDE7XG4gICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMkMS5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICAgICAgfSwgMCk7IC8vIG5vIGRlbGF5OyBtb3ZlIG9uIG5leHQgdGlja1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCB0aGVuIHdlIGhhdmVuJ3QgZGV0ZWN0ZWQgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc29cbiAgICAgICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCBcImNvbXBsZXRlXCIgd2hlbiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgICAgIC8vIGZvciA1MDBtcy5cbiAgICAgICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudCQxO1xuICAgICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMkMS5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1pdCBldmVudFxuICAgICAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykgeyBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7IH1cblxuICAgICAgICAgICAgLy8gU3RvcCBhdXRvcGxheVxuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSB7IHN3aXBlci5hdXRvcGxheS5zdG9wKCk7IH1cbiAgICAgICAgICAgIC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb24gPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgICBlbHNlIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBhbmltYXRlU2xpZGVyOiBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAvLyBJZiB0aGUgbW92ZW1lbnQgaXMgTk9UIGJpZyBlbm91Z2ggYW5kXG4gICAgICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgICAgICAvLyAgIERvbid0IGdvIGFueSBmdXJ0aGVyIChhdm9pZCBpbnNpZ25pZmljYW50IHNjcm9sbCBtb3ZlbWVudCkuXG4gICAgICAgIGlmIChuZXdFdmVudC5kZWx0YSA+PSA2ICYmIFV0aWxzLm5vdygpIC0gc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPCA2MCkge1xuICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBlbmQ6XG4gICAgICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAgICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAgICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgICAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAgICAgLy8gRWxzZSAodGhlIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGJlZ2lubmluZykgYW5kXG4gICAgICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAgICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgICAgIC8vIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAgICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgICAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG4gICAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgoIXN3aXBlci5pc0JlZ2lubmluZyB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHlvdSBnb3QgaGVyZSBpcyBiZWNhdXNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiB0cmlnZ2VyZWQgc28gc3RvcmUgdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA9IChuZXcgd2luLkRhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICByZWxlYXNlU2Nyb2xsOiBmdW5jdGlvbiByZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgZXZlbnQgPSBNb3VzZXdoZWVsLmV2ZW50KCk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFldmVudCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5vbignbW91c2VlbnRlcicsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIpO1xuICAgICAgICB0YXJnZXQub24oJ21vdXNlbGVhdmUnLCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlKTtcbiAgICAgICAgdGFyZ2V0Lm9uKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBldmVudCA9IE1vdXNld2hlZWwuZXZlbnQoKTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV2ZW50KSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5vZmYoZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgTW91c2V3aGVlbCQxID0ge1xuICAgICAgbmFtZTogJ21vdXNld2hlZWwnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICByZWxlYXNlT25FZGdlczogZmFsc2UsXG4gICAgICAgICAgaW52ZXJ0OiBmYWxzZSxcbiAgICAgICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICAgICAgc2Vuc2l0aXZpdHk6IDEsXG4gICAgICAgICAgZXZlbnRzVGFyZ2VkOiAnY29udGFpbmVyJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZTogTW91c2V3aGVlbC5lbmFibGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGhhbmRsZTogTW91c2V3aGVlbC5oYW5kbGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgaGFuZGxlTW91c2VFbnRlcjogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUVudGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBhbmltYXRlU2xpZGVyOiBNb3VzZXdoZWVsLmFuaW1hdGVTbGlkZXIuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgcmVsZWFzZVNjcm9sbDogTW91c2V3aGVlbC5yZWxlYXNlU2Nyb2xsLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGxhc3RTY3JvbGxUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCkgeyBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTsgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgeyBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7IH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBOYXZpZ2F0aW9uID0ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgICB2YXIgJG5leHRFbCA9IHJlZi4kbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuXG4gICAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgJHByZXZFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICAgICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25QcmV2Q2xpY2s6IGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9LFxuICAgICAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdmFyICRuZXh0RWw7XG4gICAgICAgIHZhciAkcHJldkVsO1xuICAgICAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgICAgICRuZXh0RWwgPSAkKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgICAgICYmIHR5cGVvZiBwYXJhbXMubmV4dEVsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgJiYgJG5leHRFbC5sZW5ndGggPiAxXG4gICAgICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCkubGVuZ3RoID09PSAxXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAkbmV4dEVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgICAgICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgJiYgJHByZXZFbC5sZW5ndGggPiAxXG4gICAgICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCkubGVuZ3RoID09PSAxXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRwcmV2RWwub24oJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICAgICAgJG5leHRFbDogJG5leHRFbCxcbiAgICAgICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICAgICAkcHJldkVsOiAkcHJldkVsLFxuICAgICAgICAgIHByZXZFbDogJHByZXZFbCAmJiAkcHJldkVsWzBdLFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgICB2YXIgJG5leHRFbCA9IHJlZi4kbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuICAgICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgICAgICRuZXh0RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICAgICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgICAgICRwcmV2RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIE5hdmlnYXRpb24kMSA9IHtcbiAgICAgIG5hbWU6ICduYXZpZ2F0aW9uJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgICAgIHByZXZFbDogbnVsbCxcblxuICAgICAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICBpbml0OiBOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgdXBkYXRlOiBOYXZpZ2F0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBkZXN0cm95OiBOYXZpZ2F0aW9uLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgb25OZXh0Q2xpY2s6IE5hdmlnYXRpb24ub25OZXh0Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgb25QcmV2Q2xpY2s6IE5hdmlnYXRpb24ub25QcmV2Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICB2YXIgcmVmID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgICAgICAgdmFyICRuZXh0RWwgPSByZWYuJG5leHRFbDtcbiAgICAgICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGlja1xuICAgICAgICAgICAgJiYgISQoZS50YXJnZXQpLmlzKCRwcmV2RWwpXG4gICAgICAgICAgICAmJiAhJChlLnRhcmdldCkuaXMoJG5leHRFbClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBpc0hpZGRlbjtcbiAgICAgICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgICAgIGlzSGlkZGVuID0gJG5leHRFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycsIHN3aXBlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnLCBzd2lwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBQYWdpbmF0aW9uID0ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgICAgIHZhciBjdXJyZW50O1xuICAgICAgICB2YXIgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICBpZiAoY3VycmVudCA+IHNsaWRlc0xlbmd0aCAtIDEgLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSB7XG4gICAgICAgICAgICBjdXJyZW50IC09IChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIHsgY3VycmVudCAtPSB0b3RhbDsgfVxuICAgICAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIHsgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDsgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGN1cnJlbnQgPSBzd2lwZXIuc25hcEluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUeXBlc1xuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgICAgICB2YXIgZmlyc3RJbmRleDtcbiAgICAgICAgICB2YXIgbGFzdEluZGV4O1xuICAgICAgICAgIHZhciBtaWRJbmRleDtcbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgICAgICRlbC5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCAoKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpKSArIFwicHhcIikpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IChjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXgpO1xuICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID4gKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSkge1xuICAgICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaXJzdEluZGV4ID0gY3VycmVudCAtIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDtcbiAgICAgICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQgXCIgKyAocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQtbmV4dCBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldiBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldi1wcmV2IFwiICsgKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGJ1bGxldCkge1xuICAgICAgICAgICAgICB2YXIgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLXByZXZcIikpXG4gICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLXByZXYtcHJldlwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHRcIikpXG4gICAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQtbmV4dFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyICRidWxsZXQgPSBidWxsZXRzLmVxKGN1cnJlbnQpO1xuICAgICAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgICB2YXIgJGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShmaXJzdEluZGV4KTtcbiAgICAgICAgICAgICAgdmFyICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbWFpblwiKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHM7IGkkMSA+PSAwOyBpJDEgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gaSQxKS5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2XCIpKVxuICAgICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2LXByZXZcIikpO1xuICAgICAgICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dC1uZXh0XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0XG4gICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldlwiKSlcbiAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2LXByZXZcIikpO1xuICAgICAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0XG4gICAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dFwiKSlcbiAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1uZXh0LW5leHRcIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIHZhciBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgICAgICB2YXIgYnVsbGV0c09mZnNldCA9ICgoKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCkgLSAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSkpIC8gMikgLSAobWlkSW5kZXggKiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgIGJ1bGxldHMuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJywgKGJ1bGxldHNPZmZzZXQgKyBcInB4XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgICAgJGVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy5jdXJyZW50Q2xhc3MpKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAgICAgJGVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy50b3RhbENsYXNzKSkpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgICB2YXIgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG4gICAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICAgIHZhciBzY2FsZVggPSAxO1xuICAgICAgICAgIHZhciBzY2FsZVkgPSAxO1xuICAgICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgICAgfVxuICAgICAgICAgICRlbC5maW5kKChcIi5cIiArIChwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKSkudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIgKyBzY2FsZVggKyBcIikgc2NhbGVZKFwiICsgc2NhbGVZICsgXCIpXCIpKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgICAgICRlbC5odG1sKHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlciwgJGVsWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN3aXBlciwgJGVsWzBdKTtcbiAgICAgICAgfVxuICAgICAgICAkZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH0sXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgICAgIHZhciBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgICAgIHZhciBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBcIjxcIiArIChwYXJhbXMuYnVsbGV0RWxlbWVudCkgKyBcIiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLmJ1bGxldENsYXNzKSArIFwiXFxcIj48L1wiICsgKHBhcmFtcy5idWxsZXRFbGVtZW50KSArIFwiPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKChcIi5cIiArIChwYXJhbXMuYnVsbGV0Q2xhc3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBcIjxzcGFuIGNsYXNzPVxcXCJcIiArIChwYXJhbXMuY3VycmVudENsYXNzKSArIFwiXFxcIj48L3NwYW4+XCJcbiAgICAgICAgICAgICsgJyAvICdcbiAgICAgICAgICAgICsgXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLnRvdGFsQ2xhc3MpICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykgKyBcIlxcXCI+PC9zcGFuPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLnBhZ2luYXRpb24uJGVsWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgICBpZiAoIXBhcmFtcy5lbCkgeyByZXR1cm47IH1cblxuICAgICAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgICAgICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgJiYgJGVsLmxlbmd0aCA+IDFcbiAgICAgICAgKSB7XG4gICAgICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgJGVsLmFkZENsYXNzKChcIlwiICsgKHBhcmFtcy5tb2RpZmllckNsYXNzKSArIChwYXJhbXMudHlwZSkgKyBcIi1keW5hbWljXCIpKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgJGVsLm9uKCdjbGljaycsIChcIi5cIiArIChwYXJhbXMuYnVsbGV0Q2xhc3MpKSwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmluZGV4KCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgeyBpbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzOyB9XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICAgICAkZWw6ICRlbCxcbiAgICAgICAgICBlbDogJGVsWzBdLFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcblxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgeyBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7IH1cbiAgICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgICAkZWwub2ZmKCdjbGljaycsIChcIi5cIiArIChwYXJhbXMuYnVsbGV0Q2xhc3MpKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBQYWdpbmF0aW9uJDEgPSB7XG4gICAgICBuYW1lOiAncGFnaW5hdGlvbicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIGVsOiBudWxsLFxuICAgICAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6ICdidWxsZXRzJywgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiAobnVtYmVyKSB7IHJldHVybiBudW1iZXI7IH0sXG4gICAgICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gKG51bWJlcikgeyByZXR1cm4gbnVtYmVyOyB9LFxuICAgICAgICAgIGJ1bGxldENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0JyxcbiAgICAgICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLCAvLyBORVdcbiAgICAgICAgICBjdXJyZW50Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jdXJyZW50JyxcbiAgICAgICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLWZpbGwnLFxuICAgICAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlJyxcbiAgICAgICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsIC8vIE5FV1xuICAgICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWxvY2snLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgIGluaXQ6IFBhZ2luYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICByZW5kZXI6IFBhZ2luYXRpb24ucmVuZGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHVwZGF0ZTogUGFnaW5hdGlvbi51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZGVzdHJveTogUGFnaW5hdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleDogMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmluaXQoKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZlSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIGFjdGl2ZUluZGV4Q2hhbmdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNuYXBJbmRleENoYW5nZTogZnVuY3Rpb24gc25hcEluZGV4Q2hhbmdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlc0xlbmd0aENoYW5nZTogZnVuY3Rpb24gc2xpZGVzTGVuZ3RoQ2hhbmdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gc25hcEdyaWRMZW5ndGhDaGFuZ2UoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWxcbiAgICAgICAgICAgICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGlja1xuICAgICAgICAgICAgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICYmICEkKGUudGFyZ2V0KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblNob3cnLCBzd2lwZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25IaWRlJywgc3dpcGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxiYXIgPSB7XG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICAgICAgICB2YXIgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemU7XG4gICAgICAgIHZhciB0cmFja1NpemUgPSBzY3JvbGxiYXIudHJhY2tTaXplO1xuICAgICAgICB2YXIgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuXG4gICAgICAgIHZhciBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgICAgIHZhciBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuICAgICAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIG5ld1BvcyArIFwicHgsIDAsIDApXCIpKTtcbiAgICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gbmV3U2l6ZSArIFwicHhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgbmV3UG9zICsgXCJweCwgMClcIikpO1xuICAgICAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gbmV3U2l6ZSArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0KTtcbiAgICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZVNpemU6IGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgICB2YXIgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcblxuICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgIHZhciB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkZWxbMF0ub2Zmc2V0V2lkdGggOiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIHZhciBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgICAgIHZhciBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgICAgICB2YXIgZHJhZ1NpemU7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBkcmFnU2l6ZSArIFwicHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIFV0aWxzLmV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICAgICB0cmFja1NpemU6IHRyYWNrU2l6ZSxcbiAgICAgICAgICBkaXZpZGVyOiBkaXZpZGVyLFxuICAgICAgICAgIG1vdmVEaXZpZGVyOiBtb3ZlRGl2aWRlcixcbiAgICAgICAgICBkcmFnU2l6ZTogZHJhZ1NpemUsXG4gICAgICAgIH0pO1xuICAgICAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICAgIH0sXG4gICAgICBnZXRQb2ludGVyUG9zaXRpb246IGZ1bmN0aW9uIGdldFBvaW50ZXJQb3NpdGlvbihlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgcmV0dXJuICgoZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgoZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WSk7XG4gICAgICB9LFxuICAgICAgc2V0RHJhZ1Bvc2l0aW9uOiBmdW5jdGlvbiBzZXREcmFnUG9zaXRpb24oZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgICAgdmFyIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplO1xuICAgICAgICB2YXIgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZTtcbiAgICAgICAgdmFyIGRyYWdTdGFydFBvcyA9IHNjcm9sbGJhci5kcmFnU3RhcnRQb3M7XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uUmF0aW87XG4gICAgICAgIHBvc2l0aW9uUmF0aW8gPSAoKHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkpIC0gJGVsLm9mZnNldCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXVxuICAgICAgICAgIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICAgICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArICgoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIHBvc2l0aW9uUmF0aW8pO1xuXG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH0sXG4gICAgICBvbkRyYWdTdGFydDogZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnU3RhcnRQb3MgPSAoZS50YXJnZXQgPT09ICRkcmFnRWxbMF0gfHwgZS50YXJnZXQgPT09ICRkcmFnRWwpXG4gICAgICAgICAgPyBzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAgICAgc2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbihlKTtcblxuICAgICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG5cbiAgICAgICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gICAgICB9LFxuICAgICAgb25EcmFnTW92ZTogZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG5cbiAgICAgICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgICAgIGVsc2UgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH1cbiAgICAgICAgc2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbihlKTtcbiAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAgICAgJGRyYWdFbC50cmFuc2l0aW9uKDApO1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgICAgIH0sXG4gICAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuXG4gICAgICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ3Njcm9sbC1zbmFwLXR5cGUnLCAnJyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTtcbiAgICAgICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlbmFibGVEcmFnZ2FibGU6IGZ1bmN0aW9uIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgICB2YXIgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoO1xuICAgICAgICB2YXIgdG91Y2hFdmVudHNEZXNrdG9wID0gc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcDtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgICAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIGlmICghU3VwcG9ydC50b3VjaCkge1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICAgIHZhciB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2g7XG4gICAgICAgIHZhciB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgICAgaWYgKCFTdXBwb3J0LnRvdWNoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSB7IHJldHVybjsgfVxuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgICAgdmFyICRzd2lwZXJFbCA9IHN3aXBlci4kZWw7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgICAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJGRyYWdFbCA9ICRlbC5maW5kKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpKSk7XG4gICAgICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRkcmFnRWwgPSAkKChcIjxkaXYgY2xhc3M9XFxcIlwiICsgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAkZWwuYXBwZW5kKCRkcmFnRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgICAgICRlbDogJGVsLFxuICAgICAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAgICAgJGRyYWdFbDogJGRyYWdFbCxcbiAgICAgICAgICBkcmFnRWw6ICRkcmFnRWxbMF0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICAgICAgc2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIFNjcm9sbGJhciQxID0ge1xuICAgICAgbmFtZTogJ3Njcm9sbGJhcicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgICAgZWw6IG51bGwsXG4gICAgICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgICAgICBoaWRlOiBmYWxzZSxcbiAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICAgICAgaW5pdDogU2Nyb2xsYmFyLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZGVzdHJveTogU2Nyb2xsYmFyLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgdXBkYXRlU2l6ZTogU2Nyb2xsYmFyLnVwZGF0ZVNpemUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgc2V0VHJhbnNsYXRlOiBTY3JvbGxiYXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb246IFNjcm9sbGJhci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGVuYWJsZURyYWdnYWJsZTogU2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBkaXNhYmxlRHJhZ2dhYmxlOiBTY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzZXREcmFnUG9zaXRpb246IFNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZ2V0UG9pbnRlclBvc2l0aW9uOiBTY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBTY3JvbGxiYXIub25EcmFnU3RhcnQuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgb25EcmFnTW92ZTogU2Nyb2xsYmFyLm9uRHJhZ01vdmUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgb25EcmFnRW5kOiBTY3JvbGxiYXIub25EcmFnRW5kLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lb3V0OiBudWxsLFxuICAgICAgICAgICAgZHJhZ1RpbWVvdXQ6IG51bGwsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmluaXQoKTtcbiAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5kZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgUGFyYWxsYXggPSB7XG4gICAgICBzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uIHNldFRyYW5zZm9ybShlbCwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsO1xuXG4gICAgICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICAgICAgdmFyIHJ0bEZhY3RvciA9IHJ0bCA/IC0xIDogMTtcblxuICAgICAgICB2YXIgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICAgICAgdmFyIHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgICAgICB2YXIgeSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC15Jyk7XG4gICAgICAgIHZhciBzY2FsZSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgICAgICB2YXIgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICAgICAgaWYgKHggfHwgeSkge1xuICAgICAgICAgIHggPSB4IHx8ICcwJztcbiAgICAgICAgICB5ID0geSB8fCAnMCc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgeCA9IHA7XG4gICAgICAgICAgeSA9ICcwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5ID0gcDtcbiAgICAgICAgICB4ID0gJzAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh4KS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICAgIHggPSAocGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IpICsgXCIlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeCA9ICh4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IpICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoeSkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgICAgICB5ID0gKHBhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzKSArIFwiJVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHkgPSAoeSAqIHByb2dyZXNzKSArIFwicHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBjdXJyZW50T3BhY2l0eSA9IG9wYWNpdHkgLSAoKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKSk7XG4gICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNjYWxlID09PSAndW5kZWZpbmVkJyB8fCBzY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICRlbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpXCIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoKHNjYWxlIC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgICAgICRlbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpIHNjYWxlKFwiICsgY3VycmVudFNjYWxlICsgXCIpXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICAgICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUluZGV4LCBzbGlkZUVsKSB7XG4gICAgICAgICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykge1xuICAgICAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gKHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2xpZGVQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC0xKSwgMSk7XG4gICAgICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IHRoaXMucGFyYW1zLnNwZWVkO1xuXG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgICAgJGVsLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKVxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgcGFyYWxsYXhFbCkge1xuICAgICAgICAgICAgdmFyICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgICAgIHZhciBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQoJHBhcmFsbGF4RWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb24nKSwgMTApIHx8IGR1cmF0aW9uO1xuICAgICAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSB7IHBhcmFsbGF4RHVyYXRpb24gPSAwOyB9XG4gICAgICAgICAgICAkcGFyYWxsYXhFbC50cmFuc2l0aW9uKHBhcmFsbGF4RHVyYXRpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIFBhcmFsbGF4JDEgPSB7XG4gICAgICBuYW1lOiAncGFyYWxsYXgnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHBhcmFsbGF4OiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgICAgIHNldFRyYW5zZm9ybTogUGFyYWxsYXguc2V0VHJhbnNmb3JtLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogUGFyYWxsYXguc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb246IFBhcmFsbGF4LnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgWm9vbSA9IHtcbiAgICAgIC8vIENhbGMgU2NhbGUgRnJvbSBNdWx0aS10b3VjaGVzXG4gICAgICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzOiBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSB7IHJldHVybiAxOyB9XG4gICAgICAgIHZhciB4MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgdmFyIHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICB2YXIgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgICAgIHZhciB5MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KChNYXRoLnBvdyggKHgyIC0geDEpLCAyICkpICsgKE1hdGgucG93KCAoeTIgLSB5MSksIDIgKSkpO1xuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgICB9LFxuICAgICAgLy8gRXZlbnRzXG4gICAgICBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJChlLnRhcmdldCkuY2xvc2VzdCgoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgICAgICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCA9PT0gMCkgeyBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpOyB9XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoKFwiLlwiICsgKHBhcmFtcy5jb250YWluZXJDbGFzcykpKTtcbiAgICAgICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIG9uR2VzdHVyZUNoYW5nZTogZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2htb3ZlJyB8fCAoZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB6b29tLnNjYWxlID0gKGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0KSAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgICAgIHpvb20uc2NhbGUgPSAoZ2VzdHVyZS5tYXhSYXRpbyAtIDEpICsgKE1hdGgucG93KCAoKHpvb20uc2NhbGUgLSBnZXN0dXJlLm1heFJhdGlvKSArIDEpLCAwLjUgKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgICAgICB6b29tLnNjYWxlID0gKHBhcmFtcy5taW5SYXRpbyArIDEpIC0gKE1hdGgucG93KCAoKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUpICsgMSksIDAuNSApKTtcbiAgICAgICAgfVxuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyAoem9vbS5zY2FsZSkgKyBcIilcIikpO1xuICAgICAgfSxcbiAgICAgIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgICBpZiAoIXpvb20uZmFrZUdlc3R1cmVUb3VjaGVkIHx8ICF6b29tLmZha2VHZXN0dXJlTW92ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoZW5kJyB8fCAoZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhRGV2aWNlLmFuZHJvaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgKHpvb20uc2NhbGUpICsgXCIpXCIpKTtcbiAgICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgICAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoem9vbS5zY2FsZSA9PT0gMSkgeyBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkOyB9XG4gICAgICB9LFxuICAgICAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICAgIHZhciBpbWFnZSA9IHpvb20uaW1hZ2U7XG4gICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKERldmljZS5hbmRyb2lkICYmIGUuY2FuY2VsYWJsZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgIGltYWdlLnRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgfSxcbiAgICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgICAgdmFyIGltYWdlID0gem9vbS5pbWFnZTtcbiAgICAgICAgdmFyIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS4kc2xpZGVFbCkgeyByZXR1cm47IH1cblxuICAgICAgICBpZiAoIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgaW1hZ2Uuc3RhcnRYID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneCcpIHx8IDA7XG4gICAgICAgICAgaW1hZ2Uuc3RhcnRZID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneScpIHx8IDA7XG4gICAgICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKTtcbiAgICAgICAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgICAgICAgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgICAgICAgIGltYWdlLnN0YXJ0WSA9IC1pbWFnZS5zdGFydFk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICAgICAgdmFyIHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgICAgICBpZiAoc2NhbGVkV2lkdGggPCBnZXN0dXJlLnNsaWRlV2lkdGggJiYgc2NhbGVkSGVpZ2h0IDwgZ2VzdHVyZS5zbGlkZUhlaWdodCkgeyByZXR1cm47IH1cblxuICAgICAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlV2lkdGggLyAyKSAtIChzY2FsZWRXaWR0aCAvIDIpKSwgMCk7XG4gICAgICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICAgICAgaW1hZ2UubWluWSA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcblxuICAgICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgICAgICBpZiAoIWltYWdlLmlzTW92ZWQgJiYgIXpvb20uaXNTY2FsaW5nKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54KVxuICAgICAgICAgICAgICB8fCAoTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gaWYgKFxuICAgICAgICAgICAgIXN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgJiYgKFxuICAgICAgICAgICAgICAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSlcbiAgICAgICAgICAgICAgfHwgKE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LngpICsgaW1hZ2Uuc3RhcnRYO1xuICAgICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpICsgaW1hZ2Uuc3RhcnRZO1xuXG4gICAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS5taW5YICsgMSkgLSAoTWF0aC5wb3coICgoaW1hZ2UubWluWCAtIGltYWdlLmN1cnJlbnRYKSArIDEpLCAwLjggKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLm1heFggLSAxKSArIChNYXRoLnBvdyggKChpbWFnZS5jdXJyZW50WCAtIGltYWdlLm1heFgpICsgMSksIDAuOCApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS5taW5ZICsgMSkgLSAoTWF0aC5wb3coICgoaW1hZ2UubWluWSAtIGltYWdlLmN1cnJlbnRZKSArIDEpLCAwLjggKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLm1heFkgLSAxKSArIChNYXRoLnBvdyggKChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkpICsgMSksIDAuOCApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZlbG9jaXR5XG4gICAgICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgeyB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDsgfVxuICAgICAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHsgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7IH1cbiAgICAgICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgeyB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7IH1cbiAgICAgICAgdmVsb2NpdHkueCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgeyB2ZWxvY2l0eS54ID0gMDsgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgeyB2ZWxvY2l0eS55ID0gMDsgfVxuICAgICAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICAgICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyAoaW1hZ2UuY3VycmVudFgpICsgXCJweCwgXCIgKyAoaW1hZ2UuY3VycmVudFkpICsgXCJweCwwKVwiKSk7XG4gICAgICB9LFxuICAgICAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgICB2YXIgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgICAgICB2YXIgdmVsb2NpdHkgPSB6b29tLnZlbG9jaXR5O1xuICAgICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgICAgICB2YXIgbmV3UG9zaXRpb25YID0gaW1hZ2UuY3VycmVudFggKyBtb21lbnR1bURpc3RhbmNlWDtcbiAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgICAgICB2YXIgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTtcblxuICAgICAgICAvLyBGaXggZHVyYXRpb25cbiAgICAgICAgaWYgKHZlbG9jaXR5LnggIT09IDApIHsgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7IH1cbiAgICAgICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIHsgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gaW1hZ2UuY3VycmVudFkpIC8gdmVsb2NpdHkueSk7IH1cbiAgICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuXG4gICAgICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgICAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTtcblxuICAgICAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgICAgIHZhciBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICAgICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgICAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgICAgICBpbWFnZS5jdXJyZW50WCA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRYLCBpbWFnZS5tYXhYKSwgaW1hZ2UubWluWCk7XG4gICAgICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcblxuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIChpbWFnZS5jdXJyZW50WCkgKyBcInB4LCBcIiArIChpbWFnZS5jdXJyZW50WSkgKyBcInB4LDApXCIpKTtcbiAgICAgIH0sXG4gICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHtcbiAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7XG4gICAgICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcblxuICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIFRvZ2dsZSBab29tXG4gICAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgICAgICAvLyBab29tIE91dFxuICAgICAgICAgIHpvb20ub3V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gWm9vbSBJblxuICAgICAgICAgIHpvb20uaW4oZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbjogZnVuY3Rpb24gaW4kMShlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgICB2YXIgaW1hZ2UgPSB6b29tLmltYWdlO1xuXG4gICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudCgoXCIuXCIgKyAocGFyYW1zLmNvbnRhaW5lckNsYXNzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsLmFkZENsYXNzKChcIlwiICsgKHBhcmFtcy56b29tZWRTbGlkZUNsYXNzKSkpO1xuXG4gICAgICAgIHZhciB0b3VjaFg7XG4gICAgICAgIHZhciB0b3VjaFk7XG4gICAgICAgIHZhciBvZmZzZXRYO1xuICAgICAgICB2YXIgb2Zmc2V0WTtcbiAgICAgICAgdmFyIGRpZmZYO1xuICAgICAgICB2YXIgZGlmZlk7XG4gICAgICAgIHZhciB0cmFuc2xhdGVYO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWTtcbiAgICAgICAgdmFyIGltYWdlV2lkdGg7XG4gICAgICAgIHZhciBpbWFnZUhlaWdodDtcbiAgICAgICAgdmFyIHNjYWxlZFdpZHRoO1xuICAgICAgICB2YXIgc2NhbGVkSGVpZ2h0O1xuICAgICAgICB2YXIgdHJhbnNsYXRlTWluWDtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZU1pblk7XG4gICAgICAgIHZhciB0cmFuc2xhdGVNYXhYO1xuICAgICAgICB2YXIgdHJhbnNsYXRlTWF4WTtcbiAgICAgICAgdmFyIHNsaWRlV2lkdGg7XG4gICAgICAgIHZhciBzbGlkZUhlaWdodDtcblxuICAgICAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICAgICAgdG91Y2hZID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lnk7XG4gICAgICAgIH1cblxuICAgICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgb2Zmc2V0WCA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkubGVmdDtcbiAgICAgICAgICBvZmZzZXRZID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgZGlmZlggPSAob2Zmc2V0WCArIChzbGlkZVdpZHRoIC8gMikpIC0gdG91Y2hYO1xuICAgICAgICAgIGRpZmZZID0gKG9mZnNldFkgKyAoc2xpZGVIZWlnaHQgLyAyKSkgLSB0b3VjaFk7XG5cbiAgICAgICAgICBpbWFnZVdpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgIHNjYWxlZFdpZHRoID0gaW1hZ2VXaWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKCgoc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgICAgICB0cmFuc2xhdGVNaW5ZID0gTWF0aC5taW4oKChzbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcblxuICAgICAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IGRpZmZZICogem9vbS5zY2FsZTtcblxuICAgICAgICAgIGlmICh0cmFuc2xhdGVYIDwgdHJhbnNsYXRlTWluWCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1heFg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWluWTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LCBcIiArIHRyYW5zbGF0ZVkgKyBcInB4LDApXCIpKTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZShcIiArICh6b29tLnNjYWxlKSArIFwiKVwiKSk7XG4gICAgICB9LFxuICAgICAgb3V0OiBmdW5jdGlvbiBvdXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuXG4gICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudCgoXCIuXCIgKyAocGFyYW1zLmNvbnRhaW5lckNsYXNzKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcygoXCJcIiArIChwYXJhbXMuem9vbWVkU2xpZGVDbGFzcykpKTtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgICBpZiAoem9vbS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICB6b29tLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgICAgdmFyIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfSA6IHRydWU7XG5cbiAgICAgICAgdmFyIHNsaWRlU2VsZWN0b3IgPSBcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuXG4gICAgICAgIC8vIFNjYWxlIGltYWdlXG4gICAgICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVzdGFydCcsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVjaGFuZ2UnLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbignZ2VzdHVyZWVuZCcsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmUgaW1hZ2VcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIChcIi5cIiArIChzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MpKSwgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICAgIGlmICghem9vbS5lbmFibGVkKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIHZhciBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiB0cnVlIH0gOiB0cnVlO1xuXG4gICAgICAgIHZhciBzbGlkZVNlbGVjdG9yID0gXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKTtcblxuICAgICAgICAvLyBTY2FsZSBpbWFnZVxuICAgICAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZignZ2VzdHVyZXN0YXJ0Jywgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVjaGFuZ2UnLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVlbmQnLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIGlmIChzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsKSB7XG4gICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSBpbWFnZVxuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIChcIi5cIiArIChzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MpKSwgem9vbS5vblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgWm9vbSQxID0ge1xuICAgICAgbmFtZTogJ3pvb20nLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBtYXhSYXRpbzogMyxcbiAgICAgICAgICBtaW5SYXRpbzogMSxcbiAgICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB6b29tID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgIGN1cnJlbnRTY2FsZTogMSxcbiAgICAgICAgICBpc1NjYWxpbmc6IGZhbHNlLFxuICAgICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAgICRzbGlkZUVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJGltYWdlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICRpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByZXZUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICAoJ29uR2VzdHVyZVN0YXJ0IG9uR2VzdHVyZUNoYW5nZSBvbkdlc3R1cmVFbmQgb25Ub3VjaFN0YXJ0IG9uVG91Y2hNb3ZlIG9uVG91Y2hFbmQgb25UcmFuc2l0aW9uRW5kIHRvZ2dsZSBlbmFibGUgZGlzYWJsZSBpbiBvdXQnKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICB6b29tW21ldGhvZE5hbWVdID0gWm9vbVttZXRob2ROYW1lXS5iaW5kKHN3aXBlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgem9vbTogem9vbSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHNjYWxlID0gMTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgaW1hZ2VFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB2YXIgc2xpZGVFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnem9vbUNoYW5nZScsIHZhbHVlLCBpbWFnZUVsLCBzbGlkZUVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYWxlID0gdmFsdWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoU3RhcnQ6IGZ1bmN0aW9uIHRvdWNoU3RhcnQoZSkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuem9vbS5vblRvdWNoU3RhcnQoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChlKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci56b29tLm9uVG91Y2hFbmQoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gZG91YmxlVGFwKGUpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20udG9nZ2xlKSB7XG4gICAgICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBMYXp5ID0ge1xuICAgICAgbG9hZEluU2xpZGU6IGZ1bmN0aW9uIGxvYWRJblNsaWRlKGluZGV4LCBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgaWYgKCBsb2FkSW5EdXBsaWNhdGUgPT09IHZvaWQgMCApIGxvYWRJbkR1cGxpY2F0ZSA9IHRydWU7XG5cbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmxhenk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAgICAgICB2YXIgJHNsaWRlRWwgPSBpc1ZpcnR1YWxcbiAgICAgICAgICA/IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG5cbiAgICAgICAgdmFyICRpbWFnZXMgPSAkc2xpZGVFbC5maW5kKChcIi5cIiArIChwYXJhbXMuZWxlbWVudENsYXNzKSArIFwiOm5vdCguXCIgKyAocGFyYW1zLmxvYWRlZENsYXNzKSArIFwiKTpub3QoLlwiICsgKHBhcmFtcy5sb2FkaW5nQ2xhc3MpICsgXCIpXCIpKTtcbiAgICAgICAgaWYgKCRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5lbGVtZW50Q2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKSkge1xuICAgICAgICAgICRpbWFnZXMgPSAkaW1hZ2VzLmFkZCgkc2xpZGVFbFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICAgICRpbWFnZXMuZWFjaChmdW5jdGlvbiAoaW1hZ2VJbmRleCwgaW1hZ2VFbCkge1xuICAgICAgICAgIHZhciAkaW1hZ2VFbCA9ICQoaW1hZ2VFbCk7XG4gICAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG5cbiAgICAgICAgICB2YXIgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICAgIHZhciBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgIHZhciBzcmNzZXQgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgIHZhciBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICB2YXIgJHBpY3R1cmVFbCA9ICRpbWFnZUVsLnBhcmVudCgncGljdHVyZScpO1xuXG4gICAgICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgKHNyYyB8fCBiYWNrZ3JvdW5kKSwgc3Jjc2V0LCBzaXplcywgZmFsc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCAoc3dpcGVyICYmICFzd2lwZXIucGFyYW1zKSB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgaWYgKGJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgJGltYWdlRWwuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgKFwidXJsKFxcXCJcIiArIGJhY2tncm91bmQgKyBcIlxcXCIpXCIpKTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NpemVzJywgc2l6ZXMpO1xuICAgICAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoJHBpY3R1cmVFbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkcGljdHVyZUVsLmNoaWxkcmVuKCdzb3VyY2UnKS5lYWNoKGZ1bmN0aW9uIChzb3VyY2VJbmRleCwgc291cmNlRWwpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkc291cmNlID0gJChzb3VyY2VFbCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICgkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNvdXJjZS5hdHRyKCdzcmNzZXQnLCAkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpO1xuICAgICAgICAgICAgICAgICAgICAkc291cmNlLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIHNyYyk7XG4gICAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAgICAgJHNsaWRlRWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnByZWxvYWRlckNsYXNzKSkpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgICAgICAgdmFyIHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVPcmlnaW5hbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilcIikpO1xuICAgICAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkdXBsaWNhdGVkU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlT3JpZ2luYWxJbmRleCArIFwiXFxcIl1cIikpO1xuICAgICAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlTG9hZCcsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgICB2YXIgc3dpcGVyUGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlclBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTtcblxuICAgICAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHN3aXBlclBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzbGlkZUV4aXN0KGluZGV4KSB7XG4gICAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlclBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiXVwiKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgeyBzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgPSB0cnVlOyB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzcykpKS5lYWNoKGZ1bmN0aW9uIChlbEluZGV4LCBzbGlkZUVsKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpc1ZpcnR1YWwgPyAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgOiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHsgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoYWN0aXZlSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IChwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ICYmIHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgPiAxKSkge1xuICAgICAgICAgICAgdmFyIGFtb3VudCA9IHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQ7XG4gICAgICAgICAgICB2YXIgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgICAgIHZhciBtYXhJbmRleCA9IE1hdGgubWluKGFjdGl2ZUluZGV4ICsgc3B2ICsgTWF0aC5tYXgoYW1vdW50LCBzcHYpLCBzbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBtaW5JbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gTWF0aC5tYXgoc3B2LCBhbW91bnQpLCAwKTtcbiAgICAgICAgICAgIC8vIE5leHQgU2xpZGVzXG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkkMSA8IG1heEluZGV4OyBpJDEgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAoc2xpZGVFeGlzdChpJDEpKSB7IHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkkMSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByZXYgU2xpZGVzXG4gICAgICAgICAgICBmb3IgKHZhciBpJDIgPSBtaW5JbmRleDsgaSQyIDwgYWN0aXZlSW5kZXg7IGkkMiArPSAxKSB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkkMikpIHsgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSQyKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyUGFyYW1zLnNsaWRlTmV4dENsYXNzKSkpO1xuICAgICAgICAgICAgaWYgKG5leHRTbGlkZS5sZW5ndGggPiAwKSB7IHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgobmV4dFNsaWRlKSk7IH1cblxuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlclBhcmFtcy5zbGlkZVByZXZDbGFzcykpKTtcbiAgICAgICAgICAgIGlmIChwcmV2U2xpZGUubGVuZ3RoID4gMCkgeyBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KHByZXZTbGlkZSkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgTGF6eSQxID0ge1xuICAgICAgbmFtZTogJ2xhenknLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGxhenk6IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBsb2FkUHJldk5leHQ6IGZhbHNlLFxuICAgICAgICAgIGxvYWRQcmV2TmV4dEFtb3VudDogMSxcbiAgICAgICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuXG4gICAgICAgICAgZWxlbWVudENsYXNzOiAnc3dpcGVyLWxhenknLFxuICAgICAgICAgIGxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRpbmcnLFxuICAgICAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgICAgICBwcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgbGF6eToge1xuICAgICAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGxvYWQ6IExhenkubG9hZC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBsb2FkSW5TbGlkZTogTGF6eS5sb2FkSW5TbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNjcm9sbDogZnVuY3Rpb24gc2Nyb2xsKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmICFzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNjcm9sbGJhckRyYWdNb3ZlOiBmdW5jdGlvbiBzY3JvbGxiYXJEcmFnTW92ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgfHwgKCFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0ICYmICFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2UoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIC8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cblxuICAgIHZhciBDb250cm9sbGVyID0ge1xuICAgICAgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgICAgICB2YXIgYmluYXJ5U2VhcmNoID0gKGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgICAgdmFyIG1pbkluZGV4O1xuICAgICAgICAgIHZhciBndWVzcztcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcbiAgICAgICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgICAgICB9O1xuICAgICAgICB9KCkpO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTtcbiAgICAgICAgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgICAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuICAgICAgICB2YXIgaTE7XG4gICAgICAgIHZhciBpMztcblxuICAgICAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgICAgICBpZiAoIXgyKSB7IHJldHVybiAwOyB9XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcbiAgICAgICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgICAgICBpMSA9IGkzIC0gMTtcblxuICAgICAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgICAgIHJldHVybiAoKCh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pKSArIHRoaXMueVtpMV07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3BcbiAgICAgICAgICAgID8gbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpXG4gICAgICAgICAgICA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc2V0VHJhbnNsYXRlJDEsIGJ5Q29udHJvbGxlcikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgICB2YXIgbXVsdGlwbGllcjtcbiAgICAgICAgdmFyIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgICAgICAvLyBpIGFtIG5vdCBzdXJlIHdoeSB0aGUgdmFsdWVzIGhhdmUgdG8gYmUgbXVsdGlwbGljYXRlZCB0aGlzIHdheSwgdHJpZWQgdG8gaW52ZXJ0IHRoZSBzbmFwR3JpZFxuICAgICAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9ICgodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIG11bHRpcGxpZXIpICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSBjLm1heFRyYW5zbGF0ZSgpIC0gY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgICAgICBjLnNldFRyYW5zbGF0ZShjb250cm9sbGVkVHJhbnNsYXRlLCBzd2lwZXIpO1xuICAgICAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcbiAgICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIGMudHJhbnNpdGlvblN0YXJ0KCk7XG4gICAgICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgICBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYy4kd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICAgIGMubG9vcEZpeCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICAgIHZhciBDb250cm9sbGVyJDEgPSB7XG4gICAgICBuYW1lOiAnY29udHJvbGxlcicsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgIGNvbnRyb2w6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgICAgICBjb250cm9sOiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCxcbiAgICAgICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IENvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzZXRUcmFuc2xhdGU6IENvbnRyb2xsZXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb246IENvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIGExMXkgPSB7XG4gICAgICBtYWtlRWxGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAgICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJzAnKTtcbiAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgIH0sXG4gICAgICBtYWtlRWxOb3RGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbE5vdEZvY3VzYWJsZSgkZWwpIHtcbiAgICAgICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICAgIHJldHVybiAkZWw7XG4gICAgICB9LFxuICAgICAgYWRkRWxSb2xlOiBmdW5jdGlvbiBhZGRFbFJvbGUoJGVsLCByb2xlKSB7XG4gICAgICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgICAgIHJldHVybiAkZWw7XG4gICAgICB9LFxuICAgICAgYWRkRWxMYWJlbDogZnVuY3Rpb24gYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgICAgICRlbC5hdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgICByZXR1cm4gJGVsO1xuICAgICAgfSxcbiAgICAgIGRpc2FibGVFbDogZnVuY3Rpb24gZGlzYWJsZUVsKCRlbCkge1xuICAgICAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gJGVsO1xuICAgICAgfSxcbiAgICAgIGVuYWJsZUVsOiBmdW5jdGlvbiBlbmFibGVFbCgkZWwpIHtcbiAgICAgICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAkZWw7XG4gICAgICB9LFxuICAgICAgb25FbnRlcktleTogZnVuY3Rpb24gb25FbnRlcktleShlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgeyByZXR1cm47IH1cbiAgICAgICAgdmFyICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkpIHtcbiAgICAgICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpKSB7XG4gICAgICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMuZmlyc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgJHRhcmdldEVsLmlzKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkpIHtcbiAgICAgICAgICAkdGFyZ2V0RWxbMF0uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBzd2lwZXIuYTExeS5saXZlUmVnaW9uO1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgbm90aWZpY2F0aW9uLmh0bWwoJycpO1xuICAgICAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVOYXZpZ2F0aW9uOiBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgICB2YXIgJG5leHRFbCA9IHJlZi4kbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuXG4gICAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkcHJldkVsKTtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJHByZXZFbCk7XG4gICAgICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkbmV4dEVsKTtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJG5leHRFbCk7XG4gICAgICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlUGFnaW5hdGlvbjogZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbigpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldEluZGV4LCBidWxsZXRFbCkge1xuICAgICAgICAgICAgdmFyICRidWxsZXRFbCA9ICQoYnVsbGV0RWwpO1xuICAgICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG4gICAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgICBzd2lwZXIuJGVsLmFwcGVuZChzd2lwZXIuYTExeS5saXZlUmVnaW9uKTtcblxuICAgICAgICAvLyBOYXZpZ2F0aW9uXG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICAgIHZhciAkbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbDtcbiAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkbmV4dEVsLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICAgICAgJG5leHRFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkcHJldkVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkcHJldkVsLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICAgICAgJHByZXZFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFnaW5hdGlvblxuICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbiAmJiBzd2lwZXIuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHsgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5yZW1vdmUoKTsgfVxuXG4gICAgICAgIHZhciAkbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbDtcbiAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAgICRwcmV2RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICAgIHZhciBBMTF5ID0ge1xuICAgICAgbmFtZTogJ2ExMXknLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGExMXk6IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBhMTF5OiB7XG4gICAgICAgICAgICBsaXZlUmVnaW9uOiAkKChcIjxzcGFuIGNsYXNzPVxcXCJcIiArIChzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MpICsgXCJcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCI+PC9zcGFuPlwiKSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKGExMXkpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeVttZXRob2ROYW1lXSA9IGExMXlbbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2UoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb21FZGdlOiBmdW5jdGlvbiBmcm9tRWRnZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFnaW5hdGlvblVwZGF0ZTogZnVuY3Rpb24gcGFnaW5hdGlvblVwZGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBIaXN0b3J5ID0ge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5KSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoIXdpbi5oaXN0b3J5IHx8ICF3aW4uaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgICBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoaXN0b3J5ID0gc3dpcGVyLmhpc3Rvcnk7XG4gICAgICAgIGhpc3RvcnkuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgICAgIGlmICghaGlzdG9yeS5wYXRocy5rZXkgJiYgIWhpc3RvcnkucGF0aHMudmFsdWUpIHsgcmV0dXJuOyB9XG4gICAgICAgIGhpc3Rvcnkuc2Nyb2xsVG9TbGlkZSgwLCBoaXN0b3J5LnBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldEhpc3RvcnlQb3BTdGF0ZTogZnVuY3Rpb24gc2V0SGlzdG9yeVBvcFN0YXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoKTtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uIGdldFBhdGhWYWx1ZXMoKSB7XG4gICAgICAgIHZhciBwYXRoQXJyYXkgPSB3aW4ubG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHsgcmV0dXJuIHBhcnQgIT09ICcnOyB9KTtcbiAgICAgICAgdmFyIHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICAgICAgcmV0dXJuIHsga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgfSxcbiAgICAgIHNldEhpc3Rvcnk6IGZ1bmN0aW9uIHNldEhpc3Rvcnkoa2V5LCBpbmRleCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgICAgICB2YXIgdmFsdWUgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICBpZiAoIXdpbi5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkgKyBcIi9cIiArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSB3aW4uaGlzdG9yeS5zdGF0ZTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgd2luLmhpc3RvcnkucmVwbGFjZVN0YXRlKHsgdmFsdWU6IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW4uaGlzdG9yeS5wdXNoU3RhdGUoeyB2YWx1ZTogdmFsdWUgfSwgbnVsbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2x1Z2lmeTogZnVuY3Rpb24gc2x1Z2lmeSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKClcbiAgICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgICAgICAgLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKVxuICAgICAgICAgIC5yZXBsYWNlKC8tLSsvZywgJy0nKVxuICAgICAgICAgIC5yZXBsYWNlKC9eLSsvLCAnJylcbiAgICAgICAgICAucmVwbGFjZSgvLSskLywgJycpO1xuICAgICAgfSxcbiAgICAgIHNjcm9sbFRvU2xpZGU6IGZ1bmN0aW9uIHNjcm9sbFRvU2xpZGUoc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICAgICAgdmFyIHNsaWRlSGlzdG9yeSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgSGlzdG9yeSQxID0ge1xuICAgICAgbmFtZTogJ2hpc3RvcnknLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgaGlzdG9yeToge1xuICAgICAgICAgICAgaW5pdDogSGlzdG9yeS5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldEhpc3Rvcnk6IEhpc3Rvcnkuc2V0SGlzdG9yeS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IEhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNjcm9sbFRvU2xpZGU6IEhpc3Rvcnkuc2Nyb2xsVG9TbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBkZXN0cm95OiBIaXN0b3J5LmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5pbml0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICAgICAgc3dpcGVyLmhpc3RvcnkuZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5oaXN0b3J5LnNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEhhc2hOYXZpZ2F0aW9uID0ge1xuICAgICAgb25IYXNoQ2FuZ2U6IGZ1bmN0aW9uIG9uSGFzaENhbmdlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2hhc2hDaGFuZ2UnKTtcbiAgICAgICAgdmFyIG5ld0hhc2ggPSBkb2MubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgICAgICB2YXIgYWN0aXZlU2xpZGVIYXNoID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpO1xuICAgICAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICAgICAgdmFyIG5ld0luZGV4ID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLWhhc2g9XFxcIlwiICsgbmV3SGFzaCArIFwiXFxcIl1cIikpLmluZGV4KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0SGFzaDogZnVuY3Rpb24gc2V0SGFzaCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLnJlcGxhY2VTdGF0ZSAmJiB3aW4uaGlzdG9yeSAmJiB3aW4uaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgICB3aW4uaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgKChcIiNcIiArIChzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJykpKSB8fCAnJykpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICAgIHZhciBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICAgICAgZG9jLmxvY2F0aW9uLmhhc2ggPSBoYXNoIHx8ICcnO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgKHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHZhciBoYXNoID0gZG9jLmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgICB2YXIgc3BlZWQgPSAwO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICAgICAgdmFyIHNsaWRlSGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICQod2luKS5vbignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICQod2luKS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gICAgdmFyIEhhc2hOYXZpZ2F0aW9uJDEgPSB7XG4gICAgICBuYW1lOiAnaGFzaC1uYXZpZ2F0aW9uJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICAgICAgd2F0Y2hTdGF0ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIGluaXQ6IEhhc2hOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgZGVzdHJveTogSGFzaE5hdmlnYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzZXRIYXNoOiBIYXNoTmF2aWdhdGlvbi5zZXRIYXNoLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIG9uSGFzaENhbmdlOiBIYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uc2V0SGFzaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uc2V0SGFzaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIC8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuXG4gICAgdmFyIEF1dG9wbGF5ID0ge1xuICAgICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgJGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHZhciBkZWxheSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbikge1xuICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyBzd2lwZXIuYXV0b3BsYXkucnVuKCk7IH1cbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZShzcGVlZCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkgeyBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpOyB9XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICBpZiAoc3BlZWQgPT09IDAgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBBdXRvcGxheSQxID0ge1xuICAgICAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBhdXRvcGxheToge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgICAgIHdhaXRGb3JUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICAgICAgcmV2ZXJzZURpcmVjdGlvbjogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHJ1bjogQXV0b3BsYXkucnVuLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHN0YXJ0OiBBdXRvcGxheS5zdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzdG9wOiBBdXRvcGxheS5zdG9wLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHBhdXNlOiBBdXRvcGxheS5wYXVzZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdGFydCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHN3aXBlci5hdXRvcGxheS5vblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiBiZWZvcmVUcmFuc2l0aW9uU3RhcnQoc3BlZWQsIGludGVybmFsKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKHNwZWVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzbGlkZXJGaXJzdE1vdmU6IGZ1bmN0aW9uIHNsaWRlckZpcnN0TW92ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgJiYgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgc3dpcGVyLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgRmFkZSA9IHtcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgICAgdmFyIHR4ID0gLW9mZnNldDtcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgeyB0eCAtPSBzd2lwZXIudHJhbnNsYXRlOyB9XG4gICAgICAgICAgdmFyIHR5ID0gMDtcbiAgICAgICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGVcbiAgICAgICAgICAgID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKCRzbGlkZUVsWzBdLnByb2dyZXNzKSwgMClcbiAgICAgICAgICAgIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgICAgICRzbGlkZUVsXG4gICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgICBzbGlkZXMudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEVmZmVjdEZhZGUgPSB7XG4gICAgICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgICBjcm9zc0ZhZGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgICAgIHNldFRyYW5zbGF0ZTogRmFkZS5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbjogRmFkZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJmYWRlXCIpKTtcbiAgICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEN1YmUgPSB7XG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdmFyIHN3aXBlcldpZHRoID0gc3dpcGVyLndpZHRoO1xuICAgICAgICB2YXIgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgICAgIHZhciBzd2lwZXJTaXplID0gc3dpcGVyLnNpemU7XG4gICAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgICAgIHZhciBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgICAgdmFyIHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgICAgICB2YXIgJGN1YmVTaGFkb3dFbDtcbiAgICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7IGhlaWdodDogKHN3aXBlcldpZHRoICsgXCJweFwiKSB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzbGlkZUFuZ2xlID0gc2xpZGVJbmRleCAqIDkwO1xuICAgICAgICAgIHZhciByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICAgICAgdmFyIHR4ID0gMDtcbiAgICAgICAgICB2YXIgdHkgPSAwO1xuICAgICAgICAgIHZhciB0eiA9IDA7XG4gICAgICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgICAgICB0eCA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICAgICAgdHogPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICAgICAgdHggPSBzd2lwZXJTaXplICsgKHJvdW5kICogNCAqIHN3aXBlclNpemUpO1xuICAgICAgICAgICAgdHogPSBzd2lwZXJTaXplO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgICAgIHR4ID0gLXN3aXBlclNpemU7XG4gICAgICAgICAgICB0eiA9ICgzICogc3dpcGVyU2l6ZSkgKyAoc3dpcGVyU2l6ZSAqIDQgKiByb3VuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICAgIHR4ID0gLXR4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgICAgdHggPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBcInJvdGF0ZVgoXCIgKyAoaXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKGlzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwKSArIFwiZGVnKSB0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIFwiICsgdHogKyBcInB4KVwiO1xuICAgICAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgICAgIHdyYXBwZXJSb3RhdGUgPSAoc2xpZGVJbmRleCAqIDkwKSArIChwcm9ncmVzcyAqIDkwKTtcbiAgICAgICAgICAgIGlmIChydGwpIHsgd3JhcHBlclJvdGF0ZSA9ICgtc2xpZGVJbmRleCAqIDkwKSAtIChwcm9ncmVzcyAqIDkwKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgICAgIHZhciBzaGFkb3dCZWZvcmUgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgICAgIHZhciBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHNoYWRvd0FmdGVyID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSB7IHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTsgfVxuICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgeyBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzogKFwiNTAlIDUwJSAtXCIgKyAoc3dpcGVyU2l6ZSAvIDIpICsgXCJweFwiKSxcbiAgICAgICAgICAnLW1vei10cmFuc2Zvcm0tb3JpZ2luJzogKFwiNTAlIDUwJSAtXCIgKyAoc3dpcGVyU2l6ZSAvIDIpICsgXCJweFwiKSxcbiAgICAgICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiAoXCI1MCUgNTAlIC1cIiArIChzd2lwZXJTaXplIC8gMikgKyBcInB4XCIpLFxuICAgICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogKFwiNTAlIDUwJSAtXCIgKyAoc3dpcGVyU2l6ZSAvIDIpICsgXCJweFwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgKChzd2lwZXJXaWR0aCAvIDIpICsgcGFyYW1zLnNoYWRvd09mZnNldCkgKyBcInB4LCBcIiArICgtc3dpcGVyV2lkdGggLyAyKSArIFwicHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoXCIgKyAocGFyYW1zLnNoYWRvd1NjYWxlKSArIFwiKVwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gKE1hdGguZmxvb3IoTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLyA5MCkgKiA5MCk7XG4gICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDEuNSAtIChcbiAgICAgICAgICAgICAgKE1hdGguc2luKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKVxuICAgICAgICAgICAgICArIChNYXRoLmNvcygoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB2YXIgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICAgICAgdmFyIHNjYWxlMiA9IHBhcmFtcy5zaGFkb3dTY2FsZSAvIG11bHRpcGxpZXI7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKChcInNjYWxlM2QoXCIgKyBzY2FsZTEgKyBcIiwgMSwgXCIgKyBzY2FsZTIgKyBcIikgdHJhbnNsYXRlM2QoMHB4LCBcIiArICgoc3dpcGVySGVpZ2h0IC8gMikgKyBvZmZzZXQpICsgXCJweCwgXCIgKyAoLXN3aXBlckhlaWdodCAvIDIgLyBzY2FsZTIpICsgXCJweCkgcm90YXRlWCgtOTBkZWcpXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHpGYWN0b3IgPSAoQnJvd3Nlci5pc1NhZmFyaSB8fCBCcm93c2VyLmlzV2ViVmlldykgPyAoLXN3aXBlclNpemUgLyAyKSA6IDA7XG4gICAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgICAudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDBweCwwLFwiICsgekZhY3RvciArIFwicHgpIHJvdGF0ZVgoXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gMCA6IHdyYXBwZXJSb3RhdGUpICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXdyYXBwZXJSb3RhdGUgOiAwKSArIFwiZGVnKVwiKSk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICBzbGlkZXNcbiAgICAgICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgRWZmZWN0Q3ViZSA9IHtcbiAgICAgIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgY3ViZUVmZmVjdDoge1xuICAgICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgICAgICBzaGFkb3dTY2FsZTogMC45NCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgICAgICBzZXRUcmFuc2xhdGU6IEN1YmUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb246IEN1YmUuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiY3ViZVwiKSk7XG4gICAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcIjNkXCIpKTtcbiAgICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuY3ViZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIEZsaXAgPSB7XG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgICAgdmFyIHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcztcbiAgICAgICAgICB2YXIgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgICAgICB2YXIgcm90YXRlWCA9IDA7XG4gICAgICAgICAgdmFyIHR4ID0gLW9mZnNldDtcbiAgICAgICAgICB2YXIgdHkgPSAwO1xuICAgICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgICAgdHggPSAwO1xuICAgICAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Quc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgc2hhZG93QmVmb3JlID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHsgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSB7IHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgJHNsaWRlRWxcbiAgICAgICAgICAgIC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICAgIHNsaWRlc1xuICAgICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgIHZhciBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHNsaWRlcy5lcShhY3RpdmVJbmRleCkudHJhbnNpdGlvbkVuZChmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgLy8gaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBFZmZlY3RGbGlwID0ge1xuICAgICAgbmFtZTogJ2VmZmVjdC1mbGlwJyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBmbGlwRWZmZWN0OiB7XG4gICAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICAgIGxpbWl0Um90YXRpb246IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICAgICAgc2V0VHJhbnNsYXRlOiBGbGlwLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBGbGlwLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcImZsaXBcIikpO1xuICAgICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCIzZFwiKSk7XG4gICAgICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgICAgIH07XG4gICAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBDb3ZlcmZsb3cgPSB7XG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciBzd2lwZXJXaWR0aCA9IHN3aXBlci53aWR0aDtcbiAgICAgICAgdmFyIHN3aXBlckhlaWdodCA9IHN3aXBlci5oZWlnaHQ7XG4gICAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgICB2YXIgc2xpZGVzU2l6ZXNHcmlkID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZDtcbiAgICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgICAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyAoc3dpcGVyV2lkdGggLyAyKSA6IC10cmFuc2Zvcm0gKyAoc3dpcGVySGVpZ2h0IC8gMik7XG4gICAgICAgIHZhciByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSBwYXJhbXMuZGVwdGg7XG4gICAgICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgICB2YXIgc2xpZGVPZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgICB2YXIgb2Zmc2V0TXVsdGlwbGllciA9ICgoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSAoc2xpZGVTaXplIC8gMikpIC8gc2xpZGVTaXplKSAqIHBhcmFtcy5tb2RpZmllcjtcblxuICAgICAgICAgIHZhciByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgICAgdmFyIHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgICAgICAvLyB2YXIgcm90YXRlWiA9IDBcbiAgICAgICAgICB2YXIgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgICAgIHZhciBzdHJldGNoID0gcGFyYW1zLnN0cmV0Y2g7XG4gICAgICAgICAgLy8gQWxsb3cgcGVyY2VudGFnZSB0byBtYWtlIGEgcmVsYXRpdmUgc3RyZXRjaCBmb3IgcmVzcG9uc2l2ZSBzbGlkZXJzXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHN0cmV0Y2ggPSAoKHBhcnNlRmxvYXQocGFyYW1zLnN0cmV0Y2gpIC8gMTAwKSAqIHNsaWRlU2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHN0cmV0Y2ggKiAob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBzdHJldGNoICogKG9mZnNldE11bHRpcGxpZXIpIDogMDtcblxuICAgICAgICAgIHZhciBzY2FsZSA9IDEgLSAoMSAtIHBhcmFtcy5zY2FsZSkgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgICAgIC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG4gICAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHsgdHJhbnNsYXRlWCA9IDA7IH1cbiAgICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgeyB0cmFuc2xhdGVZID0gMDsgfVxuICAgICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB7IHRyYW5zbGF0ZVogPSAwOyB9XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHsgcm90YXRlWSA9IDA7IH1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgeyByb3RhdGVYID0gMDsgfVxuICAgICAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgeyBzY2FsZSA9IDA7IH1cblxuICAgICAgICAgIHZhciBzbGlkZVRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyB0cmFuc2xhdGVYICsgXCJweCxcIiArIHRyYW5zbGF0ZVkgKyBcInB4LFwiICsgdHJhbnNsYXRlWiArIFwicHgpICByb3RhdGVYKFwiICsgcm90YXRlWCArIFwiZGVnKSByb3RhdGVZKFwiICsgcm90YXRlWSArIFwiZGVnKSBzY2FsZShcIiArIHNjYWxlICsgXCIpXCI7XG5cbiAgICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oc2xpZGVUcmFuc2Zvcm0pO1xuICAgICAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG4gICAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgICB2YXIgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgICB2YXIgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAkc2hhZG93QmVmb3JlRWwgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QmVmb3JlRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAkc2hhZG93QWZ0ZXJFbCA9ICQoKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QWZ0ZXJFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCkgeyAkc2hhZG93QmVmb3JlRWxbMF0uc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7IH1cbiAgICAgICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpIHsgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9ICgtb2Zmc2V0TXVsdGlwbGllcikgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGNvcnJlY3QgcGVyc3BlY3RpdmUgZm9yIElFMTBcbiAgICAgICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIHZhciB3cyA9ICR3cmFwcGVyRWxbMF0uc3R5bGU7XG4gICAgICAgICAgd3MucGVyc3BlY3RpdmVPcmlnaW4gPSBjZW50ZXIgKyBcInB4IDUwJVwiO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnNsaWRlc1xuICAgICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBFZmZlY3RDb3ZlcmZsb3cgPSB7XG4gICAgICBuYW1lOiAnZWZmZWN0LWNvdmVyZmxvdycsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICAgICAgcm90YXRlOiA1MCxcbiAgICAgICAgICBzdHJldGNoOiAwLFxuICAgICAgICAgIGRlcHRoOiAxMDAsXG4gICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICAgICAgc2V0VHJhbnNsYXRlOiBDb3ZlcmZsb3cuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb246IENvdmVyZmxvdy5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiY292ZXJmbG93XCIpKTtcbiAgICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiM2RcIikpO1xuXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBUaHVtYnMgPSB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5wYXJhbXM7XG4gICAgICAgIHZhciB0aHVtYnNQYXJhbXMgPSByZWYudGh1bWJzO1xuICAgICAgICB2YXIgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFV0aWxzLmlzT2JqZWN0KHRodW1ic1BhcmFtcy5zd2lwZXIpKSB7XG4gICAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3MoVXRpbHMuZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIHN3aXBlci50aHVtYnMub25UaHVtYkNsaWNrKTtcbiAgICAgIH0sXG4gICAgICBvblRodW1iQ2xpY2s6IGZ1bmN0aW9uIG9uVGh1bWJDbGljaygpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBjbGlja2VkSW5kZXggPSB0aHVtYnNTd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgICAgICB2YXIgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICAgICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAkKGNsaWNrZWRTbGlkZSkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHNsaWRlVG9JbmRleDtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KCQodGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgICBpZiAoc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkucHJldkFsbCgoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKSkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlVG9JbmRleCArIFwiXFxcIl1cIikpLmVxKDApLmluZGV4KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDsgfVxuICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXh0SW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDsgfVxuICAgICAgICAgIGVsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgeyBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7IH1cbiAgICAgICAgICBlbHNlIHsgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4OyB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICghdGh1bWJzU3dpcGVyKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bydcbiAgICAgICAgICA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpXG4gICAgICAgICAgOiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG5cbiAgICAgICAgdmFyIGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgICAgICB2YXIgdXNlT2Zmc2V0ID0gYXV0b1Njcm9sbE9mZnNldCAmJiAhdGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wO1xuICAgICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICAgIHZhciBuZXdUaHVtYnNJbmRleDtcbiAgICAgICAgICB2YXIgZGlyZWN0aW9uO1xuICAgICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIGlmICh0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkuaGFzQ2xhc3ModGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgdGh1bWJzU3dpcGVyLl9jbGllbnRMZWZ0ID0gdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmluZCBhY3R1YWwgdGh1bWJzIGluZGV4IHRvIHNsaWRlIHRvXG4gICAgICAgICAgICB2YXIgcHJldlRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlc1xuICAgICAgICAgICAgICAuZXEoY3VycmVudFRodW1ic0luZGV4KVxuICAgICAgICAgICAgICAucHJldkFsbCgoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXgpICsgXCJcXFwiXVwiKSkuZXEoMClcbiAgICAgICAgICAgICAgLmluZGV4KCk7XG4gICAgICAgICAgICB2YXIgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlc1xuICAgICAgICAgICAgICAuZXEoY3VycmVudFRodW1ic0luZGV4KVxuICAgICAgICAgICAgICAubmV4dEFsbCgoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXgpICsgXCJcXFwiXVwiKSkuZXEoMClcbiAgICAgICAgICAgICAgLmluZGV4KCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByZXZUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXh0VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7IG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4OyB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgeyBuZXdUaHVtYnNJbmRleCA9IGN1cnJlbnRUaHVtYnNJbmRleDsgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSB7IG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4OyB9XG4gICAgICAgICAgICBlbHNlIHsgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodXNlT2Zmc2V0KSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgICAgICBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggKyBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSAtIDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlVG8obmV3VGh1bWJzSW5kZXgsIGluaXRpYWwgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICAgICAgdmFyIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgICAgICB2YXIgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMudGh1bWJzLm11bHRpcGxlQWN0aXZlVGh1bWJzKSB7XG4gICAgICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gTWF0aC5mbG9vcih0aHVtYnNUb0FjdGl2YXRlKTtcblxuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLnJlbW92ZUNsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8ICh0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRodW1ic1N3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAoc3dpcGVyLnJlYWxJbmRleCArIGkpICsgXCJcXFwiXVwiKSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRodW1ic1RvQWN0aXZhdGU7IGkkMSArPSAxKSB7XG4gICAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5yZWFsSW5kZXggKyBpJDEpLmFkZENsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICAgIHZhciBUaHVtYnMkMSA9IHtcbiAgICAgIG5hbWU6ICd0aHVtYnMnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHRodW1iczoge1xuICAgICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgICBtdWx0aXBsZUFjdGl2ZVRodW1iczogdHJ1ZSxcbiAgICAgICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgICAgIHRodW1ic0NvbnRhaW5lckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci10aHVtYnMnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICAgIHRodW1iczoge1xuICAgICAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICAgICAgaW5pdDogVGh1bWJzLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgICAgdXBkYXRlOiBUaHVtYnMudXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICAgIG9uVGh1bWJDbGljazogVGh1bWJzLm9uVGh1bWJDbGljay5iaW5kKHN3aXBlciksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICB2YXIgcmVmID0gc3dpcGVyLnBhcmFtcztcbiAgICAgICAgICB2YXIgdGh1bWJzID0gcmVmLnRodW1icztcbiAgICAgICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIudGh1bWJzLmluaXQoKTtcbiAgICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgICBpZiAoIXRodW1ic1N3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgICBpZiAoc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkICYmIHRodW1ic1N3aXBlcikge1xuICAgICAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICAvLyBTd2lwZXIgQ2xhc3NcblxuICAgIHZhciBjb21wb25lbnRzID0gW1xuICAgICAgRGV2aWNlJDEsXG4gICAgICBTdXBwb3J0JDEsXG4gICAgICBCcm93c2VyJDEsXG4gICAgICBSZXNpemUsXG4gICAgICBPYnNlcnZlciQxLFxuICAgICAgVmlydHVhbCQxLFxuICAgICAgS2V5Ym9hcmQkMSxcbiAgICAgIE1vdXNld2hlZWwkMSxcbiAgICAgIE5hdmlnYXRpb24kMSxcbiAgICAgIFBhZ2luYXRpb24kMSxcbiAgICAgIFNjcm9sbGJhciQxLFxuICAgICAgUGFyYWxsYXgkMSxcbiAgICAgIFpvb20kMSxcbiAgICAgIExhenkkMSxcbiAgICAgIENvbnRyb2xsZXIkMSxcbiAgICAgIEExMXksXG4gICAgICBIaXN0b3J5JDEsXG4gICAgICBIYXNoTmF2aWdhdGlvbiQxLFxuICAgICAgQXV0b3BsYXkkMSxcbiAgICAgIEVmZmVjdEZhZGUsXG4gICAgICBFZmZlY3RDdWJlLFxuICAgICAgRWZmZWN0RmxpcCxcbiAgICAgIEVmZmVjdENvdmVyZmxvdyxcbiAgICAgIFRodW1icyQxXG4gICAgXTtcblxuICAgIGlmICh0eXBlb2YgU3dpcGVyLnVzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIFN3aXBlci51c2UgPSBTd2lwZXIuQ2xhc3MudXNlO1xuICAgICAgU3dpcGVyLmluc3RhbGxNb2R1bGUgPSBTd2lwZXIuQ2xhc3MuaW5zdGFsbE1vZHVsZTtcbiAgICB9XG5cbiAgICBTd2lwZXIudXNlKGNvbXBvbmVudHMpO1xuXG4gICAgcmV0dXJuIFN3aXBlcjtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXBlci5qcy5tYXBcbjtcclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGVzVG9QYXRjaCA9IFsnRG9jdW1lbnRUeXBlJywgJ0VsZW1lbnQnLCAnQ2hhcmFjdGVyRGF0YSddLFxuICAgICAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIC8vIFRoZSBjaGVjayBoZXJlIHNlZW1zIHBvaW50bGVzcywgc2luY2Ugd2UncmUgbm90IGFkZGluZyB0aGlzXG4gICAgICAgIC8vIG1ldGhvZCB0byB0aGUgcHJvdG90eXBlcyBvZiBhbnkgYW55IGVsZW1lbnRzIHRoYXQgQ0FOIGJlIHRoZVxuICAgICAgICAvLyByb290IG9mIHRoZSBET00uIEhvd2V2ZXIsIGl0J3MgcmVxdWlyZWQgYnkgc3BlYyAoc2VlIHBvaW50IDEgb2ZcbiAgICAgICAgLy8gaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tY2hpbGRub2RlLXJlbW92ZSkgYW5kIHdvdWxkXG4gICAgICAgIC8vIHRoZW9yZXRpY2FsbHkgbWFrZSBhIGRpZmZlcmVuY2UgaWYgc29tZWJvZHkgLmFwcGx5KCllZCB0aGlzXG4gICAgICAgIC8vIG1ldGhvZCB0byB0aGUgRE9NJ3Mgcm9vdCBub2RlLCBzbyBsZXQncyByb2xsIHdpdGggaXQuXG4gICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXNUb1BhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZXNUb1BhdGNoW2ldO1xuICAgICAgICBpZiAod2luZG93W3R5cGVdICYmICF3aW5kb3dbdHlwZV0ucHJvdG90eXBlLnJlbW92ZSkge1xuICAgICAgICAgICAgd2luZG93W3R5cGVdLnByb3RvdHlwZS5yZW1vdmUgPSByZW1vdmU7XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuKGZ1bmN0aW9uIChyb290KSB7XG5cbiAgICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBwcm9taXNlLXBvbHlmaWxsIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuICAgIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICAgIHZhciBzZXRUaW1lb3V0RnVuYyA9IHNldFRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBub29wKCkge31cblxuICAgIC8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICAgIGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICAgICAgICBpZiAoX3R5cGVvZih0aGlzKSAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpO1xuICAgICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBmdW5jdGlvbicpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgICAgIHRoaXMuX2hhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RlZmVycmVkcyA9IFtdO1xuXG4gICAgICAgIGRvUmVzb2x2ZShmbiwgdGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gICAgICAgIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykge1xuICAgICAgICAgICAgc2VsZiA9IHNlbGYuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gMCkge1xuICAgICAgICAgICAgc2VsZi5fZGVmZXJyZWRzLnB1c2goZGVmZXJyZWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX2hhbmRsZWQgPSB0cnVlO1xuICAgICAgICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICAgICAgICAgIGlmIChjYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIChzZWxmLl9zdGF0ZSA9PT0gMSA/IHJlc29sdmUgOiByZWplY3QpKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmV0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXQgPSBjYihzZWxmLl92YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgcmV0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTogaHR0cHM6Ly9naXRodWIuY29tL3Byb21pc2VzLWFwbHVzL3Byb21pc2VzLXNwZWMjdGhlLXByb21pc2UtcmVzb2x1dGlvbi1wcm9jZWR1cmVcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gc2VsZikgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAmJiAoKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmV3VmFsdWUpKSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGVuID0gbmV3VmFsdWUudGhlbjtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gMztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxlKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBkb1Jlc29sdmUoYmluZCh0aGVuLCBuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fc3RhdGUgPSAxO1xuICAgICAgICAgICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIGZpbmFsZShzZWxmKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KHNlbGYsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0KHNlbGYsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHNlbGYuX3N0YXRlID0gMjtcbiAgICAgICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgZmluYWxlKHNlbGYpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9oYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHNlbGYuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX2RlZmVycmVkcyA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbWlzZSkge1xuICAgICAgICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsO1xuICAgICAgICB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uUmVqZWN0ZWQgOiBudWxsO1xuICAgICAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlXG4gICAgICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gICAgICpcbiAgICAgKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9SZXNvbHZlKGZuLCBzZWxmKSB7XG4gICAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc2VsZiwgdmFsdWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHNlbGYsIHJlYXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlamVjdChzZWxmLCBleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG4gICAgfTtcblxuICAgIFByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHByb20gPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICAgICAgICBoYW5kbGUodGhpcywgbmV3IEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb20pKTtcbiAgICAgICAgcmV0dXJuIHByb207XG4gICAgfTtcblxuICAgIFByb21pc2UuYWxsID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgdmFyIHJlbWFpbmluZyA9IGFyZ3MubGVuZ3RoO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAmJiAoKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbCkpID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZW4gPSB2YWwudGhlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW4uY2FsbCh2YWwsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlcyhpLCBhcmdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBQcm9taXNlLnJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByb21pc2UucmFjZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0udGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gVXNlIHBvbHlmaWxsIGZvciBzZXRJbW1lZGlhdGUgZm9yIHBlcmZvcm1hbmNlIGdhaW5zXG4gICAgUHJvbWlzZS5faW1tZWRpYXRlRm4gPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9uIChmbikge1xuICAgICAgICBzZXRJbW1lZGlhdGUoZm4pO1xuICAgIH0gfHwgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXRGdW5jKGZuLCAwKTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uRm4oZXJyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246JywgZXJyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBpbW1lZGlhdGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSBjYWxsYmFja3NcbiAgICAgKiBAcGFyYW0gZm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0byBleGVjdXRlXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBQcm9taXNlLl9zZXRJbW1lZGlhdGVGbiA9IGZ1bmN0aW9uIF9zZXRJbW1lZGlhdGVGbihmbikge1xuICAgICAgICBQcm9taXNlLl9pbW1lZGlhdGVGbiA9IGZuO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gdW5oYW5kbGVkIHJlamVjdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gdW5oYW5kbGVkIHJlamVjdGlvblxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUHJvbWlzZS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm4oZm4pIHtcbiAgICAgICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmbjtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKCFyb290LlByb21pc2UpIHtcbiAgICAgICAgcm9vdC5Qcm9taXNlID0gUHJvbWlzZTtcbiAgICB9XG59KSh3aW5kb3cpO1xuXG4vKiBnbG9iYWwgUHJvbWlzZSAqL1xuKGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpZiAoIXdpbmRvdy5Qcm9taXNlKSB7XG4gICAgICAgIHdpbmRvdy5Qcm9taXNlID0gUHJvbWlzZTtcbiAgICB9XG5cbiAgICB2YXIgUlVMRV9SRVFVSVJFRCA9ICdyZXF1aXJlZCcsXG4gICAgICAgIFJVTEVfRU1BSUwgPSAnZW1haWwnLFxuICAgICAgICBSVUxFX01JTkxFTkdUSCA9ICdtaW5MZW5ndGgnLFxuICAgICAgICBSVUxFX01BWExFTkdUSCA9ICdtYXhMZW5ndGgnLFxuICAgICAgICBSVUxFX1BBU1NXT1JEID0gJ3Bhc3N3b3JkJyxcbiAgICAgICAgUlVMRV9aSVAgPSAnemlwJyxcbiAgICAgICAgUlVMRV9QSE9ORSA9ICdwaG9uZScsXG4gICAgICAgIFJVTEVfUkVNT1RFID0gJ3JlbW90ZScsXG4gICAgICAgIFJVTEVfU1RSRU5HVEggPSAnc3RyZW5ndGgnLFxuICAgICAgICBSVUxFX0ZVTkNUSU9OID0gJ2Z1bmN0aW9uJztcblxuICAgIHZhciBmb3JtYXRQYXJhbXMgPSBmdW5jdGlvbiBmb3JtYXRQYXJhbXMocGFyYW1zLCBtZXRob2QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxldHRlciA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSAncG9zdCcgPyAnJyA6ICc/JztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHRlciArIHBhcmFtcy5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmoubmFtZSArICc9JyArIG9iai52YWx1ZTtcbiAgICAgICAgICAgIH0pLmpvaW4oJyYnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGV0dGVyICsgT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHBhcmFtc1trZXldO1xuICAgICAgICB9KS5qb2luKCcmJyk7XG4gICAgfTtcblxuICAgIHZhciBhamF4ID0gZnVuY3Rpb24gYWpheChvcHRpb25zKSB7XG4gICAgICAgIHZhciB1cmwgPSBvcHRpb25zLnVybCxcbiAgICAgICAgICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgZGF0YSA9IG9wdGlvbnMuZGF0YSxcbiAgICAgICAgICAgIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZyxcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFjayxcbiAgICAgICAgICAgIGVycm9yID0gb3B0aW9ucy5lcnJvcjtcblxuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCd0ZXN0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXN5bmMgPSBvcHRpb25zLmFzeW5jID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB2YXIgcGFyYW1zID0gZm9ybWF0UGFyYW1zKGRhdGEsICdnZXQnKTtcbiAgICAgICAgdmFyIGJvZHkgPSBudWxsO1xuXG4gICAgICAgIGlmIChtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gJ3Bvc3QnKSB7XG4gICAgICAgICAgICBib2R5ID0gZm9ybWF0UGFyYW1zKGRhdGEsICdwb3N0Jyk7XG4gICAgICAgICAgICBwYXJhbXMgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsICsgcGFyYW1zLCBhc3luYyk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICYmIGVycm9yKHRoaXMucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5zZW5kKGJvZHkpO1xuICAgIH07XG5cbiAgICB2YXIgSnVzdFZhbGlkYXRlID0gZnVuY3Rpb24gSnVzdFZhbGlkYXRlKHNlbGVjdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMucnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXMgfHwge307XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMgfHwgdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbG9yV3JvbmcgPSB0aGlzLm9wdGlvbnMuY29sb3JXcm9uZyB8fCAnI0I4MTExMSc7XG4gICAgICAgIHRoaXMucmVzdWx0ID0ge307XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdGhpcy5vcHRpb25zLnRvb2x0aXAgfHwge307XG4gICAgICAgIHRoaXMudG9vbHRpcEZhZGVPdXRUaW1lID0gdGhpcy50b29sdGlwLmZhZGVPdXRUaW1lIHx8IDUwMDA7XG4gICAgICAgIHRoaXMudG9vbHRpcEZhZGVPdXRDbGFzcyA9IHRoaXMudG9vbHRpcC5mYWRlT3V0Q2xhc3MgfHwgJ2p1c3QtdmFsaWRhdGUtdG9vbHRpcC1oaWRlJztcbiAgICAgICAgdGhpcy50b29sdGlwU2VsZWN0b3JXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnRvb2x0aXAuc2VsZWN0b3JXcmFwKS5sZW5ndGggPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMudG9vbHRpcC5zZWxlY3RvcldyYXApIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmp1c3QtdmFsaWRhdGUtdG9vbHRpcC1jb250YWluZXInKTtcbiAgICAgICAgdGhpcy5iaW5kSGFuZGxlcktleXVwID0gdGhpcy5oYW5kbGVyS2V5dXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJtaXRIYW5kbGVyID0gdGhpcy5vcHRpb25zLnN1Ym1pdEhhbmRsZXIgfHwgdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmludmFsaWRGb3JtQ2FsbGJhY2sgPSB0aGlzLm9wdGlvbnMuaW52YWxpZEZvcm1DYWxsYmFjayB8fCB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvbWlzZXNSZW1vdGUgPSBbXTtcbiAgICAgICAgdGhpcy5pc1ZhbGlkYXRpb25TdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZm9jdXNXcm9uZ0ZpZWxkID0gdGhpcy5vcHRpb25zLmZvY3VzV3JvbmdGaWVsZCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5SRUdFWFAgPSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgZW1haWw6IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLFxuICAgICAgICAgICAgemlwOiAvXlxcZHs1fSgtXFxkezR9KT8kLyxcbiAgICAgICAgICAgIHBob25lOiAvXihbMC05XSggfC0pPyk/KFxcKD9bMC05XXszfVxcKT98WzAtOV17M30pKCB8LSk/KFswLTldezN9KCB8LSk/WzAtOV17NH18W2EtekEtWjAtOV17N30pJC8sXG4gICAgICAgICAgICBwYXNzd29yZDogL1teXFx3XFxkXSooKFswLTldKy4qW0EtWmEtel0rLiopfFtBLVphLXpdKy4qKFswLTldKy4qKSkvLFxuICAgICAgICAgICAgc3RyZW5ndGhQYXNzOiAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZClbYS16QS1aXFxkXS9cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ERUZBVUxUX1JFTU9URV9FUlJPUiA9ICdFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB0b29sdGlwc1RpbWVyOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXRGb3JtKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpKTtcbiAgICB9O1xuXG4gICAgSnVzdFZhbGlkYXRlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZGVmYXVsdFJ1bGVzOiB7XG4gICAgICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMyxcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1heExlbmd0aDogMzAwLFxuICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB7XG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbWluTGVuZ3RoOiA0LFxuICAgICAgICAgICAgICAgIG1heExlbmd0aDogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHppcDoge1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHppcDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBob25lOiB7XG4gICAgICAgICAgICAgICAgcGhvbmU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZWZhdWx0TWVzc2FnZXM6IHtcbiAgICAgICAgICAgIHJlcXVpcmVkOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIGVtYWlsOiAnUGxlYXNlLCB0eXBlIGEgdmFsaWQgZW1haWwnLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiAnVGhlIGZpZWxkIG11c3QgY29udGFpbiBhIG1heGltdW0gb2YgOnZhbHVlIGNoYXJhY3RlcnMnLFxuICAgICAgICAgICAgbWluTGVuZ3RoOiAnVGhlIGZpZWxkIG11c3QgY29udGFpbiBhIG1pbmltdW0gb2YgOnZhbHVlIGNoYXJhY3RlcnMnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICdQYXNzd29yZCBpcyBub3QgdmFsaWQnLFxuICAgICAgICAgICAgcmVtb3RlOiAnRW1haWwgYWxyZWFkeSBleGlzdHMnLFxuICAgICAgICAgICAgc3RyZW5ndGg6ICdQYXNzd29yZCBtdXN0IGNvbnRlbnRzIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBvbmUgbG93ZXJjYXNlIGxldHRlciBhbmQgb25lIG51bWJlcicsXG4gICAgICAgICAgICBmdW5jdGlvbjogJ0Z1bmN0aW9uIHJldHVybmVkIGZhbHNlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZXl1cCBoYW5kbGVyXG4gICAgICAgICAqIEBwYXJhbSBldlxuICAgICAgICAgKi9cbiAgICAgICAgaGFuZGxlcktleXVwOiBmdW5jdGlvbiBoYW5kbGVyS2V5dXAoZXYpIHtcbiAgICAgICAgICAgIHZhciBlbGVtID0gZXYudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsaWRhdGUtZmllbGQnKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZWxlbS52YWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlc3VsdFtpdGVtLm5hbWVdO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUl0ZW0oe1xuICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICBncm91cDogW10sXG4gICAgICAgICAgICAgICAgaXNLZXl1cENoYW5nZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckVycm9ycygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldHRlckV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHNldHRlckV2ZW50TGlzdGVuZXIoaXRlbSwgZXZlbnQsIGhhbmRsZXIsIHR5cGUpIHtcbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ2tleXVwJykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLmJpbmRIYW5kbGVyS2V5dXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdmUnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRFbGVtZW50c1JlYWxWYWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHNSZWFsVmFsdWUoKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW1zID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcqJyksXG4gICAgICAgICAgICAgICAgbmFtZSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gJGVsZW1zW2ldLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbXNbaV0udHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gJGVsZW1zW2ldLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSAkZWxlbXNbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWxpZGF0aW9uRmFpbGVkOiBmdW5jdGlvbiB2YWxpZGF0aW9uRmFpbGVkKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW52YWxpZEZvcm1DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZEZvcm1DYWxsYmFjayh0aGlzLnJlc3VsdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciAkZmlyc3RFcnJvckZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXZhbGlkYXRlLWVycm9yLWZpZWxkJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzV3JvbmdGaWVsZCAmJiAkZmlyc3RFcnJvckZpZWxkICYmICRmaXJzdEVycm9yRmllbGQuZm9jdXMpIHtcbiAgICAgICAgICAgICAgICAkZmlyc3RFcnJvckZpZWxkLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGlvblN1Y2Nlc3M6IGZ1bmN0aW9uIHZhbGlkYXRpb25TdWNjZXNzKCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucmVzdWx0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWJtaXRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFsVmFsdWVzID0gdGhpcy5nZXRFbGVtZW50c1JlYWxWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdEhhbmRsZXIodGhpcy4kZm9ybSwgcmVhbFZhbHVlcywgYWpheCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLnN1Ym1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldEZvcm06IGZ1bmN0aW9uIHNldEZvcm0oZm9ybSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy4kZm9ybSA9IGZvcm07XG4gICAgICAgICAgICB0aGlzLiRmb3JtLnNldEF0dHJpYnV0ZSgnbm92YWxpZGF0ZScsICdub3ZhbGlkYXRlJyk7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0RWxlbWVudHMoKTtcblxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMucHJvbWlzZXNSZW1vdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1ZhbGlkYXRpb25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0aW9uU3VjY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGlvbkZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChfdGhpcy5wcm9taXNlc1JlbW90ZSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb21pc2VzUmVtb3RlID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRpb25TdWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0aW9uRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRW1haWw6IGZ1bmN0aW9uIGlzRW1haWwoZW1haWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJFR0VYUC5lbWFpbC50ZXN0KGVtYWlsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1ppcDogZnVuY3Rpb24gaXNaaXAoemlwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5SRUdFWFAuemlwLnRlc3QoemlwKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1Bob25lOiBmdW5jdGlvbiBpc1Bob25lKHBob25lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5SRUdFWFAucGhvbmUudGVzdChwaG9uZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNQYXNzd29yZDogZnVuY3Rpb24gaXNQYXNzd29yZChwYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUkVHRVhQLnBhc3N3b3JkLnRlc3QocGFzc3dvcmQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkodmFsKSB7XG4gICAgICAgICAgICB2YXIgbmV3VmFsID0gdmFsO1xuICAgICAgICAgICAgaWYgKHZhbC50cmltKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsID0gdmFsLnRyaW0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICFuZXdWYWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hlY2tMZW5ndGhNYXg6IGZ1bmN0aW9uIGNoZWNrTGVuZ3RoTWF4KHRleHQsIG1heCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQubGVuZ3RoIDw9IG1heDtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja0xlbmd0aE1pbjogZnVuY3Rpb24gY2hlY2tMZW5ndGhNaW4odGV4dCwgbWluKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dC5sZW5ndGggPj0gbWluO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrU3RyZW5ndGhQYXNzOiBmdW5jdGlvbiBjaGVja1N0cmVuZ3RoUGFzcyhwYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuUkVHRVhQLnN0cmVuZ3RoUGFzcy50ZXN0KHBhc3N3b3JkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRFbGVtZW50czogZnVuY3Rpb24gZ2V0RWxlbWVudHMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGVsZW1zID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12YWxpZGF0ZS1maWVsZF0nKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSwgbGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBlbGVtc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbGlkYXRlLWZpZWxkJyksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbGVtSW5Hcm91cCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBncm91cCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW0uY2hlY2tlZCB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZXYudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsaWRhdGUtZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWxlbS5jaGVja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMyLnJlc3VsdFtpdGVtLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZhbGlkYXRlSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVuZGVyRXJyb3JzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmRFbGVtID0gX3RoaXMyLmVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVswXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmluZEVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRFbGVtLmdyb3VwLnB1c2goaXRlbS5jaGVja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRWxlbUluR3JvdXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAucHVzaChpdGVtLmNoZWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZXYudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsaWRhdGUtZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWxlbS5jaGVja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMyLnJlc3VsdFtpdGVtLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZhbGlkYXRlSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVuZGVyRXJyb3JzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aGlzMi5zZXR0ZXJFdmVudExpc3RlbmVyKGl0ZW0sICdrZXl1cCcsIF90aGlzMi5oYW5kbGVyS2V5dXAsICdhZGQnKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNFbGVtSW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuZWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIF9sb29wKGksIGxlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVFbGVtZW50cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWYWxpZGF0ZSBSZXF1aXJlZCBmaWVsZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZm9yIHZhbGlkYXRlXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbGlkYXRlIGlzIE9LXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZVJlcXVpcmVkOiBmdW5jdGlvbiB2YWxpZGF0ZVJlcXVpcmVkKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNFbXB0eSh2YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRlIEVtYWlsIGZpZWxkXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSBmb3IgdmFsaWRhdGVcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsaWRhdGUgaXMgT0tcbiAgICAgICAgICovXG4gICAgICAgIHZhbGlkYXRlRW1haWw6IGZ1bmN0aW9uIHZhbGlkYXRlRW1haWwodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzRW1haWwodmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWYWxpZGF0ZSBQaG9uZSBmaWVsZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZm9yIHZhbGlkYXRlXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbGlkYXRlIGlzIE9LXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZVBob25lOiBmdW5jdGlvbiB2YWxpZGF0ZVBob25lKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Bob25lKHZhbHVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsaWRhdGUgZmllbGQgZm9yIE1pbiBMZW5ndGhcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIGZvciB2YWxpZGF0ZVxuICAgICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1pblxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWxpZGF0ZSBpcyBPS1xuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGVNaW5MZW5ndGg6IGZ1bmN0aW9uIHZhbGlkYXRlTWluTGVuZ3RoKHZhbHVlLCBtaW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrTGVuZ3RoTWluKHZhbHVlLCBtaW4pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWYWxpZGF0ZSBmaWVsZCBmb3IgTWF4IExlbmd0aFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZm9yIHZhbGlkYXRlXG4gICAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWF4XG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbGlkYXRlIGlzIE9LXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZU1heExlbmd0aDogZnVuY3Rpb24gdmFsaWRhdGVNYXhMZW5ndGgodmFsdWUsIG1heCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tMZW5ndGhNYXgodmFsdWUsIG1heCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRlIGZpZWxkIGZvciBzdHJlbmd0aCBwYXNzd29yZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVmFsdWUgZm9yIHZhbGlkYXRlXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbGlkYXRlIGlzIE9LXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZVN0cmVuZ3RoUGFzczogZnVuY3Rpb24gdmFsaWRhdGVTdHJlbmd0aFBhc3MocGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrU3RyZW5ndGhQYXNzKHBhc3N3b3JkKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsaWRhdGUgUGFzc3dvcmQgZmllbGRcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIGZvciB2YWxpZGF0ZVxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWxpZGF0ZSBpcyBPS1xuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGVQYXNzd29yZDogZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZCh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNQYXNzd29yZCh2YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRlIFpJUCBmaWVsZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZm9yIHZhbGlkYXRlXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbGlkYXRlIGlzIE9LXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZVppcDogZnVuY3Rpb24gdmFsaWRhdGVaaXAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzWmlwKHZhbHVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsaWRhdGUgZm9yIHJlbW90ZSBjaGVja1xuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgICAgICogQHBhcmFtIG5hbWVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3VjY2Vzc0Fuc3dlclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWxpZGF0ZSBpcyBPS1xuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGVSZW1vdGU6IGZ1bmN0aW9uIHZhbGlkYXRlUmVtb3RlKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICAgICAgICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgICAgICAgICB1cmwgPSBfcmVmLnVybCxcbiAgICAgICAgICAgICAgICBzdWNjZXNzQW5zd2VyID0gX3JlZi5zdWNjZXNzQW5zd2VyLFxuICAgICAgICAgICAgICAgIHNlbmRQYXJhbSA9IF9yZWYuc2VuZFBhcmFtLFxuICAgICAgICAgICAgICAgIG1ldGhvZCA9IF9yZWYubWV0aG9kO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBhamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBfZGVmaW5lUHJvcGVydHkoe30sIHNlbmRQYXJhbSwgdmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnRvTG93ZXJDYXNlKCkgPT09IHN1Y2Nlc3NBbnN3ZXIudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ29rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5jb3JyZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2VuZXJhdGVNZXNzYWdlOiBmdW5jdGlvbiBnZW5lcmF0ZU1lc3NhZ2UocnVsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMubWVzc2FnZXMgfHwgdGhpcy5kZWZhdWx0TWVzc2FnZXM7XG4gICAgICAgICAgICB2YXIgY3VzdG9tTWVzc2FnZSA9IG1lc3NhZ2VzW25hbWVdICYmIG1lc3NhZ2VzW25hbWVdW3J1bGVdIHx8IHRoaXMubWVzc2FnZXMgJiYgdHlwZW9mIHRoaXMubWVzc2FnZXNbbmFtZV0gPT09ICdzdHJpbmcnICYmIG1lc3NhZ2VzW25hbWVdIHx8XG4gICAgICAgICAgICAvLyAobWVzc2FnZXNbbmFtZV1bcnVsZV0pIHx8XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRNZXNzYWdlc1tydWxlXSB8fCB0aGlzLkRFRkFVTFRfUkVNT1RFX0VSUk9SO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjdXN0b21NZXNzYWdlID0gY3VzdG9tTWVzc2FnZS5yZXBsYWNlKCc6dmFsdWUnLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzdWx0W25hbWVdID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGN1c3RvbU1lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGVFbGVtZW50czogZnVuY3Rpb24gdmFsaWRhdGVFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmxvY2tGb3JtKCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICBfdGhpczMudmFsaWRhdGVJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGl0ZW0uZ3JvdXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvbWlzZXNSZW1vdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJFcnJvcnMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHRoaXMucHJvbWlzZXNSZW1vdGUpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICByZXNwLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSAnb2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMucmVuZGVyRXJyb3JzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnU2VydmVyIGVycm9yIG9jY3VyZWQuIFBsZWFzZSB0cnkgbGF0ZXIuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmdlbmVyYXRlTWVzc2FnZShSVUxFX1JFTU9URSwgcmVzdWx0Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczMucmVuZGVyRXJyb3JzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWxpZGF0ZUl0ZW06IGZ1bmN0aW9uIHZhbGlkYXRlSXRlbShfcmVmMikge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZSxcbiAgICAgICAgICAgICAgICBncm91cCA9IF9yZWYyLmdyb3VwLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjIudmFsdWUsXG4gICAgICAgICAgICAgICAgaXNLZXl1cENoYW5nZSA9IF9yZWYyLmlzS2V5dXBDaGFuZ2U7XG5cbiAgICAgICAgICAgIHZhciBydWxlcyA9IHRoaXMucnVsZXNbbmFtZV0gfHwgdGhpcy5kZWZhdWx0UnVsZXNbbmFtZV0gfHwgZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICghcnVsZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBydWxlIGluIHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGVWYWx1ZSA9IHJ1bGVzW3J1bGVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUgIT09IFJVTEVfUkVRVUlSRUQgJiYgcnVsZSAhPT0gUlVMRV9GVU5DVElPTiAmJiB2YWx1ZSA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFJVTEVfRlVOQ1RJT046XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBydWxlVmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTWVzc2FnZShSVUxFX0ZVTkNUSU9OLCBuYW1lLCBydWxlVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSVUxFX1JFUVVJUkVEOlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnVsZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzU3VjY2Vzc1ZhbGlkYXRlR3JvdXAgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdCBsZWFzdCBvbmUgaXRlbSBpbiBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM0LnZhbGlkYXRlUmVxdWlyZWQoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1N1Y2Nlc3NWYWxpZGF0ZUdyb3VwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3VjY2Vzc1ZhbGlkYXRlR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVSZXF1aXJlZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoUlVMRV9SRVFVSVJFRCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUlVMRV9FTUFJTDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVFbWFpbCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKFJVTEVfRU1BSUwsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJVTEVfTUlOTEVOR1RIOlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnVsZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0ZU1pbkxlbmd0aCh2YWx1ZSwgcnVsZVZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoUlVMRV9NSU5MRU5HVEgsIG5hbWUsIHJ1bGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUlVMRV9NQVhMRU5HVEg6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFydWxlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRlTWF4TGVuZ3RoKHZhbHVlLCBydWxlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTWVzc2FnZShSVUxFX01BWExFTkdUSCwgbmFtZSwgcnVsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSVUxFX1BIT05FOlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnVsZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0ZVBob25lKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoUlVMRV9QSE9ORSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUlVMRV9QQVNTV09SRDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVQYXNzd29yZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKFJVTEVfUEFTU1dPUkQsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJVTEVfU1RSRU5HVEg6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFydWxlVmFsdWUgfHwgKHR5cGVvZiBydWxlVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHJ1bGVWYWx1ZSkpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZVZhbHVlLmRlZmF1bHQgJiYgdGhpcy52YWxpZGF0ZVN0cmVuZ3RoUGFzcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVWYWx1ZS5jdXN0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChydWxlVmFsdWUuY3VzdG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhwID0gdGhpcy5SRUdFWFAuc3RyZW5ndGhQYXNzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ3VzdG9tIHJlZ2V4cCBmb3Igc3RyZW5ndGggcnVsZSBpcyBub3QgdmFsaWQuIERlZmF1bHQgcmVnZXhwIHdhcyB1c2VkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoUlVMRV9TVFJFTkdUSCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUlVMRV9aSVA6XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFydWxlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRlWmlwKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoUlVMRV9aSVAsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJVTEVfUkVNT1RFOlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0tleXVwQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnVsZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBydWxlVmFsdWUudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQW5zd2VyID0gcnVsZVZhbHVlLnN1Y2Nlc3NBbnN3ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHJ1bGVWYWx1ZS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRQYXJhbSA9IHJ1bGVWYWx1ZS5zZW5kUGFyYW07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGVsZW0gPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W2RhdGEtdmFsaWRhdGUtZmllbGQ9XCInICsgbmFtZSArICdcIl0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRlckV2ZW50TGlzdGVuZXIoJGVsZW0sICdrZXl1cCcsIHRoaXMuaGFuZGxlcktleXVwLCAncmVtb3ZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzUmVtb3RlLnB1c2godGhpcy52YWxpZGF0ZVJlbW90ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUGFyYW06IHNlbmRQYXJhbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0Fuc3dlcjogc3VjY2Vzc0Fuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyRXJyb3JzOiBmdW5jdGlvbiBjbGVhckVycm9ycygpIHtcbiAgICAgICAgICAgIHZhciAkZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtdmFsaWRhdGUtZXJyb3ItbGFiZWwnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAkZWxlbXNbaV0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy12YWxpZGF0ZS1lcnJvci1maWVsZCcpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gJGVsZW1zLmxlbmd0aDsgX2kgPCBfbGVuOyArK19pKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1zW19pXS5jbGFzc0xpc3QucmVtb3ZlKCdqcy12YWxpZGF0ZS1lcnJvci1maWVsZCcpO1xuICAgICAgICAgICAgICAgICRlbGVtc1tfaV0uc3R5bGUuYm9yZGVyID0gJyc7XG4gICAgICAgICAgICAgICAgJGVsZW1zW19pXS5zdHlsZS5jb2xvciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlckVycm9yczogZnVuY3Rpb24gcmVuZGVyRXJyb3JzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICAgICAgICAgIHRoaXMudW5sb2NrRm9ybSgpO1xuXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnJlc3VsdCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkYXRpb25TdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9pdGVtIGluIHRoaXMucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLnJlc3VsdFtfaXRlbV0ubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1zID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12YWxpZGF0ZS1maWVsZD1cIicgKyBfaXRlbSArICdcIl0nKTtcblxuICAgICAgICAgICAgICAgIHZhciAkZWxlbSA9ICRlbGVtc1skZWxlbXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2pzLXZhbGlkYXRlLWVycm9yLWxhYmVsJztcbiAgICAgICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdzdHlsZScsICdjb2xvcjogJyArIHRoaXMuY29sb3JXcm9uZyk7XG4gICAgICAgICAgICAgICAgJGVsZW0uc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAnICsgdGhpcy5jb2xvcldyb25nO1xuICAgICAgICAgICAgICAgICRlbGVtLnN0eWxlLmNvbG9yID0gJycgKyB0aGlzLmNvbG9yV3Jvbmc7XG4gICAgICAgICAgICAgICAgJGVsZW0uY2xhc3NMaXN0LmFkZCgnanMtdmFsaWRhdGUtZXJyb3ItZmllbGQnKTtcblxuICAgICAgICAgICAgICAgIGlmICgkZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8ICRlbGVtLnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRsYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsW2Zvcj1cIicgKyAkZWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJykgKyAnXCJdJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGVtLnBhcmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnbGFiZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZWxlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbGFiZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZGl2LCAkbGFiZWwubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZGl2LCAkZWxlbS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkZWxlbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkaXYsICRlbGVtLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy50b29sdGlwU2VsZWN0b3JXcmFwLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50b29sdGlwc1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXM1LmhpZGVUb29sdGlwcygpO1xuICAgICAgICAgICAgfSwgdGhpcy50b29sdGlwRmFkZU91dFRpbWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhpZGVUb29sdGlwczogZnVuY3Rpb24gaGlkZVRvb2x0aXBzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciAkZWxlbXNFcnJvckxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXZhbGlkYXRlLWVycm9yLWxhYmVsJyk7XG5cbiAgICAgICAgICAgICRlbGVtc0Vycm9yTGFiZWwuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChfdGhpczYudG9vbHRpcEZhZGVPdXRDbGFzcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50b29sdGlwc1RpbWVyID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2NrRm9ybTogZnVuY3Rpb24gbG9ja0Zvcm0oKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW1zID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0Jyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gJGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1zW2ldLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAkZWxlbXNbaV0uc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICAgICAgICAgICAgICAkZWxlbXNbaV0uc3R5bGUud2ViaXRGaWx0ZXIgPSAnZ3JheXNjYWxlKDEwMCUpJztcbiAgICAgICAgICAgICAgICAkZWxlbXNbaV0uc3R5bGUuZmlsdGVyID0gJ2dyYXlzY2FsZSgxMDAlKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5sb2NrRm9ybTogZnVuY3Rpb24gdW5sb2NrRm9ybSgpIHtcbiAgICAgICAgICAgIHZhciAkZWxlbXMgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3QnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAkZWxlbXNbaV0ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICRlbGVtc1tpXS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJyc7XG4gICAgICAgICAgICAgICAgJGVsZW1zW2ldLnN0eWxlLndlYml0RmlsdGVyID0gJyc7XG4gICAgICAgICAgICAgICAgJGVsZW1zW2ldLnN0eWxlLmZpbHRlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5KdXN0VmFsaWRhdGUgPSBKdXN0VmFsaWRhdGU7XG59KSh3aW5kb3cpOztcclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuXHQoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5JTWFzayA9IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cblx0dmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblx0dmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcblx0fTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcblxuXG5cdHZhciBnbG9iYWwkYyA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1nbG9iYWwtdGhpcyAtLSBzYWZlXG5cdGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8IGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmVcblx0Y2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHwgY2hlY2sodHlwZW9mIGNvbW1vbmpzR2xvYmFsID09ICdvYmplY3QnICYmIGNvbW1vbmpzR2xvYmFsKSB8fCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcblx0ZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB0aGlzO1xuXHR9KCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuXHR2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0ge307XG5cblx0dmFyIGZhaWxzJDYgPSBmdW5jdGlvbiAoZXhlYykge1xuXHQgIHRyeSB7XG5cdCAgICByZXR1cm4gISFleGVjKCk7XG5cdCAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0fTtcblxuXHR2YXIgZmFpbHMkNSA9IGZhaWxzJDY7IC8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5cblxuXHR2YXIgZGVzY3JpcHRvcnMgPSAhZmFpbHMkNShmdW5jdGlvbiAoKSB7XG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHtcblx0ICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gNztcblx0ICAgIH1cblx0ICB9KVsxXSAhPSA3O1xuXHR9KTtcblxuXHR2YXIgb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUgPSB7fTtcblxuXHR2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcblxuXHR2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyAvLyBOYXNob3JuIH4gSkRLOCBidWdcblxuXHR2YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoe1xuXHQgIDE6IDJcblx0fSwgMSk7IC8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5cblx0b2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuXHQgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEodGhpcywgVik7XG5cdCAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG5cdH0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG5cblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQyID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcblx0ICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcblx0ICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuXHQgICAgdmFsdWU6IHZhbHVlXG5cdCAgfTtcblx0fTtcblxuXHR2YXIgdG9TdHJpbmckMyA9IHt9LnRvU3RyaW5nO1xuXG5cdHZhciBjbGFzc29mUmF3ID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgcmV0dXJuIHRvU3RyaW5nJDMuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xuXHR9O1xuXG5cdHZhciBmYWlscyQ0ID0gZmFpbHMkNjtcblxuXHR2YXIgY2xhc3NvZiA9IGNsYXNzb2ZSYXc7XG5cblx0dmFyIHNwbGl0ID0gJycuc3BsaXQ7IC8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5cblx0dmFyIGluZGV4ZWRPYmplY3QgPSBmYWlscyQ0KGZ1bmN0aW9uICgpIHtcblx0ICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG5cdCAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcblx0fSkgPyBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xuXHR9IDogT2JqZWN0O1xuXG5cdC8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5cdHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDQgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0Ly8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3Ncblx0dmFyIEluZGV4ZWRPYmplY3QkMSA9IGluZGV4ZWRPYmplY3Q7XG5cblx0dmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkMyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNDtcblxuXHR2YXIgdG9JbmRleGVkT2JqZWN0JDMgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gSW5kZXhlZE9iamVjdCQxKHJlcXVpcmVPYmplY3RDb2VyY2libGUkMyhpdCkpO1xuXHR9O1xuXG5cdHZhciBpc09iamVjdCQ1ID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcblx0fTtcblxuXHR2YXIgZ2xvYmFsJGIgPSBnbG9iYWwkYztcblxuXHR2YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG5cdH07XG5cblx0dmFyIGdldEJ1aWx0SW4kMyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuXHQgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWwkYltuYW1lc3BhY2VdKSA6IGdsb2JhbCRiW25hbWVzcGFjZV0gJiYgZ2xvYmFsJGJbbmFtZXNwYWNlXVttZXRob2RdO1xuXHR9O1xuXG5cdHZhciBnZXRCdWlsdEluJDIgPSBnZXRCdWlsdEluJDM7XG5cblx0dmFyIGVuZ2luZVVzZXJBZ2VudCA9IGdldEJ1aWx0SW4kMignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuXG5cdHZhciBnbG9iYWwkYSA9IGdsb2JhbCRjO1xuXG5cdHZhciB1c2VyQWdlbnQkMSA9IGVuZ2luZVVzZXJBZ2VudDtcblxuXHR2YXIgcHJvY2VzcyA9IGdsb2JhbCRhLnByb2Nlc3M7XG5cdHZhciBEZW5vID0gZ2xvYmFsJGEuRGVubztcblx0dmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xuXHR2YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcblx0dmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5cdGlmICh2OCkge1xuXHQgIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcblx0ICB2ZXJzaW9uID0gbWF0Y2hbMF0gPCA0ID8gMSA6IG1hdGNoWzBdICsgbWF0Y2hbMV07XG5cdH0gZWxzZSBpZiAodXNlckFnZW50JDEpIHtcblx0ICBtYXRjaCA9IHVzZXJBZ2VudCQxLm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG5cblx0ICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG5cdCAgICBtYXRjaCA9IHVzZXJBZ2VudCQxLm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcblx0ICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuXHQgIH1cblx0fVxuXG5cdHZhciBlbmdpbmVWOFZlcnNpb24gPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuXG5cdC8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuXG5cdHZhciBWOF9WRVJTSU9OID0gZW5naW5lVjhWZXJzaW9uO1xuXG5cdHZhciBmYWlscyQzID0gZmFpbHMkNjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuXG5cdHZhciBuYXRpdmVTeW1ib2wgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzJDMoZnVuY3Rpb24gKCkge1xuXHQgIHZhciBzeW1ib2wgPSBTeW1ib2woKTsgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cblx0ICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG5cblx0ICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8IC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG5cdCAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xuXHR9KTtcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cblxuXHR2YXIgTkFUSVZFX1NZTUJPTCQxID0gbmF0aXZlU3ltYm9sO1xuXG5cdHZhciB1c2VTeW1ib2xBc1VpZCA9IE5BVElWRV9TWU1CT0wkMSAmJiAhU3ltYm9sLnNoYW0gJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcblxuXHR2YXIgZ2V0QnVpbHRJbiQxID0gZ2V0QnVpbHRJbiQzO1xuXG5cdHZhciBVU0VfU1lNQk9MX0FTX1VJRCQxID0gdXNlU3ltYm9sQXNVaWQ7XG5cblx0dmFyIGlzU3ltYm9sJDMgPSBVU0VfU1lNQk9MX0FTX1VJRCQxID8gZnVuY3Rpb24gKGl0KSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcblx0fSA6IGZ1bmN0aW9uIChpdCkge1xuXHQgIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbiQxKCdTeW1ib2wnKTtcblx0ICByZXR1cm4gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcblx0fTtcblxuXHR2YXIgaXNPYmplY3QkNCA9IGlzT2JqZWN0JDU7IC8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5cblxuXHR2YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSQxID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG5cdCAgdmFyIGZuLCB2YWw7XG5cdCAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QkNCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG5cdCAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCQ0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcblx0ICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCQ0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcblx0ICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG5cdH07XG5cblx0dmFyIHNoYXJlZCQzID0ge2V4cG9ydHM6IHt9fTtcblxuXHR2YXIgZ2xvYmFsJDkgPSBnbG9iYWwkYztcblxuXHR2YXIgc2V0R2xvYmFsJDMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgIHRyeSB7XG5cdCAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwkOSwga2V5LCB7XG5cdCAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgICAgICB3cml0YWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgIGdsb2JhbCQ5W2tleV0gPSB2YWx1ZTtcblx0ICB9XG5cblx0ICByZXR1cm4gdmFsdWU7XG5cdH07XG5cblx0dmFyIGdsb2JhbCQ4ID0gZ2xvYmFsJGM7XG5cblx0dmFyIHNldEdsb2JhbCQyID0gc2V0R2xvYmFsJDM7XG5cblx0dmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xuXHR2YXIgc3RvcmUkMyA9IGdsb2JhbCQ4W1NIQVJFRF0gfHwgc2V0R2xvYmFsJDIoU0hBUkVELCB7fSk7XG5cdHZhciBzaGFyZWRTdG9yZSA9IHN0b3JlJDM7XG5cblx0dmFyIHN0b3JlJDIgPSBzaGFyZWRTdG9yZTtcblxuXHQoc2hhcmVkJDMuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHN0b3JlJDJba2V5XSB8fCAoc3RvcmUkMltrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xuXHR9KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG5cdCAgdmVyc2lvbjogJzMuMTcuMycsXG5cdCAgbW9kZTogJ2dsb2JhbCcsXG5cdCAgY29weXJpZ2h0OiAnwqkgMjAyMSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcblx0fSk7XG5cblx0dmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkMiA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNDsgLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxuXG5cblx0dmFyIHRvT2JqZWN0JDIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcblx0ICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUkMihhcmd1bWVudCkpO1xuXHR9O1xuXG5cdHZhciB0b09iamVjdCQxID0gdG9PYmplY3QkMjtcblxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHR2YXIgaGFzJDYgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG5cdCAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwodG9PYmplY3QkMShpdCksIGtleSk7XG5cdH07XG5cblx0dmFyIGlkID0gMDtcblx0dmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5cdHZhciB1aWQkMiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xuXHR9O1xuXG5cdHZhciBnbG9iYWwkNyA9IGdsb2JhbCRjO1xuXG5cdHZhciBzaGFyZWQkMiA9IHNoYXJlZCQzLmV4cG9ydHM7XG5cblx0dmFyIGhhcyQ1ID0gaGFzJDY7XG5cblx0dmFyIHVpZCQxID0gdWlkJDI7XG5cblx0dmFyIE5BVElWRV9TWU1CT0wgPSBuYXRpdmVTeW1ib2w7XG5cblx0dmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gdXNlU3ltYm9sQXNVaWQ7XG5cblx0dmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCQyKCd3a3MnKTtcblx0dmFyIFN5bWJvbCQxID0gZ2xvYmFsJDcuU3ltYm9sO1xuXHR2YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wkMSA6IFN5bWJvbCQxICYmIFN5bWJvbCQxLndpdGhvdXRTZXR0ZXIgfHwgdWlkJDE7XG5cblx0dmFyIHdlbGxLbm93blN5bWJvbCQxID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICBpZiAoIWhhcyQ1KFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG5cdCAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMkNShTeW1ib2wkMSwgbmFtZSkpIHtcblx0ICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sJDFbbmFtZV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcblx0fTtcblxuXHR2YXIgaXNPYmplY3QkMyA9IGlzT2JqZWN0JDU7XG5cblx0dmFyIGlzU3ltYm9sJDIgPSBpc1N5bWJvbCQzO1xuXG5cdHZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gb3JkaW5hcnlUb1ByaW1pdGl2ZSQxO1xuXG5cdHZhciB3ZWxsS25vd25TeW1ib2wgPSB3ZWxsS25vd25TeW1ib2wkMTtcblxuXHR2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpOyAvLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5cblx0dmFyIHRvUHJpbWl0aXZlJDEgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcblx0ICBpZiAoIWlzT2JqZWN0JDMoaW5wdXQpIHx8IGlzU3ltYm9sJDIoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cdCAgdmFyIGV4b3RpY1RvUHJpbSA9IGlucHV0W1RPX1BSSU1JVElWRV07XG5cdCAgdmFyIHJlc3VsdDtcblxuXHQgIGlmIChleG90aWNUb1ByaW0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0Jztcblx0ICAgIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBwcmVmKTtcblx0ICAgIGlmICghaXNPYmplY3QkMyhyZXN1bHQpIHx8IGlzU3ltYm9sJDIocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcblx0ICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcblx0ICB9XG5cblx0ICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG5cdCAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xuXHR9O1xuXG5cdHZhciB0b1ByaW1pdGl2ZSA9IHRvUHJpbWl0aXZlJDE7XG5cblx0dmFyIGlzU3ltYm9sJDEgPSBpc1N5bWJvbCQzOyAvLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG5cdC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxuXG5cblx0dmFyIHRvUHJvcGVydHlLZXkkMiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuXHQgIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuXHQgIHJldHVybiBpc1N5bWJvbCQxKGtleSkgPyBrZXkgOiBTdHJpbmcoa2V5KTtcblx0fTtcblxuXHR2YXIgZ2xvYmFsJDYgPSBnbG9iYWwkYztcblxuXHR2YXIgaXNPYmplY3QkMiA9IGlzT2JqZWN0JDU7XG5cblx0dmFyIGRvY3VtZW50JDEgPSBnbG9iYWwkNi5kb2N1bWVudDsgLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG5cblx0dmFyIEVYSVNUUyA9IGlzT2JqZWN0JDIoZG9jdW1lbnQkMSkgJiYgaXNPYmplY3QkMihkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQpO1xuXG5cdHZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQkMS5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuXHR9O1xuXG5cdHZhciBERVNDUklQVE9SUyQ0ID0gZGVzY3JpcHRvcnM7XG5cblx0dmFyIGZhaWxzJDIgPSBmYWlscyQ2O1xuXG5cdHZhciBjcmVhdGVFbGVtZW50ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50OyAvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5cblxuXHR2YXIgaWU4RG9tRGVmaW5lID0gIURFU0NSSVBUT1JTJDQgJiYgIWZhaWxzJDIoZnVuY3Rpb24gKCkge1xuXHQgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWllZCBmb3IgdGVzdGluZ1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuXHQgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiA3O1xuXHQgICAgfVxuXHQgIH0pLmEgIT0gNztcblx0fSk7XG5cblx0dmFyIERFU0NSSVBUT1JTJDMgPSBkZXNjcmlwdG9ycztcblxuXHR2YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMSA9IG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkMSA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQyO1xuXG5cdHZhciB0b0luZGV4ZWRPYmplY3QkMiA9IHRvSW5kZXhlZE9iamVjdCQzO1xuXG5cdHZhciB0b1Byb3BlcnR5S2V5JDEgPSB0b1Byb3BlcnR5S2V5JDI7XG5cblx0dmFyIGhhcyQ0ID0gaGFzJDY7XG5cblx0dmFyIElFOF9ET01fREVGSU5FJDEgPSBpZThEb21EZWZpbmU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcblxuXG5cdHZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcblxuXHRvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZiA9IERFU0NSSVBUT1JTJDMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcblx0ICBPID0gdG9JbmRleGVkT2JqZWN0JDIoTyk7XG5cdCAgUCA9IHRvUHJvcGVydHlLZXkkMShQKTtcblx0ICBpZiAoSUU4X0RPTV9ERUZJTkUkMSkgdHJ5IHtcblx0ICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuXHQgIH0gY2F0Y2ggKGVycm9yKSB7XG5cdCAgICAvKiBlbXB0eSAqL1xuXHQgIH1cblx0ICBpZiAoaGFzJDQoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkMSghcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMS5mLmNhbGwoTywgUCksIE9bUF0pO1xuXHR9O1xuXG5cdHZhciBvYmplY3REZWZpbmVQcm9wZXJ0eSA9IHt9O1xuXG5cdHZhciBpc09iamVjdCQxID0gaXNPYmplY3QkNTtcblxuXHR2YXIgYW5PYmplY3QkMiA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICghaXNPYmplY3QkMShpdCkpIHtcblx0ICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG5cdHZhciBERVNDUklQVE9SUyQyID0gZGVzY3JpcHRvcnM7XG5cblx0dmFyIElFOF9ET01fREVGSU5FID0gaWU4RG9tRGVmaW5lO1xuXG5cdHZhciBhbk9iamVjdCQxID0gYW5PYmplY3QkMjtcblxuXHR2YXIgdG9Qcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkkMjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG5cblxuXHR2YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5OyAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcblxuXHRvYmplY3REZWZpbmVQcm9wZXJ0eS5mID0gREVTQ1JJUFRPUlMkMiA/ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcblx0ICBhbk9iamVjdCQxKE8pO1xuXHQgIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuXHQgIGFuT2JqZWN0JDEoQXR0cmlidXRlcyk7XG5cdCAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuXHQgICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgLyogZW1wdHkgKi9cblx0ICB9XG5cdCAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuXHQgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuXHQgIHJldHVybiBPO1xuXHR9O1xuXG5cdHZhciBERVNDUklQVE9SUyQxID0gZGVzY3JpcHRvcnM7XG5cblx0dmFyIGRlZmluZVByb3BlcnR5TW9kdWxlJDEgPSBvYmplY3REZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDI7XG5cblx0dmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQzID0gREVTQ1JJUFRPUlMkMSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcblx0ICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUkMS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcblx0fSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcblx0ICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuXHQgIHJldHVybiBvYmplY3Q7XG5cdH07XG5cblx0dmFyIHJlZGVmaW5lJDEgPSB7ZXhwb3J0czoge319O1xuXG5cdHZhciBzdG9yZSQxID0gc2hhcmVkU3RvcmU7XG5cblx0dmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZzsgLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuXG5cdGlmICh0eXBlb2Ygc3RvcmUkMS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcblx0ICBzdG9yZSQxLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuXHQgIH07XG5cdH1cblxuXHR2YXIgaW5zcGVjdFNvdXJjZSQyID0gc3RvcmUkMS5pbnNwZWN0U291cmNlO1xuXG5cdHZhciBnbG9iYWwkNSA9IGdsb2JhbCRjO1xuXG5cdHZhciBpbnNwZWN0U291cmNlJDEgPSBpbnNwZWN0U291cmNlJDI7XG5cblx0dmFyIFdlYWtNYXAkMSA9IGdsb2JhbCQ1LldlYWtNYXA7XG5cdHZhciBuYXRpdmVXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAkMSA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZSQxKFdlYWtNYXAkMSkpO1xuXG5cdHZhciBzaGFyZWQkMSA9IHNoYXJlZCQzLmV4cG9ydHM7XG5cblx0dmFyIHVpZCA9IHVpZCQyO1xuXG5cdHZhciBrZXlzID0gc2hhcmVkJDEoJ2tleXMnKTtcblxuXHR2YXIgc2hhcmVkS2V5JDEgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xuXHR9O1xuXG5cdHZhciBoaWRkZW5LZXlzJDMgPSB7fTtcblxuXHR2YXIgTkFUSVZFX1dFQUtfTUFQID0gbmF0aXZlV2Vha01hcDtcblxuXHR2YXIgZ2xvYmFsJDQgPSBnbG9iYWwkYztcblxuXHR2YXIgaXNPYmplY3QgPSBpc09iamVjdCQ1O1xuXG5cdHZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMiA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQzO1xuXG5cdHZhciBvYmplY3RIYXMgPSBoYXMkNjtcblxuXHR2YXIgc2hhcmVkID0gc2hhcmVkU3RvcmU7XG5cblx0dmFyIHNoYXJlZEtleSA9IHNoYXJlZEtleSQxO1xuXG5cdHZhciBoaWRkZW5LZXlzJDIgPSBoaWRkZW5LZXlzJDM7XG5cblx0dmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcblx0dmFyIFdlYWtNYXAgPSBnbG9iYWwkNC5XZWFrTWFwO1xuXHR2YXIgc2V0JDEsIGdldCwgaGFzJDM7XG5cblx0dmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaGFzJDMoaXQpID8gZ2V0KGl0KSA6IHNldCQxKGl0LCB7fSk7XG5cdH07XG5cblx0dmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuXHQgICAgdmFyIHN0YXRlO1xuXG5cdCAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG5cdCAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHN0YXRlO1xuXHQgIH07XG5cdH07XG5cblx0aWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcblx0ICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuXHQgIHZhciB3bWdldCA9IHN0b3JlLmdldDtcblx0ICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG5cdCAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuXG5cdCAgc2V0JDEgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG5cdCAgICBpZiAod21oYXMuY2FsbChzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcblx0ICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuXHQgICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcblx0ICAgIHJldHVybiBtZXRhZGF0YTtcblx0ICB9O1xuXG5cdCAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuXHQgIH07XG5cblx0ICBoYXMkMyA9IGZ1bmN0aW9uIChpdCkge1xuXHQgICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcblx0ICB9O1xuXHR9IGVsc2Uge1xuXHQgIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcblx0ICBoaWRkZW5LZXlzJDJbU1RBVEVdID0gdHJ1ZTtcblxuXHQgIHNldCQxID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuXHQgICAgaWYgKG9iamVjdEhhcyhpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcblx0ICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuXHQgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDIoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG5cdCAgICByZXR1cm4gbWV0YWRhdGE7XG5cdCAgfTtcblxuXHQgIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG5cdCAgfTtcblxuXHQgIGhhcyQzID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG5cdCAgfTtcblx0fVxuXG5cdHZhciBpbnRlcm5hbFN0YXRlID0ge1xuXHQgIHNldDogc2V0JDEsXG5cdCAgZ2V0OiBnZXQsXG5cdCAgaGFzOiBoYXMkMyxcblx0ICBlbmZvcmNlOiBlbmZvcmNlLFxuXHQgIGdldHRlckZvcjogZ2V0dGVyRm9yXG5cdH07XG5cblx0dmFyIGdsb2JhbCQzID0gZ2xvYmFsJGM7XG5cblx0dmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQxID0gY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDM7XG5cblx0dmFyIGhhcyQyID0gaGFzJDY7XG5cblx0dmFyIHNldEdsb2JhbCQxID0gc2V0R2xvYmFsJDM7XG5cblx0dmFyIGluc3BlY3RTb3VyY2UgPSBpbnNwZWN0U291cmNlJDI7XG5cblx0dmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBpbnRlcm5hbFN0YXRlO1xuXG5cdHZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG5cdHZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcblx0dmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXHQocmVkZWZpbmUkMS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcblx0ICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcblx0ICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG5cdCAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuXHQgIHZhciBzdGF0ZTtcblxuXHQgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyQyKHZhbHVlLCAnbmFtZScpKSB7XG5cdCAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQxKHZhbHVlLCAnbmFtZScsIGtleSk7XG5cdCAgICB9XG5cblx0ICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuXG5cdCAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuXHQgICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaWYgKE8gPT09IGdsb2JhbCQzKSB7XG5cdCAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtlbHNlIHNldEdsb2JhbCQxKGtleSwgdmFsdWUpO1xuXHQgICAgcmV0dXJuO1xuXHQgIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuXHQgICAgZGVsZXRlIE9ba2V5XTtcblx0ICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcblx0ICAgIHNpbXBsZSA9IHRydWU7XG5cdCAgfVxuXG5cdCAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7ZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMShPLCBrZXksIHZhbHVlKTsgLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG5cdH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcblx0fSk7XG5cblx0dmFyIG9iamVjdEdldE93blByb3BlcnR5TmFtZXMgPSB7fTtcblxuXHR2YXIgY2VpbCQxID0gTWF0aC5jZWlsO1xuXHR2YXIgZmxvb3IgPSBNYXRoLmZsb29yOyAvLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcblxuXHR2YXIgdG9JbnRlZ2VyJDMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcblx0ICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwkMSkoYXJndW1lbnQpO1xuXHR9O1xuXG5cdHZhciB0b0ludGVnZXIkMiA9IHRvSW50ZWdlciQzO1xuXG5cdHZhciBtaW4kMSA9IE1hdGgubWluOyAvLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuXHQvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5cblx0dmFyIHRvTGVuZ3RoJDIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcblx0ICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluJDEodG9JbnRlZ2VyJDIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblx0fTtcblxuXHR2YXIgdG9JbnRlZ2VyJDEgPSB0b0ludGVnZXIkMztcblxuXHR2YXIgbWF4ID0gTWF0aC5tYXg7XG5cdHZhciBtaW4gPSBNYXRoLm1pbjsgLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG5cdC8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cblx0Ly8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cblxuXHR2YXIgdG9BYnNvbHV0ZUluZGV4JDEgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuXHQgIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyJDEoaW5kZXgpO1xuXHQgIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xuXHR9O1xuXG5cdHZhciB0b0luZGV4ZWRPYmplY3QkMSA9IHRvSW5kZXhlZE9iamVjdCQzO1xuXG5cdHZhciB0b0xlbmd0aCQxID0gdG9MZW5ndGgkMjtcblxuXHR2YXIgdG9BYnNvbHV0ZUluZGV4ID0gdG9BYnNvbHV0ZUluZGV4JDE7IC8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG5cblxuXHR2YXIgY3JlYXRlTWV0aG9kJDEgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG5cdCAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCQxKCR0aGlzKTtcblx0ICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aCQxKE8ubGVuZ3RoKTtcblx0ICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG5cdCAgICB2YXIgdmFsdWU7IC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cblx0ICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG5cblx0ICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG5cdCAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcblxuXHQgICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlOyAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG5cdCAgICB9IGVsc2UgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG5cdCAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcblx0ICAgIH1cblx0ICAgIHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG5cdCAgfTtcblx0fTtcblxuXHR2YXIgYXJyYXlJbmNsdWRlcyA9IHtcblx0ICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcblx0ICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuXHQgIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QkMSh0cnVlKSxcblx0ICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuXHQgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2Zcblx0ICBpbmRleE9mOiBjcmVhdGVNZXRob2QkMShmYWxzZSlcblx0fTtcblxuXHR2YXIgaGFzJDEgPSBoYXMkNjtcblxuXHR2YXIgdG9JbmRleGVkT2JqZWN0ID0gdG9JbmRleGVkT2JqZWN0JDM7XG5cblx0dmFyIGluZGV4T2YgPSBhcnJheUluY2x1ZGVzLmluZGV4T2Y7XG5cblx0dmFyIGhpZGRlbktleXMkMSA9IGhpZGRlbktleXMkMztcblxuXHR2YXIgb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcblx0ICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuXHQgIHZhciBpID0gMDtcblx0ICB2YXIgcmVzdWx0ID0gW107XG5cdCAgdmFyIGtleTtcblxuXHQgIGZvciAoa2V5IGluIE8pICFoYXMkMShoaWRkZW5LZXlzJDEsIGtleSkgJiYgaGFzJDEoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOyAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG5cblxuXHQgIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzJDEoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcblx0ICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuXHQgIH1cblxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Ly8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5cdHZhciBlbnVtQnVnS2V5cyQyID0gWydjb25zdHJ1Y3RvcicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXTtcblxuXHR2YXIgaW50ZXJuYWxPYmplY3RLZXlzJDEgPSBvYmplY3RLZXlzSW50ZXJuYWw7XG5cblx0dmFyIGVudW1CdWdLZXlzJDEgPSBlbnVtQnVnS2V5cyQyO1xuXG5cdHZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMkMS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuXG5cdG9iamVjdEdldE93blByb3BlcnR5TmFtZXMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuXHQgIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMkMShPLCBoaWRkZW5LZXlzKTtcblx0fTtcblxuXHR2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0ge307XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuXHRvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblx0dmFyIGdldEJ1aWx0SW4gPSBnZXRCdWlsdEluJDM7XG5cblx0dmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzO1xuXG5cdHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUkMSA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scztcblxuXHR2YXIgYW5PYmplY3QgPSBhbk9iamVjdCQyOyAvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5cblxuXHR2YXIgb3duS2V5cyQxID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuXHQgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG5cdCAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQxLmY7XG5cdCAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcblx0fTtcblxuXHR2YXIgaGFzID0gaGFzJDY7XG5cblx0dmFyIG93bktleXMgPSBvd25LZXlzJDE7XG5cblx0dmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuXHR2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBvYmplY3REZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyQxID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdCAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG5cdCAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblx0ICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG5cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXHQgICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG5cdCAgfVxuXHR9O1xuXG5cdHZhciBmYWlscyQxID0gZmFpbHMkNjtcblxuXHR2YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG5cdHZhciBpc0ZvcmNlZCQxID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuXHQgIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcblx0ICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2UgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyQxKGRldGVjdGlvbikgOiAhIWRldGVjdGlvbjtcblx0fTtcblxuXHR2YXIgbm9ybWFsaXplID0gaXNGb3JjZWQkMS5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG5cdCAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcblx0fTtcblxuXHR2YXIgZGF0YSA9IGlzRm9yY2VkJDEuZGF0YSA9IHt9O1xuXHR2YXIgTkFUSVZFID0gaXNGb3JjZWQkMS5OQVRJVkUgPSAnTic7XG5cdHZhciBQT0xZRklMTCA9IGlzRm9yY2VkJDEuUE9MWUZJTEwgPSAnUCc7XG5cdHZhciBpc0ZvcmNlZF8xID0gaXNGb3JjZWQkMTtcblxuXHR2YXIgZ2xvYmFsJDIgPSBnbG9iYWwkYztcblxuXHR2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmY7XG5cblx0dmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQzO1xuXG5cdHZhciByZWRlZmluZSA9IHJlZGVmaW5lJDEuZXhwb3J0cztcblxuXHR2YXIgc2V0R2xvYmFsID0gc2V0R2xvYmFsJDM7XG5cblx0dmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzJDE7XG5cblx0dmFyIGlzRm9yY2VkID0gaXNGb3JjZWRfMTtcblx0Lypcblx0ICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuXHQgIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3Rcblx0ICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuXHQgIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG5cdCAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG5cdCAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcblx0ICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cblx0ICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG5cdCAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuXHQgIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG5cdCAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG5cdCAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcblx0Ki9cblxuXG5cdHZhciBfZXhwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuXHQgIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcblx0ICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG5cdCAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcblx0ICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuXG5cdCAgaWYgKEdMT0JBTCkge1xuXHQgICAgdGFyZ2V0ID0gZ2xvYmFsJDI7XG5cdCAgfSBlbHNlIGlmIChTVEFUSUMpIHtcblx0ICAgIHRhcmdldCA9IGdsb2JhbCQyW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0YXJnZXQgPSAoZ2xvYmFsJDJbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuXHQgIH1cblxuXHQgIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuXHQgICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcblxuXHQgICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcblx0ICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG5cdCAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuXHQgICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG5cblx0ICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7IC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcblxuXHQgICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuXHQgICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG5cdCAgICB9IC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcblxuXG5cdCAgICBpZiAob3B0aW9ucy5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pIHtcblx0ICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuXHQgICAgfSAvLyBleHRlbmQgZ2xvYmFsXG5cblxuXHQgICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcblx0ICB9XG5cdH07XG5cblx0dmFyIGludGVybmFsT2JqZWN0S2V5cyA9IG9iamVjdEtleXNJbnRlcm5hbDtcblxuXHR2YXIgZW51bUJ1Z0tleXMgPSBlbnVtQnVnS2V5cyQyOyAvLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5cblxuXHR2YXIgb2JqZWN0S2V5cyQxID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG5cdCAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG5cdH07XG5cblx0dmFyIERFU0NSSVBUT1JTID0gZGVzY3JpcHRvcnM7XG5cblx0dmFyIGZhaWxzID0gZmFpbHMkNjtcblxuXHR2YXIgb2JqZWN0S2V5cyA9IG9iamVjdEtleXMkMTtcblxuXHR2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG5cdHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cdHZhciB0b09iamVjdCA9IHRvT2JqZWN0JDI7XG5cblx0dmFyIEluZGV4ZWRPYmplY3QgPSBpbmRleGVkT2JqZWN0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG5cblxuXHR2YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuXHR2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7IC8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5cblx0dmFyIG9iamVjdEFzc2lnbiA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcblx0ICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuXHQgIGlmIChERVNDUklQVE9SUyAmJiAkYXNzaWduKHtcblx0ICAgIGI6IDFcblx0ICB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcblx0ICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG5cdCAgICAgICAgdmFsdWU6IDMsXG5cdCAgICAgICAgZW51bWVyYWJsZTogZmFsc2Vcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSksIHtcblx0ICAgIGI6IDJcblx0ICB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7IC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuXG5cdCAgdmFyIEEgPSB7fTtcblx0ICB2YXIgQiA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3ltYm9sIC0tIHNhZmVcblxuXHQgIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcblx0ICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuXHQgIEFbc3ltYm9sXSA9IDc7XG5cdCAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikge1xuXHQgICAgQltjaHJdID0gY2hyO1xuXHQgIH0pO1xuXHQgIHJldHVybiAkYXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG5cdH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG5cdCAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuXHQgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgIHZhciBpbmRleCA9IDE7XG5cdCAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuXHQgIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG5cblx0ICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcblx0ICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuXHQgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBvYmplY3RLZXlzKFMpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcblx0ICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblx0ICAgIHZhciBqID0gMDtcblx0ICAgIHZhciBrZXk7XG5cblx0ICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG5cdCAgICAgIGtleSA9IGtleXNbaisrXTtcblx0ICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gVDtcblx0fSA6ICRhc3NpZ247XG5cblx0dmFyICQkNCA9IF9leHBvcnQ7XG5cblx0dmFyIGFzc2lnbiA9IG9iamVjdEFzc2lnbjsgLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuXHQvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuXG5cdCQkNCh7XG5cdCAgdGFyZ2V0OiAnT2JqZWN0Jyxcblx0ICBzdGF0OiB0cnVlLFxuXHQgIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduXG5cdH0sIHtcblx0ICBhc3NpZ246IGFzc2lnblxuXHR9KTtcblxuXHR2YXIgaXNTeW1ib2wgPSBpc1N5bWJvbCQzO1xuXG5cdHZhciB0b1N0cmluZyQyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG5cdCAgaWYgKGlzU3ltYm9sKGFyZ3VtZW50KSkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHQgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuXHR9O1xuXG5cdHZhciB0b0ludGVnZXIgPSB0b0ludGVnZXIkMztcblxuXHR2YXIgdG9TdHJpbmckMSA9IHRvU3RyaW5nJDI7XG5cblx0dmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkMSA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNDsgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuXG5cblx0dmFyIHN0cmluZ1JlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuXHQgIHZhciBzdHIgPSB0b1N0cmluZyQxKHJlcXVpcmVPYmplY3RDb2VyY2libGUkMSh0aGlzKSk7XG5cdCAgdmFyIHJlc3VsdCA9ICcnO1xuXHQgIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcblx0ICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG5cblx0ICBmb3IgKDsgbiA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlc3VsdCArPSBzdHI7XG5cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdHZhciAkJDMgPSBfZXhwb3J0O1xuXG5cdHZhciByZXBlYXQkMSA9IHN0cmluZ1JlcGVhdDsgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuXG5cblx0JCQzKHtcblx0ICB0YXJnZXQ6ICdTdHJpbmcnLFxuXHQgIHByb3RvOiB0cnVlXG5cdH0sIHtcblx0ICByZXBlYXQ6IHJlcGVhdCQxXG5cdH0pO1xuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG5cdHZhciB0b0xlbmd0aCA9IHRvTGVuZ3RoJDI7XG5cblx0dmFyIHRvU3RyaW5nID0gdG9TdHJpbmckMjtcblxuXHR2YXIgcmVwZWF0ID0gc3RyaW5nUmVwZWF0O1xuXG5cdHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ0O1xuXG5cdHZhciBjZWlsID0gTWF0aC5jZWlsOyAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuXG5cdHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG5cdCAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcblx0ICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcblx0ICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogdG9TdHJpbmcoZmlsbFN0cmluZyk7XG5cdCAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcblx0ICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG5cdCAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcblx0ICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG5cdCAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBjZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuXHQgICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG5cdCAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG5cdCAgfTtcblx0fTtcblxuXHR2YXIgc3RyaW5nUGFkID0ge1xuXHQgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcblx0ICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcblx0ICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcblx0ICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuXHQgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcblx0ICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxuXHR9O1xuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcblx0dmFyIHVzZXJBZ2VudCA9IGVuZ2luZVVzZXJBZ2VudDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdW5zYWZlLXJlZ2V4IC0tIHNhZmVcblxuXG5cdHZhciBzdHJpbmdQYWRXZWJraXRCdWcgPSAvVmVyc2lvblxcLzEwKD86XFwuXFxkKyl7MSwyfSg/OiBbXFx3Li9dKyk/KD86IE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuXHR2YXIgJCQyID0gX2V4cG9ydDtcblxuXHR2YXIgJHBhZFN0YXJ0ID0gc3RyaW5nUGFkLnN0YXJ0O1xuXG5cdHZhciBXRUJLSVRfQlVHJDEgPSBzdHJpbmdQYWRXZWJraXRCdWc7IC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG5cblxuXHQkJDIoe1xuXHQgIHRhcmdldDogJ1N0cmluZycsXG5cdCAgcHJvdG86IHRydWUsXG5cdCAgZm9yY2VkOiBXRUJLSVRfQlVHJDFcblx0fSwge1xuXHQgIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGhcblx0ICAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi9cblx0ICApIHtcblx0ICAgIHJldHVybiAkcGFkU3RhcnQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgJCQxID0gX2V4cG9ydDtcblxuXHR2YXIgJHBhZEVuZCA9IHN0cmluZ1BhZC5lbmQ7XG5cblx0dmFyIFdFQktJVF9CVUcgPSBzdHJpbmdQYWRXZWJraXRCdWc7IC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG5cdC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcblxuXG5cdCQkMSh7XG5cdCAgdGFyZ2V0OiAnU3RyaW5nJyxcblx0ICBwcm90bzogdHJ1ZSxcblx0ICBmb3JjZWQ6IFdFQktJVF9CVUdcblx0fSwge1xuXHQgIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aFxuXHQgIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqL1xuXHQgICkge1xuXHQgICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgJCA9IF9leHBvcnQ7XG5cblx0dmFyIGdsb2JhbCQxID0gZ2xvYmFsJGM7IC8vIGBnbG9iYWxUaGlzYCBvYmplY3Rcblx0Ly8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzXG5cblxuXHQkKHtcblx0ICBnbG9iYWw6IHRydWVcblx0fSwge1xuXHQgIGdsb2JhbFRoaXM6IGdsb2JhbCQxXG5cdH0pO1xuXG5cdGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG5cdCAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG5cdCAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG5cdCAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICByZXR1cm4gdHlwZW9mIG9iajtcblx0ICAgIH07XG5cdCAgfSBlbHNlIHtcblx0ICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICByZXR1cm4gX3R5cGVvZihvYmopO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuXHQgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuXHQgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuXHQgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuXHQgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG5cdCAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG5cdCAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuXHQgIHJldHVybiBDb25zdHJ1Y3Rvcjtcblx0fVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcblx0ICBpZiAoa2V5IGluIG9iaikge1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG5cdCAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgICAgICB3cml0YWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG9ialtrZXldID0gdmFsdWU7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIG9iajtcblx0fVxuXG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuXHQgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcblx0ICB9XG5cblx0ICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcblx0ICAgIGNvbnN0cnVjdG9yOiB7XG5cdCAgICAgIHZhbHVlOiBzdWJDbGFzcyxcblx0ICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHQgICAgfVxuXHQgIH0pO1xuXHQgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcblx0ICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuXHQgICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcblx0ICB9O1xuXHQgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG5cdH1cblxuXHRmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuXHQgIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuXHQgICAgby5fX3Byb3RvX18gPSBwO1xuXHQgICAgcmV0dXJuIG87XG5cdCAgfTtcblxuXHQgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG5cdH1cblxuXHRmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuXHQgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcblx0ICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuXHQgIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cblx0ICB0cnkge1xuXHQgICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcblx0ICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblx0ICB2YXIgdGFyZ2V0ID0ge307XG5cdCAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXHQgIHZhciBrZXksIGk7XG5cblx0ICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAga2V5ID0gc291cmNlS2V5c1tpXTtcblx0ICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG5cdCAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuXHQgIH1cblxuXHQgIHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuXHQgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG5cdCAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG5cdCAgdmFyIGtleSwgaTtcblxuXHQgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdCAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuXHQgICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcblx0ICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcblx0ICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcblx0ICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG5cdCAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuXHQgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuXHQgIH1cblxuXHQgIHJldHVybiBzZWxmO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuXHQgIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuXHQgICAgcmV0dXJuIGNhbGw7XG5cdCAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcblx0ICB9XG5cblx0ICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG5cdCAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7XG5cblx0ICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7XG5cdCAgICB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksXG5cdCAgICAgICAgcmVzdWx0O1xuXG5cdCAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuXHQgICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG5cdCAgICAgIHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcblx0ICB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuXHQgIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG5cdCAgICBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcblx0ICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuXHQgIH1cblxuXHQgIHJldHVybiBvYmplY3Q7XG5cdH1cblxuXHRmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG5cdCAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7XG5cdCAgICBfZ2V0ID0gUmVmbGVjdC5nZXQ7XG5cdCAgfSBlbHNlIHtcblx0ICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG5cdCAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cblx0ICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG5cdCAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cblx0ICAgICAgaWYgKGRlc2MuZ2V0KSB7XG5cdCAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG5cdCAgICB9O1xuXHQgIH1cblxuXHQgIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG5cdCAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3Quc2V0KSB7XG5cdCAgICBzZXQgPSBSZWZsZWN0LnNldDtcblx0ICB9IGVsc2Uge1xuXHQgICAgc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcikge1xuXHQgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG5cdCAgICAgIHZhciBkZXNjO1xuXG5cdCAgICAgIGlmIChiYXNlKSB7XG5cdCAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG5cdCAgICAgICAgaWYgKGRlc2Muc2V0KSB7XG5cdCAgICAgICAgICBkZXNjLnNldC5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XG5cdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9IGVsc2UgaWYgKCFkZXNjLndyaXRhYmxlKSB7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVjZWl2ZXIsIHByb3BlcnR5KTtcblxuXHQgICAgICBpZiAoZGVzYykge1xuXHQgICAgICAgIGlmICghZGVzYy53cml0YWJsZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGRlc2MudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIHByb3BlcnR5LCBkZXNjKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBfZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIHByb3BlcnR5LCB2YWx1ZSk7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3NldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIsIGlzU3RyaWN0KSB7XG5cdCAgdmFyIHMgPSBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyIHx8IHRhcmdldCk7XG5cblx0ICBpZiAoIXMgJiYgaXNTdHJpY3QpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIHNldCBwcm9wZXJ0eScpO1xuXHQgIH1cblxuXHQgIHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuXHQgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG5cdH1cblxuXHRmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcblx0fVxuXG5cdGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcblx0ICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cblx0ICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuXHQgIHZhciBfYXJyID0gW107XG5cdCAgdmFyIF9uID0gdHJ1ZTtcblx0ICB2YXIgX2QgPSBmYWxzZTtcblxuXHQgIHZhciBfcywgX2U7XG5cblx0ICB0cnkge1xuXHQgICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuXHQgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG5cdCAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcblx0ICAgIH1cblx0ICB9IGNhdGNoIChlcnIpIHtcblx0ICAgIF9kID0gdHJ1ZTtcblx0ICAgIF9lID0gZXJyO1xuXHQgIH0gZmluYWxseSB7XG5cdCAgICB0cnkge1xuXHQgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG5cdCAgICB9IGZpbmFsbHkge1xuXHQgICAgICBpZiAoX2QpIHRocm93IF9lO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBfYXJyO1xuXHR9XG5cblx0ZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuXHQgIGlmICghbykgcmV0dXJuO1xuXHQgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG5cdCAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuXHQgIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG5cdCAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG5cdCAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcblx0ICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuXHQgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuXHQgIHJldHVybiBhcnIyO1xuXHR9XG5cblx0ZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcblx0ICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuXHR9XG5cblx0LyoqIENoZWNrcyBpZiB2YWx1ZSBpcyBzdHJpbmcgKi9cblx0ZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZztcblx0fVxuXHQvKipcblx0ICBEaXJlY3Rpb25cblx0ICBAcHJvcCB7c3RyaW5nfSBOT05FXG5cdCAgQHByb3Age3N0cmluZ30gTEVGVFxuXHQgIEBwcm9wIHtzdHJpbmd9IEZPUkNFX0xFRlRcblx0ICBAcHJvcCB7c3RyaW5nfSBSSUdIVFxuXHQgIEBwcm9wIHtzdHJpbmd9IEZPUkNFX1JJR0hUXG5cdCovXG5cblx0dmFyIERJUkVDVElPTiA9IHtcblx0ICBOT05FOiAnTk9ORScsXG5cdCAgTEVGVDogJ0xFRlQnLFxuXHQgIEZPUkNFX0xFRlQ6ICdGT1JDRV9MRUZUJyxcblx0ICBSSUdIVDogJ1JJR0hUJyxcblx0ICBGT1JDRV9SSUdIVDogJ0ZPUkNFX1JJR0hUJ1xuXHR9O1xuXHQvKiogKi9cblxuXHRmdW5jdGlvbiBmb3JjZURpcmVjdGlvbihkaXJlY3Rpb24pIHtcblx0ICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuXHQgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcblx0ICAgICAgcmV0dXJuIERJUkVDVElPTi5GT1JDRV9MRUZUO1xuXG5cdCAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcblx0ICAgICAgcmV0dXJuIERJUkVDVElPTi5GT1JDRV9SSUdIVDtcblxuXHQgICAgZGVmYXVsdDpcblx0ICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcblx0ICB9XG5cdH1cblx0LyoqIEVzY2FwZXMgcmVndWxhciBleHByZXNzaW9uIGNvbnRyb2wgY2hhcnMgKi9cblxuXHRmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG5cdCAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG5cdH0gLy8gY2xvbmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Vwb2JlcmV6a2luL2Zhc3QtZGVlcC1lcXVhbCB3aXRoIHNtYWxsIGNoYW5nZXNcblxuXHRmdW5jdGlvbiBvYmplY3RJbmNsdWRlcyhiLCBhKSB7XG5cdCAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXHQgIHZhciBhcnJBID0gQXJyYXkuaXNBcnJheShhKSxcblx0ICAgICAgYXJyQiA9IEFycmF5LmlzQXJyYXkoYiksXG5cdCAgICAgIGk7XG5cblx0ICBpZiAoYXJyQSAmJiBhcnJCKSB7XG5cdCAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuXHQgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKCFvYmplY3RJbmNsdWRlcyhhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cblx0ICBpZiAoYXJyQSAhPSBhcnJCKSByZXR1cm4gZmFsc2U7XG5cblx0ICBpZiAoYSAmJiBiICYmIF90eXBlb2YoYSkgPT09ICdvYmplY3QnICYmIF90eXBlb2YoYikgPT09ICdvYmplY3QnKSB7XG5cdCAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcblx0ICAgICAgICBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xuXHQgICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cdCAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcblx0ICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cCxcblx0ICAgICAgICByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcblx0ICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXHQgICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuXHQgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhKTsgLy8gaWYgKGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuXHQgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKCFvYmplY3RJbmNsdWRlcyhiW2tleXNbaV1dLCBhW2tleXNbaV1dKSkgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2UgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXHQgIH1cblxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXHQvKiogU2VsZWN0aW9uIHJhbmdlICovXG5cblx0LyoqIFByb3ZpZGVzIGRldGFpbHMgb2YgY2hhbmdpbmcgaW5wdXQgKi9cblxuXHR2YXIgQWN0aW9uRGV0YWlscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG5cdCAgLyoqIEN1cnJlbnQgaW5wdXQgdmFsdWUgKi9cblxuXHQgIC8qKiBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiAqL1xuXG5cdCAgLyoqIE9sZCBpbnB1dCB2YWx1ZSAqL1xuXG5cdCAgLyoqIE9sZCBzZWxlY3Rpb24gKi9cblx0ICBmdW5jdGlvbiBBY3Rpb25EZXRhaWxzKHZhbHVlLCBjdXJzb3JQb3MsIG9sZFZhbHVlLCBvbGRTZWxlY3Rpb24pIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY3Rpb25EZXRhaWxzKTtcblxuXHQgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgdGhpcy5jdXJzb3JQb3MgPSBjdXJzb3JQb3M7XG5cdCAgICB0aGlzLm9sZFZhbHVlID0gb2xkVmFsdWU7XG5cdCAgICB0aGlzLm9sZFNlbGVjdGlvbiA9IG9sZFNlbGVjdGlvbjsgLy8gZG91YmxlIGNoZWNrIGlmIGxlZnQgcGFydCB3YXMgY2hhbmdlZCAoYXV0b2ZpbGxpbmcsIG90aGVyIG5vbi1zdGFuZGFyZCBpbnB1dCB0cmlnZ2VycylcblxuXHQgICAgd2hpbGUgKHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykgIT09IHRoaXMub2xkVmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykpIHtcblx0ICAgICAgLS10aGlzLm9sZFNlbGVjdGlvbi5zdGFydDtcblx0ICAgIH1cblx0ICB9XG5cdCAgLyoqXG5cdCAgICBTdGFydCBjaGFuZ2luZyBwb3NpdGlvblxuXHQgICAgQHJlYWRvbmx5XG5cdCAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKEFjdGlvbkRldGFpbHMsIFt7XG5cdCAgICBrZXk6IFwic3RhcnRDaGFuZ2VQb3NcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5jdXJzb3JQb3MsIHRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0KTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBJbnNlcnRlZCBzeW1ib2xzIGNvdW50XG5cdCAgICAgIEByZWFkb25seVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpbnNlcnRlZENvdW50XCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zIC0gdGhpcy5zdGFydENoYW5nZVBvcztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBJbnNlcnRlZCBzeW1ib2xzXG5cdCAgICAgIEByZWFkb25seVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpbnNlcnRlZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLmluc2VydGVkQ291bnQpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFJlbW92ZWQgc3ltYm9scyBjb3VudFxuXHQgICAgICBAcmVhZG9ubHlcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlZENvdW50XCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgLy8gTWF0aC5tYXggZm9yIG9wcG9zaXRlIG9wZXJhdGlvblxuXHQgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5vbGRTZWxlY3Rpb24uZW5kIC0gdGhpcy5zdGFydENoYW5nZVBvcyB8fCAvLyBmb3IgRGVsZXRlXG5cdCAgICAgIHRoaXMub2xkVmFsdWUubGVuZ3RoIC0gdGhpcy52YWx1ZS5sZW5ndGgsIDApO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFJlbW92ZWQgc3ltYm9sc1xuXHQgICAgICBAcmVhZG9ubHlcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm9sZFZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLnJlbW92ZWRDb3VudCk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgVW5jaGFuZ2VkIGhlYWQgc3ltYm9sc1xuXHQgICAgICBAcmVhZG9ubHlcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaGVhZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cmluZygwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBVbmNoYW5nZWQgdGFpbCBzeW1ib2xzXG5cdCAgICAgIEByZWFkb25seVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0YWlsXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKHRoaXMuc3RhcnRDaGFuZ2VQb3MgKyB0aGlzLmluc2VydGVkQ291bnQpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFJlbW92ZSBkaXJlY3Rpb25cblx0ICAgICAgQHJlYWRvbmx5XG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlbW92ZURpcmVjdGlvblwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIGlmICghdGhpcy5yZW1vdmVkQ291bnQgfHwgdGhpcy5pbnNlcnRlZENvdW50KSByZXR1cm4gRElSRUNUSU9OLk5PTkU7IC8vIGFsaWduIHJpZ2h0IGlmIGRlbGV0ZSBhdCByaWdodCBvciBpZiByYW5nZSByZW1vdmVkIChldmVudCB3aXRoIGJhY2tzcGFjZSlcblxuXHQgICAgICByZXR1cm4gdGhpcy5vbGRTZWxlY3Rpb24uZW5kID09PSB0aGlzLmN1cnNvclBvcyB8fCB0aGlzLm9sZFNlbGVjdGlvbi5zdGFydCA9PT0gdGhpcy5jdXJzb3JQb3MgPyBESVJFQ1RJT04uUklHSFQgOiBESVJFQ1RJT04uTEVGVDtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gQWN0aW9uRGV0YWlscztcblx0fSgpO1xuXG5cdC8qKlxuXHQgIFByb3ZpZGVzIGRldGFpbHMgb2YgY2hhbmdpbmcgbW9kZWwgdmFsdWVcblx0ICBAcGFyYW0ge09iamVjdH0gW2RldGFpbHNdXG5cdCAgQHBhcmFtIHtzdHJpbmd9IFtkZXRhaWxzLmluc2VydGVkXSAtIEluc2VydGVkIHN5bWJvbHNcblx0ICBAcGFyYW0ge2Jvb2xlYW59IFtkZXRhaWxzLnNraXBdIC0gQ2FuIHNraXAgY2hhcnNcblx0ICBAcGFyYW0ge251bWJlcn0gW2RldGFpbHMucmVtb3ZlQ291bnRdIC0gUmVtb3ZlZCBzeW1ib2xzIGNvdW50XG5cdCAgQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWxzLnRhaWxTaGlmdF0gLSBBZGRpdGlvbmFsIG9mZnNldCBpZiBhbnkgY2hhbmdlcyBvY2N1cnJlZCBiZWZvcmUgdGFpbFxuXHQqL1xuXHR2YXIgQ2hhbmdlRGV0YWlscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG5cdCAgLyoqIEluc2VydGVkIHN5bWJvbHMgKi9cblxuXHQgIC8qKiBDYW4gc2tpcCBjaGFycyAqL1xuXG5cdCAgLyoqIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsICovXG5cblx0ICAvKiogUmF3IGluc2VydGVkIGlzIHVzZWQgYnkgZHluYW1pYyBtYXNrICovXG5cdCAgZnVuY3Rpb24gQ2hhbmdlRGV0YWlscyhkZXRhaWxzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbmdlRGV0YWlscyk7XG5cblx0ICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuXHQgICAgICBpbnNlcnRlZDogJycsXG5cdCAgICAgIHJhd0luc2VydGVkOiAnJyxcblx0ICAgICAgc2tpcDogZmFsc2UsXG5cdCAgICAgIHRhaWxTaGlmdDogMFxuXHQgICAgfSwgZGV0YWlscyk7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAgQWdncmVnYXRlIGNoYW5nZXNcblx0ICAgIEByZXR1cm5zIHtDaGFuZ2VEZXRhaWxzfSBgdGhpc2Bcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoQ2hhbmdlRGV0YWlscywgW3tcblx0ICAgIGtleTogXCJhZ2dyZWdhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhZ2dyZWdhdGUoZGV0YWlscykge1xuXHQgICAgICB0aGlzLnJhd0luc2VydGVkICs9IGRldGFpbHMucmF3SW5zZXJ0ZWQ7XG5cdCAgICAgIHRoaXMuc2tpcCA9IHRoaXMuc2tpcCB8fCBkZXRhaWxzLnNraXA7XG5cdCAgICAgIHRoaXMuaW5zZXJ0ZWQgKz0gZGV0YWlscy5pbnNlcnRlZDtcblx0ICAgICAgdGhpcy50YWlsU2hpZnQgKz0gZGV0YWlscy50YWlsU2hpZnQ7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgLyoqIFRvdGFsIG9mZnNldCBjb25zaWRlcmluZyBhbGwgY2hhbmdlcyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm9mZnNldFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRhaWxTaGlmdCArIHRoaXMuaW5zZXJ0ZWQubGVuZ3RoO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBDaGFuZ2VEZXRhaWxzO1xuXHR9KCk7XG5cblx0LyoqIFByb3ZpZGVzIGRldGFpbHMgb2YgY29udGludW91cyBleHRyYWN0ZWQgdGFpbCAqL1xuXHR2YXIgQ29udGludW91c1RhaWxEZXRhaWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcblx0ICAvKiogVGFpbCB2YWx1ZSBhcyBzdHJpbmcgKi9cblxuXHQgIC8qKiBUYWlsIHN0YXJ0IHBvc2l0aW9uICovXG5cblx0ICAvKiogU3RhcnQgcG9zaXRpb24gKi9cblx0ICBmdW5jdGlvbiBDb250aW51b3VzVGFpbERldGFpbHMoKSB7XG5cdCAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXHQgICAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cdCAgICB2YXIgc3RvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuXG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGludW91c1RhaWxEZXRhaWxzKTtcblxuXHQgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgdGhpcy5mcm9tID0gZnJvbTtcblx0ICAgIHRoaXMuc3RvcCA9IHN0b3A7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKENvbnRpbnVvdXNUYWlsRGV0YWlscywgW3tcblx0ICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0ZW5kXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kKHRhaWwpIHtcblx0ICAgICAgdGhpcy52YWx1ZSArPSBTdHJpbmcodGFpbCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFRvXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVG8obWFza2VkKSB7XG5cdCAgICAgIHJldHVybiBtYXNrZWQuYXBwZW5kKHRoaXMudG9TdHJpbmcoKSwge1xuXHQgICAgICAgIHRhaWw6IHRydWVcblx0ICAgICAgfSkuYWdncmVnYXRlKG1hc2tlZC5fYXBwZW5kUGxhY2Vob2xkZXIoKSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcblx0ICAgICAgICBmcm9tOiB0aGlzLmZyb20sXG5cdCAgICAgICAgc3RvcDogdGhpcy5zdG9wXG5cdCAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcblx0ICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInNoaWZ0QmVmb3JlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnRCZWZvcmUocG9zKSB7XG5cdCAgICAgIGlmICh0aGlzLmZyb20gPj0gcG9zIHx8ICF0aGlzLnZhbHVlLmxlbmd0aCkgcmV0dXJuICcnO1xuXHQgICAgICB2YXIgc2hpZnRDaGFyID0gdGhpcy52YWx1ZVswXTtcblx0ICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMSk7XG5cdCAgICAgIHJldHVybiBzaGlmdENoYXI7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIENvbnRpbnVvdXNUYWlsRGV0YWlscztcblx0fSgpO1xuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIG1hc2sgb24gZWxlbWVudC5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fE1hc2tFbGVtZW50fSBlbCAtIEVsZW1lbnQgdG8gYXBwbHkgbWFza1xuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEN1c3RvbSBtYXNrIG9wdGlvbnNcblx0ICogQHJldHVybiB7SW5wdXRNYXNrfVxuXHQgKi9cblx0ZnVuY3Rpb24gSU1hc2soZWwpIHtcblx0ICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgLy8gY3VycmVudGx5IGF2YWlsYWJsZSBvbmx5IGZvciBpbnB1dC1saWtlIGVsZW1lbnRzXG5cdCAgcmV0dXJuIG5ldyBJTWFzay5JbnB1dE1hc2soZWwsIG9wdHMpO1xuXHR9XG5cblx0LyoqIFN1cHBvcnRlZCBtYXNrIHR5cGUgKi9cblxuXHQvKiogUHJvdmlkZXMgY29tbW9uIG1hc2tpbmcgc3R1ZmYgKi9cblx0dmFyIE1hc2tlZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG5cdCAgLy8gJFNoYXBlPE1hc2tlZE9wdGlvbnM+OyBUT0RPIGFmdGVyIGZpeCBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDc3M1xuXG5cdCAgLyoqIEB0eXBlIHtNYXNrfSAqL1xuXG5cdCAgLyoqICovXG5cdCAgLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xuXG5cdCAgLyoqIFRyYW5zZm9ybXMgdmFsdWUgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZyAqL1xuXG5cdCAgLyoqIFZhbGlkYXRlcyBpZiB2YWx1ZSBpcyBhY2NlcHRhYmxlICovXG5cblx0ICAvKiogRG9lcyBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXG5cblx0ICAvKiogRm9ybWF0IHR5cGVkIHZhbHVlIHRvIHN0cmluZyAqL1xuXG5cdCAgLyoqIFBhcnNlIHN0cmdpbiB0byBnZXQgdHlwZWQgdmFsdWUgKi9cblxuXHQgIC8qKiBFbmFibGUgY2hhcmFjdGVycyBvdmVyd3JpdGluZyAqL1xuXG5cdCAgLyoqICovXG5cdCAgZnVuY3Rpb24gTWFza2VkKG9wdHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWQpO1xuXG5cdCAgICB0aGlzLl92YWx1ZSA9ICcnO1xuXG5cdCAgICB0aGlzLl91cGRhdGUoT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkLkRFRkFVTFRTLCBvcHRzKSk7XG5cblx0ICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG5cdCAgfVxuXHQgIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrZWQsIFt7XG5cdCAgICBrZXk6IFwidXBkYXRlT3B0aW9uc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0cykge1xuXHQgICAgICBpZiAoIU9iamVjdC5rZXlzKG9wdHMpLmxlbmd0aCkgcmV0dXJuO1xuXHQgICAgICB0aGlzLndpdGhWYWx1ZVJlZnJlc2godGhpcy5fdXBkYXRlLmJpbmQodGhpcywgb3B0cykpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFNldHMgbmV3IG9wdGlvbnNcblx0ICAgICAgQHByb3RlY3RlZFxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKiogTWFzayBzdGF0ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBfdmFsdWU6IHRoaXMudmFsdWVcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IHN0YXRlLl92YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKiBSZXNldHMgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZXNldFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICB0aGlzLl92YWx1ZSA9ICcnO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy5yZXNvbHZlKHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIC8qKiBSZXNvbHZlIG5ldyB2YWx1ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlc29sdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG5cdCAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgdGhpcy5hcHBlbmQodmFsdWUsIHtcblx0ICAgICAgICBpbnB1dDogdHJ1ZVxuXHQgICAgICB9LCAnJyk7XG5cdCAgICAgIHRoaXMuZG9Db21taXQoKTtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge30sICcnKTtcblx0ICAgICAgdGhpcy5kb0NvbW1pdCgpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidHlwZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmRvUGFyc2UodGhpcy52YWx1ZSk7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZG9Gb3JtYXQodmFsdWUpO1xuXHQgICAgfVxuXHQgICAgLyoqIFZhbHVlIHRoYXQgaW5jbHVkZXMgcmF3IHVzZXIgaW5wdXQgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyYXdJbnB1dFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdElucHV0KDAsIHRoaXMudmFsdWUubGVuZ3RoLCB7XG5cdCAgICAgICAgcmF3OiB0cnVlXG5cdCAgICAgIH0pO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgdGhpcy5hcHBlbmQodmFsdWUsIHtcblx0ICAgICAgICByYXc6IHRydWVcblx0ICAgICAgfSwgJycpO1xuXHQgICAgICB0aGlzLmRvQ29tbWl0KCk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgICAvKiogRmluZHMgbmVhcmVzdCBpbnB1dCBwb3NpdGlvbiBpbiBkaXJlY3Rpb24gKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcblx0ICAgICAgcmV0dXJuIGN1cnNvclBvcztcblx0ICAgIH1cblx0ICAgIC8qKiBFeHRyYWN0cyB2YWx1ZSBpbiByYW5nZSBjb25zaWRlcmluZyBmbGFncyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlLnNsaWNlKGZyb21Qb3MsIHRvUG9zKTtcblx0ICAgIH1cblx0ICAgIC8qKiBFeHRyYWN0cyB0YWlsIGluIHJhbmdlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHJldHVybiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKHRoaXMuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zKSwgZnJvbVBvcyk7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyB0YWlsICovXG5cdCAgICAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYXBwZW5kVGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRhaWwodGFpbCkge1xuXHQgICAgICBpZiAoaXNTdHJpbmcodGFpbCkpIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSk7XG5cdCAgICAgIHJldHVybiB0YWlsLmFwcGVuZFRvKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqIEFwcGVuZHMgY2hhciAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRDaGFyUmF3XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXJSYXcoY2gpIHtcblx0ICAgICAgaWYgKCFjaCkgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICAgIHRoaXMuX3ZhbHVlICs9IGNoO1xuXHQgICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoe1xuXHQgICAgICAgIGluc2VydGVkOiBjaCxcblx0ICAgICAgICByYXdJbnNlcnRlZDogY2hcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyBjaGFyICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihjaCkge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICB2YXIgY2hlY2tUYWlsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cdCAgICAgIHZhciBjb25zaXN0ZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwZW5kQ2hhclJhdyh0aGlzLmRvUHJlcGFyZShjaCwgZmxhZ3MpLCBmbGFncyk7XG5cblx0ICAgICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQpIHtcblx0ICAgICAgICB2YXIgY29uc2lzdGVudFRhaWw7XG5cdCAgICAgICAgdmFyIGFwcGVuZGVkID0gdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSAhPT0gZmFsc2U7XG5cblx0ICAgICAgICBpZiAoYXBwZW5kZWQgJiYgY2hlY2tUYWlsICE9IG51bGwpIHtcblx0ICAgICAgICAgIC8vIHZhbGlkYXRpb24gb2ssIGNoZWNrIHRhaWxcblx0ICAgICAgICAgIHZhciBiZWZvcmVUYWlsU3RhdGUgPSB0aGlzLnN0YXRlO1xuXG5cdCAgICAgICAgICBpZiAodGhpcy5vdmVyd3JpdGUpIHtcblx0ICAgICAgICAgICAgY29uc2lzdGVudFRhaWwgPSBjaGVja1RhaWwuc3RhdGU7XG5cdCAgICAgICAgICAgIGNoZWNrVGFpbC5zaGlmdEJlZm9yZSh0aGlzLnZhbHVlLmxlbmd0aCk7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHZhciB0YWlsRGV0YWlscyA9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpO1xuXHQgICAgICAgICAgYXBwZW5kZWQgPSB0YWlsRGV0YWlscy5yYXdJbnNlcnRlZCA9PT0gY2hlY2tUYWlsLnRvU3RyaW5nKCk7IC8vIGlmIG9rLCByb2xsYmFjayBzdGF0ZSBhZnRlciB0YWlsXG5cblx0ICAgICAgICAgIGlmIChhcHBlbmRlZCAmJiB0YWlsRGV0YWlscy5pbnNlcnRlZCkgdGhpcy5zdGF0ZSA9IGJlZm9yZVRhaWxTdGF0ZTtcblx0ICAgICAgICB9IC8vIHJldmVydCBhbGwgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmdcblxuXG5cdCAgICAgICAgaWYgKCFhcHBlbmRlZCkge1xuXHQgICAgICAgICAgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlID0gY29uc2lzdGVudFN0YXRlO1xuXHQgICAgICAgICAgaWYgKGNoZWNrVGFpbCAmJiBjb25zaXN0ZW50VGFpbCkgY2hlY2tUYWlsLnN0YXRlID0gY29uc2lzdGVudFRhaWw7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgICAvKiogQXBwZW5kcyBvcHRpb25hbCBwbGFjZWhvbGRlciBhdCBlbmQgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kUGxhY2Vob2xkZXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XG5cdCAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgfVxuXHQgICAgLyoqIEFwcGVuZHMgc3ltYm9scyBjb25zaWRlcmluZyBmbGFncyAqL1xuXHQgICAgLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XG5cdCAgICAgIGlmICghaXNTdHJpbmcoc3RyKSkgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZSBzaG91bGQgYmUgc3RyaW5nJyk7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgdmFyIGNoZWNrVGFpbCA9IGlzU3RyaW5nKHRhaWwpID8gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpIDogdGFpbDtcblx0ICAgICAgaWYgKGZsYWdzICYmIGZsYWdzLnRhaWwpIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgPSB0aGlzLnN0YXRlO1xuXG5cdCAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBzdHIubGVuZ3RoOyArK2NpKSB7XG5cdCAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5fYXBwZW5kQ2hhcihzdHJbY2ldLCBmbGFncywgY2hlY2tUYWlsKSk7XG5cdCAgICAgIH0gLy8gYXBwZW5kIHRhaWwgYnV0IGFnZ3JlZ2F0ZSBvbmx5IHRhaWxTaGlmdFxuXG5cblx0ICAgICAgaWYgKGNoZWNrVGFpbCAhPSBudWxsKSB7XG5cdCAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5hcHBlbmRUYWlsKGNoZWNrVGFpbCkudGFpbFNoaWZ0OyAvLyBUT0RPIGl0J3MgYSBnb29kIGlkZWEgdG8gY2xlYXIgc3RhdGUgYWZ0ZXIgYXBwZW5kaW5nIGVuZHNcblx0ICAgICAgICAvLyBidXQgaXQgY2F1c2VzIGJ1Z3Mgd2hlbiBvbmUgYXBwZW5kIGNhbGxzIGFub3RoZXIgKHdoZW4gZHluYW1pYyBkaXNwYXRjaCBzZXQgcmF3SW5wdXRWYWx1ZSlcblx0ICAgICAgICAvLyB0aGlzLl9yZXNldEJlZm9yZVRhaWxTdGF0ZSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLnZhbHVlLnNsaWNlKHRvUG9zKTtcblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICB9XG5cdCAgICAvKiogQ2FsbHMgZnVuY3Rpb24gYW5kIHJlYXBwbGllcyBjdXJyZW50IHZhbHVlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwid2l0aFZhbHVlUmVmcmVzaFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHdpdGhWYWx1ZVJlZnJlc2goZm4pIHtcblx0ICAgICAgaWYgKHRoaXMuX3JlZnJlc2hpbmcgfHwgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZuKCk7XG5cdCAgICAgIHRoaXMuX3JlZnJlc2hpbmcgPSB0cnVlO1xuXHQgICAgICB2YXIgcmF3SW5wdXQgPSB0aGlzLnJhd0lucHV0VmFsdWU7XG5cdCAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cdCAgICAgIHZhciByZXQgPSBmbigpO1xuXHQgICAgICB0aGlzLnJhd0lucHV0VmFsdWUgPSByYXdJbnB1dDsgLy8gYXBwZW5kIGxvc3QgdHJhaWxpbmcgY2hhcnMgYXQgZW5kXG5cblx0ICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZSAhPT0gdmFsdWUgJiYgdmFsdWUuaW5kZXhPZih0aGlzLnZhbHVlKSA9PT0gMCkge1xuXHQgICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLnNsaWNlKHRoaXMudmFsdWUubGVuZ3RoKSwge30sICcnKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9yZWZyZXNoaW5nO1xuXHQgICAgICByZXR1cm4gcmV0O1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicnVuSXNvbGF0ZWRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBydW5Jc29sYXRlZChmbikge1xuXHQgICAgICBpZiAodGhpcy5faXNvbGF0ZWQgfHwgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZuKHRoaXMpO1xuXHQgICAgICB0aGlzLl9pc29sYXRlZCA9IHRydWU7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdCAgICAgIHZhciByZXQgPSBmbih0aGlzKTtcblx0ICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHQgICAgICBkZWxldGUgdGhpcy5faXNvbGF0ZWQ7XG5cdCAgICAgIHJldHVybiByZXQ7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgUHJlcGFyZXMgc3RyaW5nIGJlZm9yZSBtYXNrIHByb2Nlc3Npbmdcblx0ICAgICAgQHByb3RlY3RlZFxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ByZXBhcmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ByZXBhcmUoc3RyKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIHJldHVybiB0aGlzLnByZXBhcmUgPyB0aGlzLnByZXBhcmUoc3RyLCB0aGlzLCBmbGFncykgOiBzdHI7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgVmFsaWRhdGVzIGlmIHZhbHVlIGlzIGFjY2VwdGFibGVcblx0ICAgICAgQHByb3RlY3RlZFxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZShmbGFncykge1xuXHQgICAgICByZXR1cm4gKCF0aGlzLnZhbGlkYXRlIHx8IHRoaXMudmFsaWRhdGUodGhpcy52YWx1ZSwgdGhpcywgZmxhZ3MpKSAmJiAoIXRoaXMucGFyZW50IHx8IHRoaXMucGFyZW50LmRvVmFsaWRhdGUoZmxhZ3MpKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBEb2VzIGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcblx0ICAgICAgQHByb3RlY3RlZFxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuXHQgICAgICBpZiAodGhpcy5jb21taXQpIHRoaXMuY29tbWl0KHRoaXMudmFsdWUsIHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9Gb3JtYXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb0Zvcm1hdCh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPyB0aGlzLmZvcm1hdCh2YWx1ZSwgdGhpcykgOiB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvUGFyc2VcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1BhcnNlKHN0cikge1xuXHQgICAgICByZXR1cm4gdGhpcy5wYXJzZSA/IHRoaXMucGFyc2Uoc3RyLCB0aGlzKSA6IHN0cjtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInNwbGljZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGluc2VydGVkLCByZW1vdmVEaXJlY3Rpb24pIHtcblx0ICAgICAgdmFyIHRhaWxQb3MgPSBzdGFydCArIGRlbGV0ZUNvdW50O1xuXHQgICAgICB2YXIgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGFpbFBvcyk7XG5cdCAgICAgIHZhciBzdGFydENoYW5nZVBvcyA9IHRoaXMubmVhcmVzdElucHV0UG9zKHN0YXJ0LCByZW1vdmVEaXJlY3Rpb24pO1xuXHQgICAgICB2YXIgY2hhbmdlRGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKHtcblx0ICAgICAgICB0YWlsU2hpZnQ6IHN0YXJ0Q2hhbmdlUG9zIC0gc3RhcnQgLy8gYWRqdXN0IHRhaWxTaGlmdCBpZiBzdGFydCB3YXMgYWxpZ25lZFxuXG5cdCAgICAgIH0pLmFnZ3JlZ2F0ZSh0aGlzLnJlbW92ZShzdGFydENoYW5nZVBvcykpLmFnZ3JlZ2F0ZSh0aGlzLmFwcGVuZChpbnNlcnRlZCwge1xuXHQgICAgICAgIGlucHV0OiB0cnVlXG5cdCAgICAgIH0sIHRhaWwpKTtcblx0ICAgICAgcmV0dXJuIGNoYW5nZURldGFpbHM7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIE1hc2tlZDtcblx0fSgpO1xuXHRNYXNrZWQuREVGQVVMVFMgPSB7XG5cdCAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodikge1xuXHQgICAgcmV0dXJuIHY7XG5cdCAgfSxcblx0ICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uodikge1xuXHQgICAgcmV0dXJuIHY7XG5cdCAgfVxuXHR9O1xuXHRJTWFzay5NYXNrZWQgPSBNYXNrZWQ7XG5cblx0LyoqIEdldCBNYXNrZWQgY2xhc3MgYnkgbWFzayB0eXBlICovXG5cblx0ZnVuY3Rpb24gbWFza2VkQ2xhc3MobWFzaykge1xuXHQgIGlmIChtYXNrID09IG51bGwpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignbWFzayBwcm9wZXJ0eSBzaG91bGQgYmUgZGVmaW5lZCcpO1xuXHQgIH0gLy8gJEZsb3dGaXhNZVxuXG5cblx0ICBpZiAobWFzayBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIElNYXNrLk1hc2tlZFJlZ0V4cDsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgaWYgKGlzU3RyaW5nKG1hc2spKSByZXR1cm4gSU1hc2suTWFza2VkUGF0dGVybjsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgaWYgKG1hc2sgaW5zdGFuY2VvZiBEYXRlIHx8IG1hc2sgPT09IERhdGUpIHJldHVybiBJTWFzay5NYXNrZWREYXRlOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAobWFzayBpbnN0YW5jZW9mIE51bWJlciB8fCB0eXBlb2YgbWFzayA9PT0gJ251bWJlcicgfHwgbWFzayA9PT0gTnVtYmVyKSByZXR1cm4gSU1hc2suTWFza2VkTnVtYmVyOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAoQXJyYXkuaXNBcnJheShtYXNrKSB8fCBtYXNrID09PSBBcnJheSkgcmV0dXJuIElNYXNrLk1hc2tlZER5bmFtaWM7IC8vICRGbG93Rml4TWVcblxuXHQgIGlmIChJTWFzay5NYXNrZWQgJiYgbWFzay5wcm90b3R5cGUgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpIHJldHVybiBtYXNrOyAvLyAkRmxvd0ZpeE1lXG5cblx0ICBpZiAobWFzayBpbnN0YW5jZW9mIEZ1bmN0aW9uKSByZXR1cm4gSU1hc2suTWFza2VkRnVuY3Rpb247IC8vICRGbG93Rml4TWVcblxuXHQgIGlmIChtYXNrIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzay5jb25zdHJ1Y3Rvcjtcblx0ICBjb25zb2xlLndhcm4oJ01hc2sgbm90IGZvdW5kIGZvciBtYXNrJywgbWFzayk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXHQgIC8vICRGbG93Rml4TWVcblxuXHQgIHJldHVybiBJTWFzay5NYXNrZWQ7XG5cdH1cblx0LyoqIENyZWF0ZXMgbmV3IHtAbGluayBNYXNrZWR9IGRlcGVuZGluZyBvbiBtYXNrIHR5cGUgKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVNYXNrKG9wdHMpIHtcblx0ICAvLyAkRmxvd0ZpeE1lXG5cdCAgaWYgKElNYXNrLk1hc2tlZCAmJiBvcHRzIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gb3B0cztcblx0ICBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG5cdCAgdmFyIG1hc2sgPSBvcHRzLm1hc2s7IC8vICRGbG93Rml4TWVcblxuXHQgIGlmIChJTWFzay5NYXNrZWQgJiYgbWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIG1hc2s7XG5cdCAgdmFyIE1hc2tlZENsYXNzID0gbWFza2VkQ2xhc3MobWFzayk7XG5cdCAgaWYgKCFNYXNrZWRDbGFzcykgdGhyb3cgbmV3IEVycm9yKCdNYXNrZWQgY2xhc3MgaXMgbm90IGZvdW5kIGZvciBwcm92aWRlZCBtYXNrLCBhcHByb3ByaWF0ZSBtb2R1bGUgbmVlZHMgdG8gYmUgaW1wb3J0IG1hbnVhbGx5IGJlZm9yZSBjcmVhdGluZyBtYXNrLicpO1xuXHQgIHJldHVybiBuZXcgTWFza2VkQ2xhc3Mob3B0cyk7XG5cdH1cblx0SU1hc2suY3JlYXRlTWFzayA9IGNyZWF0ZU1hc2s7XG5cblx0dmFyIF9leGNsdWRlZCQ0ID0gW1wibWFza1wiXTtcblx0dmFyIERFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMgPSB7XG5cdCAgJzAnOiAvXFxkLyxcblx0ICAnYSc6IC9bXFx1MDA0MS1cXHUwMDVBXFx1MDA2MS1cXHUwMDdBXFx1MDBBQVxcdTAwQjVcXHUwMEJBXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwXFx1MDhBMi1cXHUwOEFDXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N0ZcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzM1xcdTBDMzUtXFx1MEMzOVxcdTBDM0RcXHUwQzU4XFx1MEM1OVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDYwXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUNcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUMxLVxcdTE5QzdcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGQ0NcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5N1xcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTc4RVxcdUE3OTAtXFx1QTc5M1xcdUE3QTAtXFx1QTdBQVxcdUE3RjgtXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBODAtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUJDMC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXS8sXG5cdCAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjIwNzUwNzBcblx0ICAnKic6IC8uL1xuXHR9O1xuXHQvKiogKi9cblxuXHR2YXIgUGF0dGVybklucHV0RGVmaW5pdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXHQgIGZ1bmN0aW9uIFBhdHRlcm5JbnB1dERlZmluaXRpb24ob3B0cykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdHRlcm5JbnB1dERlZmluaXRpb24pO1xuXG5cdCAgICB2YXIgbWFzayA9IG9wdHMubWFzayxcblx0ICAgICAgICBibG9ja09wdHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0cywgX2V4Y2x1ZGVkJDQpO1xuXG5cdCAgICB0aGlzLm1hc2tlZCA9IGNyZWF0ZU1hc2soe1xuXHQgICAgICBtYXNrOiBtYXNrXG5cdCAgICB9KTtcblx0ICAgIE9iamVjdC5hc3NpZ24odGhpcywgYmxvY2tPcHRzKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoUGF0dGVybklucHV0RGVmaW5pdGlvbiwgW3tcblx0ICAgIGtleTogXCJyZXNldFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xuXHQgICAgICB0aGlzLm1hc2tlZC5yZXNldCgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXG5cdCAgICAgIGlmIChmcm9tUG9zID09PSAwICYmIHRvUG9zID49IDEpIHtcblx0ICAgICAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xuXHQgICAgICAgIHJldHVybiB0aGlzLm1hc2tlZC5yZW1vdmUoZnJvbVBvcywgdG9Qb3MpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnZhbHVlIHx8ICh0aGlzLl9pc0ZpbGxlZCAmJiAhdGhpcy5pc09wdGlvbmFsID8gdGhpcy5wbGFjZWhvbGRlckNoYXIgOiAnJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiBCb29sZWFuKHRoaXMubWFza2VkLnZhbHVlKSB8fCB0aGlzLmlzT3B0aW9uYWw7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRDaGFyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXIoc3RyKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIGlmICh0aGlzLl9pc0ZpbGxlZCkgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICAgIHZhciBzdGF0ZSA9IHRoaXMubWFza2VkLnN0YXRlOyAvLyBzaW11bGF0ZSBpbnB1dFxuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5tYXNrZWQuX2FwcGVuZENoYXIoc3RyLCBmbGFncyk7XG5cblx0ICAgICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQgJiYgdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICBkZXRhaWxzLmluc2VydGVkID0gZGV0YWlscy5yYXdJbnNlcnRlZCA9ICcnO1xuXHQgICAgICAgIHRoaXMubWFza2VkLnN0YXRlID0gc3RhdGU7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoIWRldGFpbHMuaW5zZXJ0ZWQgJiYgIXRoaXMuaXNPcHRpb25hbCAmJiAhdGhpcy5sYXp5ICYmICFmbGFncy5pbnB1dCkge1xuXHQgICAgICAgIGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLnBsYWNlaG9sZGVyQ2hhcjtcblx0ICAgICAgfVxuXG5cdCAgICAgIGRldGFpbHMuc2tpcCA9ICFkZXRhaWxzLmluc2VydGVkICYmICF0aGlzLmlzT3B0aW9uYWw7XG5cdCAgICAgIHRoaXMuX2lzRmlsbGVkID0gQm9vbGVhbihkZXRhaWxzLmluc2VydGVkKTtcblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZCgpIHtcblx0ICAgICAgdmFyIF90aGlzJG1hc2tlZDtcblxuXHQgICAgICByZXR1cm4gKF90aGlzJG1hc2tlZCA9IHRoaXMubWFza2VkKS5hcHBlbmQuYXBwbHkoX3RoaXMkbWFza2VkLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kUGxhY2Vob2xkZXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgaWYgKHRoaXMuX2lzRmlsbGVkIHx8IHRoaXMuaXNPcHRpb25hbCkgcmV0dXJuIGRldGFpbHM7XG5cdCAgICAgIHRoaXMuX2lzRmlsbGVkID0gdHJ1ZTtcblx0ICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IHRoaXMucGxhY2Vob2xkZXJDaGFyO1xuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcblx0ICAgICAgdmFyIF90aGlzJG1hc2tlZDI7XG5cblx0ICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQyID0gdGhpcy5tYXNrZWQpLmV4dHJhY3RUYWlsLmFwcGx5KF90aGlzJG1hc2tlZDIsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKCkge1xuXHQgICAgICB2YXIgX3RoaXMkbWFza2VkMztcblxuXHQgICAgICByZXR1cm4gKF90aGlzJG1hc2tlZDMgPSB0aGlzLm1hc2tlZCkuYXBwZW5kVGFpbC5hcHBseShfdGhpcyRtYXNrZWQzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblx0ICAgICAgcmV0dXJuIHRoaXMubWFza2VkLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zKSB7XG5cdCAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IERJUkVDVElPTi5OT05FO1xuXHQgICAgICB2YXIgbWluUG9zID0gMDtcblx0ICAgICAgdmFyIG1heFBvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICB2YXIgYm91bmRQb3MgPSBNYXRoLm1pbihNYXRoLm1heChjdXJzb3JQb3MsIG1pblBvcyksIG1heFBvcyk7XG5cblx0ICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX0xFRlQ6XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gYm91bmRQb3MgOiBtaW5Qb3M7XG5cblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcblx0ICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBib3VuZFBvcyA6IG1heFBvcztcblxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgIHJldHVybiBib3VuZFBvcztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF90aGlzJG1hc2tlZDQsIF90aGlzJHBhcmVudDtcblxuXHQgICAgICByZXR1cm4gKF90aGlzJG1hc2tlZDQgPSB0aGlzLm1hc2tlZCkuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRtYXNrZWQ0LCBhcmd1bWVudHMpICYmICghdGhpcy5wYXJlbnQgfHwgKF90aGlzJHBhcmVudCA9IHRoaXMucGFyZW50KS5kb1ZhbGlkYXRlLmFwcGx5KF90aGlzJHBhcmVudCwgYXJndW1lbnRzKSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvQ29tbWl0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9Db21taXQoKSB7XG5cdCAgICAgIHRoaXMubWFza2VkLmRvQ29tbWl0KCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBtYXNrZWQ6IHRoaXMubWFza2VkLnN0YXRlLFxuXHQgICAgICAgIF9pc0ZpbGxlZDogdGhpcy5faXNGaWxsZWRcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB0aGlzLm1hc2tlZC5zdGF0ZSA9IHN0YXRlLm1hc2tlZDtcblx0ICAgICAgdGhpcy5faXNGaWxsZWQgPSBzdGF0ZS5faXNGaWxsZWQ7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFBhdHRlcm5JbnB1dERlZmluaXRpb247XG5cdH0oKTtcblxuXHR2YXIgUGF0dGVybkZpeGVkRGVmaW5pdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG5cdCAgLyoqICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cdCAgZnVuY3Rpb24gUGF0dGVybkZpeGVkRGVmaW5pdGlvbihvcHRzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0dGVybkZpeGVkRGVmaW5pdGlvbik7XG5cblx0ICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG5cdCAgICB0aGlzLl92YWx1ZSA9ICcnO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhQYXR0ZXJuRml4ZWREZWZpbml0aW9uLCBbe1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaXNVbm1hc2tpbmcgPyB0aGlzLnZhbHVlIDogJyc7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlc2V0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG5cdCAgICAgIHRoaXMuX2lzUmF3SW5wdXQgPSBmYWxzZTtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSAnJztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLl92YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fdmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLl92YWx1ZS5zbGljZSh0b1Bvcyk7XG5cdCAgICAgIGlmICghdGhpcy5fdmFsdWUpIHRoaXMuX2lzUmF3SW5wdXQgPSBmYWxzZTtcblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MpIHtcblx0ICAgICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogRElSRUNUSU9OLk5PTkU7XG5cdCAgICAgIHZhciBtaW5Qb3MgPSAwO1xuXHQgICAgICB2YXIgbWF4UG9zID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuXG5cdCAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuXHQgICAgICAgICAgcmV0dXJuIG1pblBvcztcblxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgIHJldHVybiBtYXhQb3M7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLl92YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cdCAgICAgIHJldHVybiBmbGFncy5yYXcgJiYgdGhpcy5faXNSYXdJbnB1dCAmJiB0aGlzLl92YWx1ZS5zbGljZShmcm9tUG9zLCB0b1BvcykgfHwgJyc7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQ29tcGxldGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihzdHIpIHtcblx0ICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLmNoYXIgPT09IHN0clswXTtcblx0ICAgICAgdmFyIGlzUmVzb2x2ZWQgPSBhcHBlbmRlZCAmJiAodGhpcy5pc1VubWFza2luZyB8fCBmbGFncy5pbnB1dCB8fCBmbGFncy5yYXcpICYmICFmbGFncy50YWlsO1xuXHQgICAgICBpZiAoaXNSZXNvbHZlZCkgZGV0YWlscy5yYXdJbnNlcnRlZCA9IHRoaXMuY2hhcjtcblx0ICAgICAgdGhpcy5fdmFsdWUgPSBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5jaGFyO1xuXHQgICAgICB0aGlzLl9pc1Jhd0lucHV0ID0gaXNSZXNvbHZlZCAmJiAoZmxhZ3MucmF3IHx8IGZsYWdzLmlucHV0KTtcblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuXHQgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICByZXR1cm4gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygnJyk7XG5cdCAgICB9IC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVGFpbCh0YWlsKSB7XG5cdCAgICAgIGlmIChpc1N0cmluZyh0YWlsKSkgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWwpKTtcblx0ICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwZW5kQ2hhcihzdHIsIGZsYWdzKTtcblxuXHQgICAgICBpZiAodGFpbCAhPSBudWxsKSB7XG5cdCAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5hcHBlbmRUYWlsKHRhaWwpLnRhaWxTaGlmdDtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge31cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwic3RhdGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIF92YWx1ZTogdGhpcy5fdmFsdWUsXG5cdCAgICAgICAgX2lzUmF3SW5wdXQ6IHRoaXMuX2lzUmF3SW5wdXRcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gUGF0dGVybkZpeGVkRGVmaW5pdGlvbjtcblx0fSgpO1xuXG5cdHZhciBfZXhjbHVkZWQkMyA9IFtcImNodW5rc1wiXTtcblxuXHR2YXIgQ2h1bmtzVGFpbERldGFpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuXHQgIC8qKiAqL1xuXHQgIGZ1bmN0aW9uIENodW5rc1RhaWxEZXRhaWxzKCkge1xuXHQgICAgdmFyIGNodW5rcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cdCAgICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENodW5rc1RhaWxEZXRhaWxzKTtcblxuXHQgICAgdGhpcy5jaHVua3MgPSBjaHVua3M7XG5cdCAgICB0aGlzLmZyb20gPSBmcm9tO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhDaHVua3NUYWlsRGV0YWlscywgW3tcblx0ICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jaHVua3MubWFwKFN0cmluZykuam9pbignJyk7XG5cdCAgICB9IC8vICRGbG93Rml4TWUgbm8gaWRlYXNcblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRlbmRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmQodGFpbENodW5rKSB7XG5cdCAgICAgIGlmICghU3RyaW5nKHRhaWxDaHVuaykpIHJldHVybjtcblx0ICAgICAgaWYgKGlzU3RyaW5nKHRhaWxDaHVuaykpIHRhaWxDaHVuayA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHMoU3RyaW5nKHRhaWxDaHVuaykpO1xuXHQgICAgICB2YXIgbGFzdENodW5rID0gdGhpcy5jaHVua3NbdGhpcy5jaHVua3MubGVuZ3RoIC0gMV07XG5cdCAgICAgIHZhciBleHRlbmRMYXN0ID0gbGFzdENodW5rICYmIChsYXN0Q2h1bmsuc3RvcCA9PT0gdGFpbENodW5rLnN0b3AgfHwgdGFpbENodW5rLnN0b3AgPT0gbnVsbCkgJiYgLy8gaWYgdGFpbCBjaHVuayBnb2VzIGp1c3QgYWZ0ZXIgbGFzdCBjaHVua1xuXHQgICAgICB0YWlsQ2h1bmsuZnJvbSA9PT0gbGFzdENodW5rLmZyb20gKyBsYXN0Q2h1bmsudG9TdHJpbmcoKS5sZW5ndGg7XG5cblx0ICAgICAgaWYgKHRhaWxDaHVuayBpbnN0YW5jZW9mIENvbnRpbnVvdXNUYWlsRGV0YWlscykge1xuXHQgICAgICAgIC8vIGNoZWNrIHRoZSBhYmlsaXR5IHRvIGV4dGVuZCBwcmV2aW91cyBjaHVua1xuXHQgICAgICAgIGlmIChleHRlbmRMYXN0KSB7XG5cdCAgICAgICAgICAvLyBleHRlbmQgcHJldmlvdXMgY2h1bmtcblx0ICAgICAgICAgIGxhc3RDaHVuay5leHRlbmQodGFpbENodW5rLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBhcHBlbmQgbmV3IGNodW5rXG5cdCAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRhaWxDaHVuayk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKHRhaWxDaHVuayBpbnN0YW5jZW9mIENodW5rc1RhaWxEZXRhaWxzKSB7XG5cdCAgICAgICAgaWYgKHRhaWxDaHVuay5zdG9wID09IG51bGwpIHtcblx0ICAgICAgICAgIC8vIHVud3JhcCBmbG9hdGluZyBjaHVua3MgdG8gcGFyZW50LCBrZWVwaW5nIGBmcm9tYCBwb3Ncblx0ICAgICAgICAgIHZhciBmaXJzdFRhaWxDaHVuaztcblxuXHQgICAgICAgICAgd2hpbGUgKHRhaWxDaHVuay5jaHVua3MubGVuZ3RoICYmIHRhaWxDaHVuay5jaHVua3NbMF0uc3RvcCA9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIGZpcnN0VGFpbENodW5rID0gdGFpbENodW5rLmNodW5rcy5zaGlmdCgpO1xuXHQgICAgICAgICAgICBmaXJzdFRhaWxDaHVuay5mcm9tICs9IHRhaWxDaHVuay5mcm9tO1xuXHQgICAgICAgICAgICB0aGlzLmV4dGVuZChmaXJzdFRhaWxDaHVuayk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSAvLyBpZiB0YWlsIGNodW5rIHN0aWxsIGhhcyB2YWx1ZVxuXG5cblx0ICAgICAgICBpZiAodGFpbENodW5rLnRvU3RyaW5nKCkpIHtcblx0ICAgICAgICAgIC8vIGlmIGNodW5rcyBjb250YWlucyBzdG9wcywgdGhlbiBwb3B1cCBzdG9wIHRvIGNvbnRhaW5lclxuXHQgICAgICAgICAgdGFpbENodW5rLnN0b3AgPSB0YWlsQ2h1bmsuYmxvY2tJbmRleDtcblx0ICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2godGFpbENodW5rKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYXBwZW5kVG9cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUbyhtYXNrZWQpIHtcblx0ICAgICAgLy8gJEZsb3dGaXhNZVxuXHQgICAgICBpZiAoIShtYXNrZWQgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWRQYXR0ZXJuKSkge1xuXHQgICAgICAgIHZhciB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIHJldHVybiB0YWlsLmFwcGVuZFRvKG1hc2tlZCk7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cblx0ICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aCAmJiAhZGV0YWlscy5za2lwOyArK2NpKSB7XG5cdCAgICAgICAgdmFyIGNodW5rID0gdGhpcy5jaHVua3NbY2ldO1xuXG5cdCAgICAgICAgdmFyIGxhc3RCbG9ja0l0ZXIgPSBtYXNrZWQuX21hcFBvc1RvQmxvY2sobWFza2VkLnZhbHVlLmxlbmd0aCk7XG5cblx0ICAgICAgICB2YXIgc3RvcCA9IGNodW5rLnN0b3A7XG5cdCAgICAgICAgdmFyIGNodW5rQmxvY2sgPSB2b2lkIDA7XG5cblx0ICAgICAgICBpZiAoc3RvcCAhPSBudWxsICYmICghbGFzdEJsb2NrSXRlciB8fCBsYXN0QmxvY2tJdGVyLmluZGV4IDw9IHN0b3ApKSB7XG5cdCAgICAgICAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscyB8fCAvLyBmb3IgY29udGludW91cyBibG9jayBhbHNvIGNoZWNrIGlmIHN0b3AgaXMgZXhpc3Rcblx0ICAgICAgICAgIG1hc2tlZC5fc3RvcHMuaW5kZXhPZihzdG9wKSA+PSAwKSB7XG5cdCAgICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5fYXBwZW5kUGxhY2Vob2xkZXIoc3RvcCkpO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBjaHVua0Jsb2NrID0gY2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscyAmJiBtYXNrZWQuX2Jsb2Nrc1tzdG9wXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2h1bmtCbG9jaykge1xuXHQgICAgICAgICAgdmFyIHRhaWxEZXRhaWxzID0gY2h1bmtCbG9jay5hcHBlbmRUYWlsKGNodW5rKTtcblx0ICAgICAgICAgIHRhaWxEZXRhaWxzLnNraXAgPSBmYWxzZTsgLy8gYWx3YXlzIGlnbm9yZSBza2lwLCBpdCB3aWxsIGJlIHNldCBvbiBsYXN0XG5cblx0ICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRhaWxEZXRhaWxzKTtcblx0ICAgICAgICAgIG1hc2tlZC5fdmFsdWUgKz0gdGFpbERldGFpbHMuaW5zZXJ0ZWQ7IC8vIGdldCBub3QgaW5zZXJ0ZWQgY2hhcnNcblxuXHQgICAgICAgICAgdmFyIHJlbWFpbkNoYXJzID0gY2h1bmsudG9TdHJpbmcoKS5zbGljZSh0YWlsRGV0YWlscy5yYXdJbnNlcnRlZC5sZW5ndGgpO1xuXHQgICAgICAgICAgaWYgKHJlbWFpbkNoYXJzKSBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuYXBwZW5kKHJlbWFpbkNoYXJzLCB7XG5cdCAgICAgICAgICAgIHRhaWw6IHRydWVcblx0ICAgICAgICAgIH0pKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUobWFza2VkLmFwcGVuZChjaHVuay50b1N0cmluZygpLCB7XG5cdCAgICAgICAgICAgIHRhaWw6IHRydWVcblx0ICAgICAgICAgIH0pKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBjaHVua3M6IHRoaXMuY2h1bmtzLm1hcChmdW5jdGlvbiAoYykge1xuXHQgICAgICAgICAgcmV0dXJuIGMuc3RhdGU7XG5cdCAgICAgICAgfSksXG5cdCAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxuXHQgICAgICAgIHN0b3A6IHRoaXMuc3RvcCxcblx0ICAgICAgICBibG9ja0luZGV4OiB0aGlzLmJsb2NrSW5kZXhcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuXHQgICAgICB2YXIgY2h1bmtzID0gc3RhdGUuY2h1bmtzLFxuXHQgICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIF9leGNsdWRlZCQzKTtcblxuXHQgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcblx0ICAgICAgdGhpcy5jaHVua3MgPSBjaHVua3MubWFwKGZ1bmN0aW9uIChjc3RhdGUpIHtcblx0ICAgICAgICB2YXIgY2h1bmsgPSBcImNodW5rc1wiIGluIGNzdGF0ZSA/IG5ldyBDaHVua3NUYWlsRGV0YWlscygpIDogbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscygpOyAvLyAkRmxvd0ZpeE1lIGFscmVhZHkgY2hlY2tlZCBhYm92ZVxuXG5cdCAgICAgICAgY2h1bmsuc3RhdGUgPSBjc3RhdGU7XG5cdCAgICAgICAgcmV0dXJuIGNodW5rO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwic2hpZnRCZWZvcmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdEJlZm9yZShwb3MpIHtcblx0ICAgICAgaWYgKHRoaXMuZnJvbSA+PSBwb3MgfHwgIXRoaXMuY2h1bmtzLmxlbmd0aCkgcmV0dXJuICcnO1xuXHQgICAgICB2YXIgY2h1bmtTaGlmdFBvcyA9IHBvcyAtIHRoaXMuZnJvbTtcblx0ICAgICAgdmFyIGNpID0gMDtcblxuXHQgICAgICB3aGlsZSAoY2kgPCB0aGlzLmNodW5rcy5sZW5ndGgpIHtcblx0ICAgICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rc1tjaV07XG5cdCAgICAgICAgdmFyIHNoaWZ0Q2hhciA9IGNodW5rLnNoaWZ0QmVmb3JlKGNodW5rU2hpZnRQb3MpO1xuXG5cdCAgICAgICAgaWYgKGNodW5rLnRvU3RyaW5nKCkpIHtcblx0ICAgICAgICAgIC8vIGNodW5rIHN0aWxsIGNvbnRhaW5zIHZhbHVlXG5cdCAgICAgICAgICAvLyBidXQgbm90IHNoaWZ0ZWQgLSBtZWFucyBubyBtb3JlIGF2YWlsYWJsZSBjaGFycyB0byBzaGlmdFxuXHQgICAgICAgICAgaWYgKCFzaGlmdENoYXIpIGJyZWFrO1xuXHQgICAgICAgICAgKytjaTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgLy8gY2xlYW4gaWYgY2h1bmsgaGFzIG5vIHZhbHVlXG5cdCAgICAgICAgICB0aGlzLmNodW5rcy5zcGxpY2UoY2ksIDEpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChzaGlmdENoYXIpIHJldHVybiBzaGlmdENoYXI7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gJyc7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIENodW5rc1RhaWxEZXRhaWxzO1xuXHR9KCk7XG5cblx0LyoqIE1hc2tpbmcgYnkgUmVnRXhwICovXG5cblx0dmFyIE1hc2tlZFJlZ0V4cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuXHQgIF9pbmhlcml0cyhNYXNrZWRSZWdFeHAsIF9NYXNrZWQpO1xuXG5cdCAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRSZWdFeHApO1xuXG5cdCAgZnVuY3Rpb24gTWFza2VkUmVnRXhwKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFJlZ0V4cCk7XG5cblx0ICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkUmVnRXhwLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblx0ICAgIHZhbHVlOlxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xuXHQgICAgKi9cblx0ICAgIGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuXHQgICAgICBpZiAob3B0cy5tYXNrKSBvcHRzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlLnNlYXJjaChvcHRzLm1hc2spID49IDA7XG5cdCAgICAgIH07XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmVnRXhwLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWRSZWdFeHA7XG5cdH0oTWFza2VkKTtcblx0SU1hc2suTWFza2VkUmVnRXhwID0gTWFza2VkUmVnRXhwO1xuXG5cdHZhciBfZXhjbHVkZWQkMiA9IFtcIl9ibG9ja3NcIl07XG5cblx0LyoqXG5cdCAgUGF0dGVybiBtYXNrXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHNcblx0ICBAcGFyYW0ge09iamVjdH0gb3B0cy5ibG9ja3Ncblx0ICBAcGFyYW0ge09iamVjdH0gb3B0cy5kZWZpbml0aW9uc1xuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxuXHQgIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5sYXp5XG5cdCovXG5cdHZhciBNYXNrZWRQYXR0ZXJuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza2VkKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZFBhdHRlcm4sIF9NYXNrZWQpO1xuXG5cdCAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRQYXR0ZXJuKTtcblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogU2luZ2xlIGNoYXIgZm9yIGVtcHR5IGlucHV0ICovXG5cblx0ICAvKiogU2hvdyBwbGFjZWhvbGRlciBvbmx5IHdoZW4gbmVlZGVkICovXG5cdCAgZnVuY3Rpb24gTWFza2VkUGF0dGVybigpIHtcblx0ICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFBhdHRlcm4pO1xuXG5cdCAgICAvLyBUT0RPIHR5cGUgJFNoYXBlPE1hc2tlZFBhdHRlcm5PcHRpb25zPj17fSBkb2VzIG5vdCB3b3JrXG5cdCAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9JTlBVVF9ERUZJTklUSU9OUywgb3B0cy5kZWZpbml0aW9ucyk7XG5cdCAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkUGF0dGVybi5ERUZBVUxUUywgb3B0cykpO1xuXHQgIH1cblx0ICAvKipcblx0ICAgIEBvdmVycmlkZVxuXHQgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkUGF0dGVybiwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcblx0ICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXHQgICAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZpbml0aW9ucywgb3B0cy5kZWZpbml0aW9ucyk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuXHQgICAgICB0aGlzLl9yZWJ1aWxkTWFzaygpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3JlYnVpbGRNYXNrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYnVpbGRNYXNrKCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBkZWZzID0gdGhpcy5kZWZpbml0aW9ucztcblx0ICAgICAgdGhpcy5fYmxvY2tzID0gW107XG5cdCAgICAgIHRoaXMuX3N0b3BzID0gW107XG5cdCAgICAgIHRoaXMuX21hc2tlZEJsb2NrcyA9IHt9O1xuXHQgICAgICB2YXIgcGF0dGVybiA9IHRoaXMubWFzaztcblx0ICAgICAgaWYgKCFwYXR0ZXJuIHx8ICFkZWZzKSByZXR1cm47XG5cdCAgICAgIHZhciB1bm1hc2tpbmdCbG9jayA9IGZhbHNlO1xuXHQgICAgICB2YXIgb3B0aW9uYWxCbG9jayA9IGZhbHNlO1xuXG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIGlmICh0aGlzLmJsb2Nrcykge1xuXHQgICAgICAgICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBwID0gcGF0dGVybi5zbGljZShpKTtcblx0ICAgICAgICAgICAgdmFyIGJOYW1lcyA9IE9iamVjdC5rZXlzKF90aGlzLmJsb2NrcykuZmlsdGVyKGZ1bmN0aW9uIChiTmFtZSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBwLmluZGV4T2YoYk5hbWUpID09PSAwO1xuXHQgICAgICAgICAgICB9KTsgLy8gb3JkZXIgYnkga2V5IGxlbmd0aFxuXG5cdCAgICAgICAgICAgIGJOYW1lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG5cdCAgICAgICAgICAgIH0pOyAvLyB1c2UgYmxvY2sgbmFtZSB3aXRoIG1heCBsZW5ndGhcblxuXHQgICAgICAgICAgICB2YXIgYk5hbWUgPSBiTmFtZXNbMF07XG5cblx0ICAgICAgICAgICAgaWYgKGJOYW1lKSB7XG5cdCAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xuXHQgICAgICAgICAgICAgIHZhciBtYXNrZWRCbG9jayA9IGNyZWF0ZU1hc2soT2JqZWN0LmFzc2lnbih7XG5cdCAgICAgICAgICAgICAgICBwYXJlbnQ6IF90aGlzLFxuXHQgICAgICAgICAgICAgICAgbGF6eTogX3RoaXMubGF6eSxcblx0ICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyQ2hhcjogX3RoaXMucGxhY2Vob2xkZXJDaGFyLFxuXHQgICAgICAgICAgICAgICAgb3ZlcndyaXRlOiBfdGhpcy5vdmVyd3JpdGVcblx0ICAgICAgICAgICAgICB9LCBfdGhpcy5ibG9ja3NbYk5hbWVdKSk7XG5cblx0ICAgICAgICAgICAgICBpZiAobWFza2VkQmxvY2spIHtcblx0ICAgICAgICAgICAgICAgIF90aGlzLl9ibG9ja3MucHVzaChtYXNrZWRCbG9jayk7IC8vIHN0b3JlIGJsb2NrIGluZGV4XG5cblxuXHQgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fbWFza2VkQmxvY2tzW2JOYW1lXSkgX3RoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0gPSBbXTtcblxuXHQgICAgICAgICAgICAgICAgX3RoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0ucHVzaChfdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgIGkgKz0gYk5hbWUubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KCk7XG5cblx0ICAgICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBjaGFyID0gcGF0dGVybltpXTtcblxuXHQgICAgICAgIHZhciBfaXNJbnB1dCA9IChjaGFyIGluIGRlZnMpO1xuXG5cdCAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uU1RPUF9DSEFSKSB7XG5cdCAgICAgICAgICB0aGlzLl9zdG9wcy5wdXNoKHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xuXG5cdCAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2hhciA9PT0gJ3snIHx8IGNoYXIgPT09ICd9Jykge1xuXHQgICAgICAgICAgdW5tYXNraW5nQmxvY2sgPSAhdW5tYXNraW5nQmxvY2s7XG5cdCAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY2hhciA9PT0gJ1snIHx8IGNoYXIgPT09ICddJykge1xuXHQgICAgICAgICAgb3B0aW9uYWxCbG9jayA9ICFvcHRpb25hbEJsb2NrO1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uRVNDQVBFX0NIQVIpIHtcblx0ICAgICAgICAgICsraTtcblx0ICAgICAgICAgIGNoYXIgPSBwYXR0ZXJuW2ldO1xuXHQgICAgICAgICAgaWYgKCFjaGFyKSBicmVhaztcblx0ICAgICAgICAgIF9pc0lucHV0ID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGRlZiA9IF9pc0lucHV0ID8gbmV3IFBhdHRlcm5JbnB1dERlZmluaXRpb24oe1xuXHQgICAgICAgICAgcGFyZW50OiB0aGlzLFxuXHQgICAgICAgICAgbGF6eTogdGhpcy5sYXp5LFxuXHQgICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiB0aGlzLnBsYWNlaG9sZGVyQ2hhcixcblx0ICAgICAgICAgIG1hc2s6IGRlZnNbY2hhcl0sXG5cdCAgICAgICAgICBpc09wdGlvbmFsOiBvcHRpb25hbEJsb2NrXG5cdCAgICAgICAgfSkgOiBuZXcgUGF0dGVybkZpeGVkRGVmaW5pdGlvbih7XG5cdCAgICAgICAgICBjaGFyOiBjaGFyLFxuXHQgICAgICAgICAgaXNVbm1hc2tpbmc6IHVubWFza2luZ0Jsb2NrXG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICB0aGlzLl9ibG9ja3MucHVzaChkZWYpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInN0YXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJzdGF0ZVwiLCB0aGlzKSwge1xuXHQgICAgICAgIF9ibG9ja3M6IHRoaXMuX2Jsb2Nrcy5tYXAoZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICAgIHJldHVybiBiLnN0YXRlO1xuXHQgICAgICAgIH0pXG5cdCAgICAgIH0pO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG5cdCAgICAgIHZhciBfYmxvY2tzID0gc3RhdGUuX2Jsb2Nrcyxcblx0ICAgICAgICAgIG1hc2tlZFN0YXRlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHN0YXRlLCBfZXhjbHVkZWQkMik7XG5cblx0ICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIsIGJpKSB7XG5cdCAgICAgICAgcmV0dXJuIGIuc3RhdGUgPSBfYmxvY2tzW2JpXTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVzZXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInJlc2V0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cblx0ICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYi5yZXNldCgpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MuZXZlcnkoZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYi5pc0NvbXBsZXRlO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9Db21taXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb0NvbW1pdCgpIHtcblx0ICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICByZXR1cm4gYi5kb0NvbW1pdCgpO1xuXHQgICAgICB9KTtcblxuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwiZG9Db21taXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGIpIHtcblx0ICAgICAgICByZXR1cm4gc3RyICs9IGIudW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgfSwgJycpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgLy8gVE9ETyByZXR1cm4gX3ZhbHVlIHdoZW4gbm90IGluIGNoYW5nZT9cblx0ICAgICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwgYikge1xuXHQgICAgICAgIHJldHVybiBzdHIgKz0gYi52YWx1ZTtcblx0ICAgICAgfSwgJycpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJ2YWx1ZVwiLCB2YWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFwcGVuZFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKHRhaWwpIHtcblx0ICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJhcHBlbmRUYWlsXCIsIHRoaXMpLmNhbGwodGhpcywgdGFpbCkuYWdncmVnYXRlKHRoaXMuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kQ2hhclJhd1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyUmF3KGNoKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cblx0ICAgICAgdmFyIGJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblx0ICAgICAgaWYgKCFibG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xuXG5cdCAgICAgIGZvciAodmFyIGJpID0gYmxvY2tJdGVyLmluZGV4OzsgKytiaSkge1xuXHQgICAgICAgIHZhciBfYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xuXHQgICAgICAgIGlmICghX2Jsb2NrKSBicmVhaztcblxuXHQgICAgICAgIHZhciBibG9ja0RldGFpbHMgPSBfYmxvY2suX2FwcGVuZENoYXIoY2gsIGZsYWdzKTtcblxuXHQgICAgICAgIHZhciBza2lwID0gYmxvY2tEZXRhaWxzLnNraXA7XG5cdCAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYmxvY2tEZXRhaWxzKTtcblx0ICAgICAgICBpZiAoc2tpcCB8fCBibG9ja0RldGFpbHMucmF3SW5zZXJ0ZWQpIGJyZWFrOyAvLyBnbyBuZXh0IGNoYXJcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGNodW5rVGFpbCA9IG5ldyBDaHVua3NUYWlsRGV0YWlscygpO1xuXHQgICAgICBpZiAoZnJvbVBvcyA9PT0gdG9Qb3MpIHJldHVybiBjaHVua1RhaWw7XG5cblx0ICAgICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIGZ1bmN0aW9uIChiLCBiaSwgYkZyb21Qb3MsIGJUb1Bvcykge1xuXHQgICAgICAgIHZhciBibG9ja0NodW5rID0gYi5leHRyYWN0VGFpbChiRnJvbVBvcywgYlRvUG9zKTtcblx0ICAgICAgICBibG9ja0NodW5rLnN0b3AgPSBfdGhpczIuX2ZpbmRTdG9wQmVmb3JlKGJpKTtcblx0ICAgICAgICBibG9ja0NodW5rLmZyb20gPSBfdGhpczIuX2Jsb2NrU3RhcnRQb3MoYmkpO1xuXHQgICAgICAgIGlmIChibG9ja0NodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMpIGJsb2NrQ2h1bmsuYmxvY2tJbmRleCA9IGJpO1xuXHQgICAgICAgIGNodW5rVGFpbC5leHRlbmQoYmxvY2tDaHVuayk7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIHJldHVybiBjaHVua1RhaWw7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcblx0ICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cdCAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cdCAgICAgIGlmIChmcm9tUG9zID09PSB0b1BvcykgcmV0dXJuICcnO1xuXHQgICAgICB2YXIgaW5wdXQgPSAnJztcblxuXHQgICAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgZnVuY3Rpb24gKGIsIF8sIGZyb21Qb3MsIHRvUG9zKSB7XG5cdCAgICAgICAgaW5wdXQgKz0gYi5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgcmV0dXJuIGlucHV0O1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZmluZFN0b3BCZWZvcmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZFN0b3BCZWZvcmUoYmxvY2tJbmRleCkge1xuXHQgICAgICB2YXIgc3RvcEJlZm9yZTtcblxuXHQgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgdGhpcy5fc3RvcHMubGVuZ3RoOyArK3NpKSB7XG5cdCAgICAgICAgdmFyIHN0b3AgPSB0aGlzLl9zdG9wc1tzaV07XG5cdCAgICAgICAgaWYgKHN0b3AgPD0gYmxvY2tJbmRleCkgc3RvcEJlZm9yZSA9IHN0b3A7ZWxzZSBicmVhaztcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBzdG9wQmVmb3JlO1xuXHQgICAgfVxuXHQgICAgLyoqIEFwcGVuZHMgcGxhY2Vob2xkZXIgZGVwZW5kaW5nIG9uIGxhemluZXNzICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZFBsYWNlaG9sZGVyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZFBsYWNlaG9sZGVyKHRvQmxvY2tJbmRleCkge1xuXHQgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuXHQgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XG5cdCAgICAgIGlmICh0aGlzLmxhenkgJiYgdG9CbG9ja0luZGV4ID09IG51bGwpIHJldHVybiBkZXRhaWxzO1xuXG5cdCAgICAgIHZhciBzdGFydEJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xuXG5cdCAgICAgIGlmICghc3RhcnRCbG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xuXHQgICAgICB2YXIgc3RhcnRCbG9ja0luZGV4ID0gc3RhcnRCbG9ja0l0ZXIuaW5kZXg7XG5cdCAgICAgIHZhciBlbmRCbG9ja0luZGV4ID0gdG9CbG9ja0luZGV4ICE9IG51bGwgPyB0b0Jsb2NrSW5kZXggOiB0aGlzLl9ibG9ja3MubGVuZ3RoO1xuXG5cdCAgICAgIHRoaXMuX2Jsb2Nrcy5zbGljZShzdGFydEJsb2NrSW5kZXgsIGVuZEJsb2NrSW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgICBpZiAoIWIubGF6eSB8fCB0b0Jsb2NrSW5kZXggIT0gbnVsbCkge1xuXHQgICAgICAgICAgLy8gJEZsb3dGaXhNZSBgX2Jsb2Nrc2AgbWF5IG5vdCBiZSBwcmVzZW50XG5cdCAgICAgICAgICB2YXIgYXJncyA9IGIuX2Jsb2NrcyAhPSBudWxsID8gW2IuX2Jsb2Nrcy5sZW5ndGhdIDogW107XG5cblx0ICAgICAgICAgIHZhciBiRGV0YWlscyA9IGIuX2FwcGVuZFBsYWNlaG9sZGVyLmFwcGx5KGIsIGFyZ3MpO1xuXG5cdCAgICAgICAgICBfdGhpczMuX3ZhbHVlICs9IGJEZXRhaWxzLmluc2VydGVkO1xuXHQgICAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYkRldGFpbHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgICAvKiogRmluZHMgYmxvY2sgaW4gcG9zICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX21hcFBvc1RvQmxvY2tcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFwUG9zVG9CbG9jayhwb3MpIHtcblx0ICAgICAgdmFyIGFjY1ZhbCA9ICcnO1xuXG5cdCAgICAgIGZvciAodmFyIGJpID0gMDsgYmkgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK2JpKSB7XG5cdCAgICAgICAgdmFyIF9ibG9jazIgPSB0aGlzLl9ibG9ja3NbYmldO1xuXHQgICAgICAgIHZhciBibG9ja1N0YXJ0UG9zID0gYWNjVmFsLmxlbmd0aDtcblx0ICAgICAgICBhY2NWYWwgKz0gX2Jsb2NrMi52YWx1ZTtcblxuXHQgICAgICAgIGlmIChwb3MgPD0gYWNjVmFsLmxlbmd0aCkge1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgaW5kZXg6IGJpLFxuXHQgICAgICAgICAgICBvZmZzZXQ6IHBvcyAtIGJsb2NrU3RhcnRQb3Ncblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYmxvY2tTdGFydFBvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9ibG9ja1N0YXJ0UG9zKGJsb2NrSW5kZXgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5zbGljZSgwLCBibG9ja0luZGV4KS5yZWR1Y2UoZnVuY3Rpb24gKHBvcywgYikge1xuXHQgICAgICAgIHJldHVybiBwb3MgKz0gYi52YWx1ZS5sZW5ndGg7XG5cdCAgICAgIH0sIDApO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2ZvckVhY2hCbG9ja3NJblJhbmdlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MpIHtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cblx0ICAgICAgdmFyIGZyb21CbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKGZyb21Qb3MpO1xuXG5cdCAgICAgIGlmIChmcm9tQmxvY2tJdGVyKSB7XG5cdCAgICAgICAgdmFyIHRvQmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0b1Bvcyk7IC8vIHByb2Nlc3MgZmlyc3QgYmxvY2tcblxuXG5cdCAgICAgICAgdmFyIGlzU2FtZUJsb2NrID0gdG9CbG9ja0l0ZXIgJiYgZnJvbUJsb2NrSXRlci5pbmRleCA9PT0gdG9CbG9ja0l0ZXIuaW5kZXg7XG5cdCAgICAgICAgdmFyIGZyb21CbG9ja1N0YXJ0UG9zID0gZnJvbUJsb2NrSXRlci5vZmZzZXQ7XG5cdCAgICAgICAgdmFyIGZyb21CbG9ja0VuZFBvcyA9IHRvQmxvY2tJdGVyICYmIGlzU2FtZUJsb2NrID8gdG9CbG9ja0l0ZXIub2Zmc2V0IDogdGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgICBmbih0aGlzLl9ibG9ja3NbZnJvbUJsb2NrSXRlci5pbmRleF0sIGZyb21CbG9ja0l0ZXIuaW5kZXgsIGZyb21CbG9ja1N0YXJ0UG9zLCBmcm9tQmxvY2tFbmRQb3MpO1xuXG5cdCAgICAgICAgaWYgKHRvQmxvY2tJdGVyICYmICFpc1NhbWVCbG9jaykge1xuXHQgICAgICAgICAgLy8gcHJvY2VzcyBpbnRlcm1lZGlhdGUgYmxvY2tzXG5cdCAgICAgICAgICBmb3IgKHZhciBiaSA9IGZyb21CbG9ja0l0ZXIuaW5kZXggKyAxOyBiaSA8IHRvQmxvY2tJdGVyLmluZGV4OyArK2JpKSB7XG5cdCAgICAgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1tiaV0sIGJpLCAwLCB0aGlzLl9ibG9ja3NbYmldLnZhbHVlLmxlbmd0aCk7XG5cdCAgICAgICAgICB9IC8vIHByb2Nlc3MgbGFzdCBibG9ja1xuXG5cblx0ICAgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1t0b0Jsb2NrSXRlci5pbmRleF0sIHRvQmxvY2tJdGVyLmluZGV4LCAwLCB0b0Jsb2NrSXRlci5vZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXG5cdCAgICAgIHZhciByZW1vdmVEZXRhaWxzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInJlbW92ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGZyb21Qb3MsIHRvUG9zKTtcblxuXHQgICAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgZnVuY3Rpb24gKGIsIF8sIGJGcm9tUG9zLCBiVG9Qb3MpIHtcblx0ICAgICAgICByZW1vdmVEZXRhaWxzLmFnZ3JlZ2F0ZShiLnJlbW92ZShiRnJvbVBvcywgYlRvUG9zKSk7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIHJldHVybiByZW1vdmVEZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zKSB7XG5cdCAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IERJUkVDVElPTi5OT05FO1xuXHQgICAgICAvLyBUT0RPIHJlZmFjdG9yIC0gZXh0cmFjdCBhbGlnbmJsb2NrXG5cdCAgICAgIHZhciBiZWdpbkJsb2NrRGF0YSA9IHRoaXMuX21hcFBvc1RvQmxvY2soY3Vyc29yUG9zKSB8fCB7XG5cdCAgICAgICAgaW5kZXg6IDAsXG5cdCAgICAgICAgb2Zmc2V0OiAwXG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBiZWdpbkJsb2NrT2Zmc2V0ID0gYmVnaW5CbG9ja0RhdGEub2Zmc2V0LFxuXHQgICAgICAgICAgYmVnaW5CbG9ja0luZGV4ID0gYmVnaW5CbG9ja0RhdGEuaW5kZXg7XG5cdCAgICAgIHZhciBiZWdpbkJsb2NrID0gdGhpcy5fYmxvY2tzW2JlZ2luQmxvY2tJbmRleF07XG5cdCAgICAgIGlmICghYmVnaW5CbG9jaykgcmV0dXJuIGN1cnNvclBvcztcblx0ICAgICAgdmFyIGJlZ2luQmxvY2tDdXJzb3JQb3MgPSBiZWdpbkJsb2NrT2Zmc2V0OyAvLyBpZiBwb3NpdGlvbiBpbnNpZGUgYmxvY2sgLSB0cnkgdG8gYWRqdXN0IGl0XG5cblx0ICAgICAgaWYgKGJlZ2luQmxvY2tDdXJzb3JQb3MgIT09IDAgJiYgYmVnaW5CbG9ja0N1cnNvclBvcyA8IGJlZ2luQmxvY2sudmFsdWUubGVuZ3RoKSB7XG5cdCAgICAgICAgYmVnaW5CbG9ja0N1cnNvclBvcyA9IGJlZ2luQmxvY2submVhcmVzdElucHV0UG9zKGJlZ2luQmxvY2tPZmZzZXQsIGZvcmNlRGlyZWN0aW9uKGRpcmVjdGlvbikpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIGN1cnNvckF0UmlnaHQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSBiZWdpbkJsb2NrLnZhbHVlLmxlbmd0aDtcblx0ICAgICAgdmFyIGN1cnNvckF0TGVmdCA9IGJlZ2luQmxvY2tDdXJzb3JQb3MgPT09IDA7IC8vICBjdXJzb3IgaXMgSU5TSURFIGZpcnN0IGJsb2NrIChub3QgYXQgYm91bmRzKVxuXG5cdCAgICAgIGlmICghY3Vyc29yQXRMZWZ0ICYmICFjdXJzb3JBdFJpZ2h0KSByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhiZWdpbkJsb2NrSW5kZXgpICsgYmVnaW5CbG9ja0N1cnNvclBvcztcblx0ICAgICAgdmFyIHNlYXJjaEJsb2NrSW5kZXggPSBjdXJzb3JBdFJpZ2h0ID8gYmVnaW5CbG9ja0luZGV4ICsgMSA6IGJlZ2luQmxvY2tJbmRleDtcblxuXHQgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTk9ORSkge1xuXHQgICAgICAgIC8vIE5PTkUgZGlyZWN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIHN0YXJ0IGlucHV0IHBvc2l0aW9uIGlmIG5vIGNoYXJzIHdlcmUgcmVtb3ZlZFxuXHQgICAgICAgIC8vIEZPUiBOT05FOlxuXHQgICAgICAgIC8vIC1cblx0ICAgICAgICAvLyBpbnB1dHxhbnlcblx0ICAgICAgICAvLyAtPlxuXHQgICAgICAgIC8vICBhbnl8aW5wdXRcblx0ICAgICAgICAvLyA8LVxuXHQgICAgICAgIC8vICBmaWxsZWQtaW5wdXR8YW55XG5cdCAgICAgICAgLy8gY2hlY2sgaWYgZmlyc3QgYmxvY2sgYXQgbGVmdCBpcyBpbnB1dFxuXHQgICAgICAgIGlmIChzZWFyY2hCbG9ja0luZGV4ID4gMCkge1xuXHQgICAgICAgICAgdmFyIGJsb2NrSW5kZXhBdExlZnQgPSBzZWFyY2hCbG9ja0luZGV4IC0gMTtcblx0ICAgICAgICAgIHZhciBibG9ja0F0TGVmdCA9IHRoaXMuX2Jsb2Nrc1tibG9ja0luZGV4QXRMZWZ0XTtcblx0ICAgICAgICAgIHZhciBibG9ja0lucHV0UG9zID0gYmxvY2tBdExlZnQubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTsgLy8gaXMgaW5wdXRcblxuXHQgICAgICAgICAgaWYgKCFibG9ja0F0TGVmdC52YWx1ZS5sZW5ndGggfHwgYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdExlZnQudmFsdWUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKHNlYXJjaEJsb2NrSW5kZXgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gLy8gLT5cblxuXG5cdCAgICAgICAgdmFyIGZpcnN0SW5wdXRBdFJpZ2h0ID0gc2VhcmNoQmxvY2tJbmRleDtcblxuXHQgICAgICAgIGZvciAodmFyIGJpID0gZmlyc3RJbnB1dEF0UmlnaHQ7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xuXHQgICAgICAgICAgdmFyIGJsb2NrQXRSaWdodCA9IHRoaXMuX2Jsb2Nrc1tiaV07XG5cblx0ICAgICAgICAgIHZhciBfYmxvY2tJbnB1dFBvcyA9IGJsb2NrQXRSaWdodC5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xuXG5cdCAgICAgICAgICBpZiAoIWJsb2NrQXRSaWdodC52YWx1ZS5sZW5ndGggfHwgX2Jsb2NrSW5wdXRQb3MgIT09IGJsb2NrQXRSaWdodC52YWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpICsgX2Jsb2NrSW5wdXRQb3M7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSAvLyA8LVxuXHQgICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLWZpeGVkIHN5bWJvbFxuXG5cblx0ICAgICAgICBmb3IgKHZhciBfYmkgPSBzZWFyY2hCbG9ja0luZGV4IC0gMTsgX2JpID49IDA7IC0tX2JpKSB7XG5cdCAgICAgICAgICB2YXIgX2Jsb2NrMyA9IHRoaXMuX2Jsb2Nrc1tfYmldO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MyID0gX2Jsb2NrMy5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpOyAvLyBpcyBpbnB1dFxuXG5cblx0ICAgICAgICAgIGlmICghX2Jsb2NrMy52YWx1ZS5sZW5ndGggfHwgX2Jsb2NrSW5wdXRQb3MyICE9PSBfYmxvY2szLnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmkpICsgX2Jsb2NrMy52YWx1ZS5sZW5ndGg7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGN1cnNvclBvcztcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5MRUZUIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQpIHtcblx0ICAgICAgICAvLyAtXG5cdCAgICAgICAgLy8gIGFueXxmaWxsZWQtaW5wdXRcblx0ICAgICAgICAvLyA8LVxuXHQgICAgICAgIC8vICBhbnl8Zmlyc3Qgbm90IGVtcHR5IGlzIG5vdC1sZW4tYWxpZ25lZFxuXHQgICAgICAgIC8vICBub3QtMC1hbGlnbmVkfGFueVxuXHQgICAgICAgIC8vIC0+XG5cdCAgICAgICAgLy8gIGFueXxub3QtbGVuLWFsaWduZWQgb3IgZW5kXG5cdCAgICAgICAgLy8gY2hlY2sgaWYgZmlyc3QgYmxvY2sgYXQgcmlnaHQgaXMgZmlsbGVkIGlucHV0XG5cdCAgICAgICAgdmFyIGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQ7XG5cblx0ICAgICAgICBmb3IgKHZhciBfYmkyID0gc2VhcmNoQmxvY2tJbmRleDsgX2JpMiA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrX2JpMikge1xuXHQgICAgICAgICAgaWYgKHRoaXMuX2Jsb2Nrc1tfYmkyXS52YWx1ZSkge1xuXHQgICAgICAgICAgICBmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0ID0gX2JpMjtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQgIT0gbnVsbCkge1xuXHQgICAgICAgICAgdmFyIGZpbGxlZEJsb2NrID0gdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHRdO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MzID0gZmlsbGVkQmxvY2submVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5SSUdIVCk7XG5cblx0ICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczMgPT09IDAgJiYgZmlsbGVkQmxvY2sudW5tYXNrZWRWYWx1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgLy8gZmlsbGVkIGJsb2NrIGlzIGlucHV0XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQpICsgX2Jsb2NrSW5wdXRQb3MzO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gLy8gPC1cblx0ICAgICAgICAvLyBmaW5kIHRoaXMgdmFyc1xuXG5cblx0ICAgICAgICB2YXIgZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXggPSAtMTtcblx0ICAgICAgICB2YXIgZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleDsgLy8gVE9ETyBjb25zaWRlciBuZXN0ZWQgZW1wdHkgaW5wdXRzXG5cblx0ICAgICAgICBmb3IgKHZhciBfYmkzID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7IF9iaTMgPj0gMDsgLS1fYmkzKSB7XG5cdCAgICAgICAgICB2YXIgX2Jsb2NrNCA9IHRoaXMuX2Jsb2Nrc1tfYmkzXTtcblxuXHQgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNCA9IF9ibG9jazQubmVhcmVzdElucHV0UG9zKF9ibG9jazQudmFsdWUubGVuZ3RoLCBESVJFQ1RJT04uRk9SQ0VfTEVGVCk7XG5cblx0ICAgICAgICAgIGlmICghX2Jsb2NrNC52YWx1ZSB8fCBfYmxvY2tJbnB1dFBvczQgIT09IDApIGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXggPSBfYmkzO1xuXG5cdCAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M0ICE9PSAwKSB7XG5cdCAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczQgIT09IF9ibG9jazQudmFsdWUubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgLy8gYWxpZ25lZCBpbnNpZGUgYmxvY2sgLSByZXR1cm4gaW1tZWRpYXRlbHlcblx0ICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmkzKSArIF9ibG9ja0lucHV0UG9zNDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAvLyBmb3VuZCBmaWxsZWRcblx0ICAgICAgICAgICAgICBmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA9IF9iaTM7XG5cdCAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCkge1xuXHQgICAgICAgICAgLy8gdHJ5IGZpbmQgZmlyc3QgZW1wdHkgaW5wdXQgYmVmb3JlIHN0YXJ0IHNlYXJjaGluZyBwb3NpdGlvbiBvbmx5IHdoZW4gbm90IGZvcmNlZFxuXHQgICAgICAgICAgZm9yICh2YXIgX2JpNCA9IGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ICsgMTsgX2JpNCA8PSBNYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7ICsrX2JpNCkge1xuXHQgICAgICAgICAgICB2YXIgX2Jsb2NrNSA9IHRoaXMuX2Jsb2Nrc1tfYmk0XTtcblxuXHQgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M1ID0gX2Jsb2NrNS5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xuXG5cdCAgICAgICAgICAgIHZhciBibG9ja0FsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTQpICsgX2Jsb2NrSW5wdXRQb3M1O1xuXG5cdCAgICAgICAgICAgIGlmIChibG9ja0FsaWduZWRQb3MgPiBjdXJzb3JQb3MpIGJyZWFrOyAvLyBpZiBibG9jayBpcyBub3QgbGF6eSBpbnB1dFxuXG5cdCAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczUgIT09IF9ibG9jazUudmFsdWUubGVuZ3RoKSByZXR1cm4gYmxvY2tBbGlnbmVkUG9zO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gLy8gcHJvY2VzcyBvdmVyZmxvd1xuXG5cblx0ICAgICAgICBpZiAoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXggPj0gMCkge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgpICsgdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4XS52YWx1ZS5sZW5ndGg7XG5cdCAgICAgICAgfSAvLyBmb3IgbGF6eSBpZiBoYXMgYWxpZ25lZCBsZWZ0IGluc2lkZSBmaXhlZCBhbmQgaGFzIGNhbWUgdG8gdGhlIHN0YXJ0IC0gdXNlIHN0YXJ0IHBvc2l0aW9uXG5cblxuXHQgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUIHx8IHRoaXMubGF6eSAmJiAhdGhpcy5leHRyYWN0SW5wdXQoKSAmJiAhaXNJbnB1dCh0aGlzLl9ibG9ja3Nbc2VhcmNoQmxvY2tJbmRleF0pKSB7XG5cdCAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleCAhPSBudWxsKSB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4KTtcblx0ICAgICAgICB9IC8vIGZpbmQgZmlyc3QgaW5wdXRcblxuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpNSA9IHNlYXJjaEJsb2NrSW5kZXg7IF9iaTUgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK19iaTUpIHtcblx0ICAgICAgICAgIHZhciBfYmxvY2s2ID0gdGhpcy5fYmxvY2tzW19iaTVdO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M2ID0gX2Jsb2NrNi5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpOyAvLyBpcyBpbnB1dFxuXG5cblx0ICAgICAgICAgIGlmICghX2Jsb2NrNi52YWx1ZS5sZW5ndGggfHwgX2Jsb2NrSW5wdXRQb3M2ICE9PSBfYmxvY2s2LnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk1KSArIF9ibG9ja0lucHV0UG9zNjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5SSUdIVCB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCkge1xuXHQgICAgICAgIC8vIC0+XG5cdCAgICAgICAgLy8gIGFueXxub3QtbGVuLWFsaWduZWQgYW5kIGZpbGxlZFxuXHQgICAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkXG5cdCAgICAgICAgLy8gPC1cblx0ICAgICAgICAvLyAgbm90LTAtYWxpZ25lZCBvciBzdGFydHxhbnlcblx0ICAgICAgICB2YXIgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4O1xuXHQgICAgICAgIHZhciBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zO1xuXG5cdCAgICAgICAgZm9yICh2YXIgX2JpNiA9IHNlYXJjaEJsb2NrSW5kZXg7IF9iaTYgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK19iaTYpIHtcblx0ICAgICAgICAgIHZhciBfYmxvY2s3ID0gdGhpcy5fYmxvY2tzW19iaTZdO1xuXG5cdCAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M3ID0gX2Jsb2NrNy5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xuXG5cdCAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M3ICE9PSBfYmxvY2s3LnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk2KSArIF9ibG9ja0lucHV0UG9zNztcblx0ICAgICAgICAgICAgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4ID0gX2JpNjtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleCAhPSBudWxsICYmIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MgIT0gbnVsbCkge1xuXHQgICAgICAgICAgZm9yICh2YXIgX2JpNyA9IGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleDsgX2JpNyA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrX2JpNykge1xuXHQgICAgICAgICAgICB2YXIgX2Jsb2NrOCA9IHRoaXMuX2Jsb2Nrc1tfYmk3XTtcblxuXHQgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M4ID0gX2Jsb2NrOC5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLkZPUkNFX1JJR0hUKTtcblxuXHQgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M4ICE9PSBfYmxvY2s4LnZhbHVlLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTcpICsgX2Jsb2NrSW5wdXRQb3M4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCA/IHRoaXMudmFsdWUubGVuZ3RoIDogZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmb3IgKHZhciBfYmk4ID0gTWF0aC5taW4oc2VhcmNoQmxvY2tJbmRleCwgdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpOyBfYmk4ID49IDA7IC0tX2JpOCkge1xuXHQgICAgICAgICAgdmFyIF9ibG9jazkgPSB0aGlzLl9ibG9ja3NbX2JpOF07XG5cblx0ICAgICAgICAgIHZhciBfYmxvY2tJbnB1dFBvczkgPSBfYmxvY2s5Lm5lYXJlc3RJbnB1dFBvcyhfYmxvY2s5LnZhbHVlLmxlbmd0aCwgRElSRUNUSU9OLkxFRlQpO1xuXG5cdCAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M5ICE9PSAwKSB7XG5cdCAgICAgICAgICAgIHZhciBhbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk4KSArIF9ibG9ja0lucHV0UG9zOTtcblxuXHQgICAgICAgICAgICBpZiAoYWxpZ25lZFBvcyA+PSBjdXJzb3JQb3MpIHJldHVybiBhbGlnbmVkUG9zO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gY3Vyc29yUG9zO1xuXHQgICAgfVxuXHQgICAgLyoqIEdldCBibG9jayBieSBuYW1lICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibWFza2VkQmxvY2tcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrZWRCbG9jayhuYW1lKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm1hc2tlZEJsb2NrcyhuYW1lKVswXTtcblx0ICAgIH1cblx0ICAgIC8qKiBHZXQgYWxsIGJsb2NrcyBieSBuYW1lICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibWFza2VkQmxvY2tzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbWFza2VkQmxvY2tzKG5hbWUpIHtcblx0ICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cblx0ICAgICAgdmFyIGluZGljZXMgPSB0aGlzLl9tYXNrZWRCbG9ja3NbbmFtZV07XG5cdCAgICAgIGlmICghaW5kaWNlcykgcmV0dXJuIFtdO1xuXHQgICAgICByZXR1cm4gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGdpKSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzNC5fYmxvY2tzW2dpXTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIE1hc2tlZFBhdHRlcm47XG5cdH0oTWFza2VkKTtcblx0TWFza2VkUGF0dGVybi5ERUZBVUxUUyA9IHtcblx0ICBsYXp5OiB0cnVlLFxuXHQgIHBsYWNlaG9sZGVyQ2hhcjogJ18nXG5cdH07XG5cdE1hc2tlZFBhdHRlcm4uU1RPUF9DSEFSID0gJ2AnO1xuXHRNYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSID0gJ1xcXFwnO1xuXHRNYXNrZWRQYXR0ZXJuLklucHV0RGVmaW5pdGlvbiA9IFBhdHRlcm5JbnB1dERlZmluaXRpb247XG5cdE1hc2tlZFBhdHRlcm4uRml4ZWREZWZpbml0aW9uID0gUGF0dGVybkZpeGVkRGVmaW5pdGlvbjtcblxuXHRmdW5jdGlvbiBpc0lucHV0KGJsb2NrKSB7XG5cdCAgaWYgKCFibG9jaykgcmV0dXJuIGZhbHNlO1xuXHQgIHZhciB2YWx1ZSA9IGJsb2NrLnZhbHVlO1xuXHQgIHJldHVybiAhdmFsdWUgfHwgYmxvY2submVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKSAhPT0gdmFsdWUubGVuZ3RoO1xuXHR9XG5cblx0SU1hc2suTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XG5cblx0LyoqIFBhdHRlcm4gd2hpY2ggYWNjZXB0cyByYW5nZXMgKi9cblxuXHR2YXIgTWFza2VkUmFuZ2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXNrZWRQYXR0ZXJuKSB7XG5cdCAgX2luaGVyaXRzKE1hc2tlZFJhbmdlLCBfTWFza2VkUGF0dGVybik7XG5cblx0ICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1hc2tlZFJhbmdlKTtcblxuXHQgIGZ1bmN0aW9uIE1hc2tlZFJhbmdlKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZFJhbmdlKTtcblxuXHQgICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrZWRSYW5nZSwgW3tcblx0ICAgIGtleTogXCJfbWF0Y2hGcm9tXCIsXG5cdCAgICBnZXQ6XG5cdCAgICAvKipcblx0ICAgICAgT3B0aW9uYWxseSBzZXRzIG1heCBsZW5ndGggb2YgcGF0dGVybi5cblx0ICAgICAgVXNlZCB3aGVuIHBhdHRlcm4gbGVuZ3RoIGlzIGxvbmdlciB0aGVuIGB0b2AgcGFyYW0gbGVuZ3RoLiBQYWRzIHplcm9zIGF0IHN0YXJ0IGluIHRoaXMgY2FzZS5cblx0ICAgICovXG5cblx0ICAgIC8qKiBNaW4gYm91bmQgKi9cblxuXHQgICAgLyoqIE1heCBib3VuZCAqL1xuXG5cdCAgICAvKiogKi9cblx0ICAgIGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubWF4TGVuZ3RoIC0gU3RyaW5nKHRoaXMuZnJvbSkubGVuZ3RoO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIC8vIFRPRE8gdHlwZVxuXHQgICAgICBvcHRzID0gT2JqZWN0LmFzc2lnbih7XG5cdCAgICAgICAgdG86IHRoaXMudG8gfHwgMCxcblx0ICAgICAgICBmcm9tOiB0aGlzLmZyb20gfHwgMFxuXHQgICAgICB9LCBvcHRzKTtcblx0ICAgICAgdmFyIG1heExlbmd0aCA9IFN0cmluZyhvcHRzLnRvKS5sZW5ndGg7XG5cdCAgICAgIGlmIChvcHRzLm1heExlbmd0aCAhPSBudWxsKSBtYXhMZW5ndGggPSBNYXRoLm1heChtYXhMZW5ndGgsIG9wdHMubWF4TGVuZ3RoKTtcblx0ICAgICAgb3B0cy5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XG5cdCAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKG9wdHMuZnJvbSkucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICB2YXIgdG9TdHIgPSBTdHJpbmcob3B0cy50bykucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xuXHQgICAgICB2YXIgc2FtZUNoYXJzQ291bnQgPSAwO1xuXG5cdCAgICAgIHdoaWxlIChzYW1lQ2hhcnNDb3VudCA8IHRvU3RyLmxlbmd0aCAmJiB0b1N0cltzYW1lQ2hhcnNDb3VudF0gPT09IGZyb21TdHJbc2FtZUNoYXJzQ291bnRdKSB7XG5cdCAgICAgICAgKytzYW1lQ2hhcnNDb3VudDtcblx0ICAgICAgfVxuXG5cdCAgICAgIG9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdChtYXhMZW5ndGggLSBzYW1lQ2hhcnNDb3VudCk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImlzQ29tcGxldGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJpc0NvbXBsZXRlXCIsIHRoaXMpICYmIEJvb2xlYW4odGhpcy52YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcImJvdW5kYXJpZXNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBib3VuZGFyaWVzKHN0cikge1xuXHQgICAgICB2YXIgbWluc3RyID0gJyc7XG5cdCAgICAgIHZhciBtYXhzdHIgPSAnJztcblxuXHQgICAgICB2YXIgX3JlZiA9IHN0ci5tYXRjaCgvXihcXEQqKShcXGQqKShcXEQqKS8pIHx8IFtdLFxuXHQgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAzKSxcblx0ICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjJbMV0sXG5cdCAgICAgICAgICBudW0gPSBfcmVmMlsyXTtcblxuXHQgICAgICBpZiAobnVtKSB7XG5cdCAgICAgICAgbWluc3RyID0gJzAnLnJlcGVhdChwbGFjZWhvbGRlci5sZW5ndGgpICsgbnVtO1xuXHQgICAgICAgIG1heHN0ciA9ICc5Jy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcblx0ICAgICAgfVxuXG5cdCAgICAgIG1pbnN0ciA9IG1pbnN0ci5wYWRFbmQodGhpcy5tYXhMZW5ndGgsICcwJyk7XG5cdCAgICAgIG1heHN0ciA9IG1heHN0ci5wYWRFbmQodGhpcy5tYXhMZW5ndGgsICc5Jyk7XG5cdCAgICAgIHJldHVybiBbbWluc3RyLCBtYXhzdHJdO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ByZXBhcmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ByZXBhcmUoc3RyKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIHN0ciA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJhbmdlLnByb3RvdHlwZSksIFwiZG9QcmVwYXJlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RyLCBmbGFncykucmVwbGFjZSgvXFxEL2csICcnKTtcblx0ICAgICAgaWYgKCF0aGlzLmF1dG9maXgpIHJldHVybiBzdHI7XG5cdCAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKHRoaXMuZnJvbSkucGFkU3RhcnQodGhpcy5tYXhMZW5ndGgsICcwJyk7XG5cdCAgICAgIHZhciB0b1N0ciA9IFN0cmluZyh0aGlzLnRvKS5wYWRTdGFydCh0aGlzLm1heExlbmd0aCwgJzAnKTtcblx0ICAgICAgdmFyIHZhbCA9IHRoaXMudmFsdWU7XG5cdCAgICAgIHZhciBwcmVwU3RyID0gJyc7XG5cblx0ICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IHN0ci5sZW5ndGg7ICsrY2kpIHtcblx0ICAgICAgICB2YXIgbmV4dFZhbCA9IHZhbCArIHByZXBTdHIgKyBzdHJbY2ldO1xuXG5cdCAgICAgICAgdmFyIF90aGlzJGJvdW5kYXJpZXMgPSB0aGlzLmJvdW5kYXJpZXMobmV4dFZhbCksXG5cdCAgICAgICAgICAgIF90aGlzJGJvdW5kYXJpZXMyID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMkYm91bmRhcmllcywgMiksXG5cdCAgICAgICAgICAgIG1pbnN0ciA9IF90aGlzJGJvdW5kYXJpZXMyWzBdLFxuXHQgICAgICAgICAgICBtYXhzdHIgPSBfdGhpcyRib3VuZGFyaWVzMlsxXTtcblxuXHQgICAgICAgIGlmIChOdW1iZXIobWF4c3RyKSA8IHRoaXMuZnJvbSkgcHJlcFN0ciArPSBmcm9tU3RyW25leHRWYWwubGVuZ3RoIC0gMV07ZWxzZSBpZiAoTnVtYmVyKG1pbnN0cikgPiB0aGlzLnRvKSBwcmVwU3RyICs9IHRvU3RyW25leHRWYWwubGVuZ3RoIC0gMV07ZWxzZSBwcmVwU3RyICs9IHN0cltjaV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gcHJlcFN0cjtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XG5cdCAgICAgIHZhciBfZ2V0MjtcblxuXHQgICAgICB2YXIgc3RyID0gdGhpcy52YWx1ZTtcblx0ICAgICAgdmFyIGZpcnN0Tm9uWmVybyA9IHN0ci5zZWFyY2goL1teMF0vKTtcblx0ICAgICAgaWYgKGZpcnN0Tm9uWmVybyA9PT0gLTEgJiYgc3RyLmxlbmd0aCA8PSB0aGlzLl9tYXRjaEZyb20pIHJldHVybiB0cnVlO1xuXG5cdCAgICAgIHZhciBfdGhpcyRib3VuZGFyaWVzMyA9IHRoaXMuYm91bmRhcmllcyhzdHIpLFxuXHQgICAgICAgICAgX3RoaXMkYm91bmRhcmllczQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRib3VuZGFyaWVzMywgMiksXG5cdCAgICAgICAgICBtaW5zdHIgPSBfdGhpcyRib3VuZGFyaWVzNFswXSxcblx0ICAgICAgICAgIG1heHN0ciA9IF90aGlzJGJvdW5kYXJpZXM0WzFdO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy5mcm9tIDw9IE51bWJlcihtYXhzdHIpICYmIE51bWJlcihtaW5zdHIpIDw9IHRoaXMudG8gJiYgKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkUmFuZ2U7XG5cdH0oTWFza2VkUGF0dGVybik7XG5cdElNYXNrLk1hc2tlZFJhbmdlID0gTWFza2VkUmFuZ2U7XG5cblx0LyoqIERhdGUgbWFzayAqL1xuXG5cdHZhciBNYXNrZWREYXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza2VkUGF0dGVybikge1xuXHQgIF9pbmhlcml0cyhNYXNrZWREYXRlLCBfTWFza2VkUGF0dGVybik7XG5cblx0ICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1hc2tlZERhdGUpO1xuXG5cdCAgLyoqIFBhdHRlcm4gbWFzayBmb3IgZGF0ZSBhY2NvcmRpbmcgdG8ge0BsaW5rIE1hc2tlZERhdGUjZm9ybWF0fSAqL1xuXG5cdCAgLyoqIFN0YXJ0IGRhdGUgKi9cblxuXHQgIC8qKiBFbmQgZGF0ZSAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKipcblx0ICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG5cdCAgKi9cblx0ICBmdW5jdGlvbiBNYXNrZWREYXRlKG9wdHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWREYXRlKTtcblxuXHQgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZERhdGUuREVGQVVMVFMsIG9wdHMpKTtcblx0ICB9XG5cdCAgLyoqXG5cdCAgICBAb3ZlcnJpZGVcblx0ICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkRGF0ZSwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIGlmIChvcHRzLm1hc2sgPT09IERhdGUpIGRlbGV0ZSBvcHRzLm1hc2s7XG5cdCAgICAgIGlmIChvcHRzLnBhdHRlcm4pIG9wdHMubWFzayA9IG9wdHMucGF0dGVybjtcblx0ICAgICAgdmFyIGJsb2NrcyA9IG9wdHMuYmxvY2tzO1xuXHQgICAgICBvcHRzLmJsb2NrcyA9IE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTKCkpOyAvLyBhZGp1c3QgeWVhciBibG9ja1xuXG5cdCAgICAgIGlmIChvcHRzLm1pbikgb3B0cy5ibG9ja3MuWS5mcm9tID0gb3B0cy5taW4uZ2V0RnVsbFllYXIoKTtcblx0ICAgICAgaWYgKG9wdHMubWF4KSBvcHRzLmJsb2Nrcy5ZLnRvID0gb3B0cy5tYXguZ2V0RnVsbFllYXIoKTtcblxuXHQgICAgICBpZiAob3B0cy5taW4gJiYgb3B0cy5tYXggJiYgb3B0cy5ibG9ja3MuWS5mcm9tID09PSBvcHRzLmJsb2Nrcy5ZLnRvKSB7XG5cdCAgICAgICAgb3B0cy5ibG9ja3MubS5mcm9tID0gb3B0cy5taW4uZ2V0TW9udGgoKSArIDE7XG5cdCAgICAgICAgb3B0cy5ibG9ja3MubS50byA9IG9wdHMubWF4LmdldE1vbnRoKCkgKyAxO1xuXG5cdCAgICAgICAgaWYgKG9wdHMuYmxvY2tzLm0uZnJvbSA9PT0gb3B0cy5ibG9ja3MubS50bykge1xuXHQgICAgICAgICAgb3B0cy5ibG9ja3MuZC5mcm9tID0gb3B0cy5taW4uZ2V0RGF0ZSgpO1xuXHQgICAgICAgICAgb3B0cy5ibG9ja3MuZC50byA9IG9wdHMubWF4LmdldERhdGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBPYmplY3QuYXNzaWduKG9wdHMuYmxvY2tzLCBibG9ja3MpOyAvLyBhZGQgYXV0b2ZpeFxuXG5cdCAgICAgIE9iamVjdC5rZXlzKG9wdHMuYmxvY2tzKS5mb3JFYWNoKGZ1bmN0aW9uIChiaykge1xuXHQgICAgICAgIHZhciBiID0gb3B0cy5ibG9ja3NbYmtdO1xuXHQgICAgICAgIGlmICghKCdhdXRvZml4JyBpbiBiKSkgYi5hdXRvZml4ID0gb3B0cy5hdXRvZml4O1xuXHQgICAgICB9KTtcblxuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF9nZXQyO1xuXG5cdCAgICAgIHZhciBkYXRlID0gdGhpcy5kYXRlO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpICYmICghdGhpcy5pc0NvbXBsZXRlIHx8IHRoaXMuaXNEYXRlRXhpc3QodGhpcy52YWx1ZSkgJiYgZGF0ZSAhPSBudWxsICYmICh0aGlzLm1pbiA9PSBudWxsIHx8IHRoaXMubWluIDw9IGRhdGUpICYmICh0aGlzLm1heCA9PSBudWxsIHx8IGRhdGUgPD0gdGhpcy5tYXgpKTtcblx0ICAgIH1cblx0ICAgIC8qKiBDaGVja3MgaWYgZGF0ZSBpcyBleGlzdHMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc0RhdGVFeGlzdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRGF0ZUV4aXN0KHN0cikge1xuXHQgICAgICByZXR1cm4gdGhpcy5mb3JtYXQodGhpcy5wYXJzZShzdHIsIHRoaXMpLCB0aGlzKS5pbmRleE9mKHN0cikgPj0gMDtcblx0ICAgIH1cblx0ICAgIC8qKiBQYXJzZWQgRGF0ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRhdGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KGRhdGUpIHtcblx0ICAgICAgdGhpcy50eXBlZFZhbHVlID0gZGF0ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidHlwZWRWYWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwidHlwZWRWYWx1ZVwiLCB0aGlzKSA6IG51bGw7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZS5wcm90b3R5cGUpLCBcInR5cGVkVmFsdWVcIiwgdmFsdWUsIHRoaXMsIHRydWUpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWREYXRlO1xuXHR9KE1hc2tlZFBhdHRlcm4pO1xuXHRNYXNrZWREYXRlLkRFRkFVTFRTID0ge1xuXHQgIHBhdHRlcm46ICdkey59YG17Ln1gWScsXG5cdCAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQoZGF0ZSkge1xuXHQgICAgdmFyIGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcblx0ICAgIHZhciBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuXHQgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cdCAgICByZXR1cm4gW2RheSwgbW9udGgsIHllYXJdLmpvaW4oJy4nKTtcblx0ICB9LFxuXHQgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShzdHIpIHtcblx0ICAgIHZhciBfc3RyJHNwbGl0ID0gc3RyLnNwbGl0KCcuJyksXG5cdCAgICAgICAgX3N0ciRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfc3RyJHNwbGl0LCAzKSxcblx0ICAgICAgICBkYXkgPSBfc3RyJHNwbGl0MlswXSxcblx0ICAgICAgICBtb250aCA9IF9zdHIkc3BsaXQyWzFdLFxuXHQgICAgICAgIHllYXIgPSBfc3RyJHNwbGl0MlsyXTtcblxuXHQgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5KTtcblx0ICB9XG5cdH07XG5cblx0TWFza2VkRGF0ZS5HRVRfREVGQVVMVF9CTE9DS1MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGQ6IHtcblx0ICAgICAgbWFzazogTWFza2VkUmFuZ2UsXG5cdCAgICAgIGZyb206IDEsXG5cdCAgICAgIHRvOiAzMSxcblx0ICAgICAgbWF4TGVuZ3RoOiAyXG5cdCAgICB9LFxuXHQgICAgbToge1xuXHQgICAgICBtYXNrOiBNYXNrZWRSYW5nZSxcblx0ICAgICAgZnJvbTogMSxcblx0ICAgICAgdG86IDEyLFxuXHQgICAgICBtYXhMZW5ndGg6IDJcblx0ICAgIH0sXG5cdCAgICBZOiB7XG5cdCAgICAgIG1hc2s6IE1hc2tlZFJhbmdlLFxuXHQgICAgICBmcm9tOiAxOTAwLFxuXHQgICAgICB0bzogOTk5OVxuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cblx0SU1hc2suTWFza2VkRGF0ZSA9IE1hc2tlZERhdGU7XG5cblx0LyoqXG5cdCAgR2VuZXJpYyBlbGVtZW50IEFQSSB0byB1c2Ugd2l0aCBtYXNrXG5cdCAgQGludGVyZmFjZVxuXHQqL1xuXHR2YXIgTWFza0VsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIE1hc2tFbGVtZW50KCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tFbGVtZW50KTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza0VsZW1lbnQsIFt7XG5cdCAgICBrZXk6IFwic2VsZWN0aW9uU3RhcnRcIixcblx0ICAgIGdldDpcblx0ICAgIC8qKiAqL1xuXG5cdCAgICAvKiogKi9cblxuXHQgICAgLyoqICovXG5cblx0ICAgIC8qKiBTYWZlbHkgcmV0dXJucyBzZWxlY3Rpb24gc3RhcnQgKi9cblx0ICAgIGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgdmFyIHN0YXJ0O1xuXG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcblx0ICAgICAgfSBjYXRjaCAoZSkge31cblxuXHQgICAgICByZXR1cm4gc3RhcnQgIT0gbnVsbCA/IHN0YXJ0IDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgICAvKiogU2FmZWx5IHJldHVybnMgc2VsZWN0aW9uIGVuZCAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInNlbGVjdGlvbkVuZFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHZhciBlbmQ7XG5cblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBlbmQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25FbmQ7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cblx0ICAgICAgcmV0dXJuIGVuZCAhPSBudWxsID8gZW5kIDogdGhpcy52YWx1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgICAvKiogU2FmZWx5IHNldHMgZWxlbWVudCBzZWxlY3Rpb24gKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzZWxlY3RcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3Qoc3RhcnQsIGVuZCkge1xuXHQgICAgICBpZiAoc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCB8fCBzdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25TdGFydCAmJiBlbmQgPT09IHRoaXMuc2VsZWN0aW9uRW5kKSByZXR1cm47XG5cblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB0aGlzLl91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgICB9XG5cdCAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF91bnNhZmVTZWxlY3Qoc3RhcnQsIGVuZCkge31cblx0ICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc0FjdGl2ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJiaW5kRXZlbnRzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cyhoYW5kbGVycykge31cblx0ICAgIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bmJpbmRFdmVudHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRFdmVudHMoKSB7fVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrRWxlbWVudDtcblx0fSgpO1xuXHRJTWFzay5NYXNrRWxlbWVudCA9IE1hc2tFbGVtZW50O1xuXG5cdC8qKiBCcmlkZ2UgYmV0d2VlbiBIVE1MRWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cblxuXHR2YXIgSFRNTE1hc2tFbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza0VsZW1lbnQpIHtcblx0ICBfaW5oZXJpdHMoSFRNTE1hc2tFbGVtZW50LCBfTWFza0VsZW1lbnQpO1xuXG5cdCAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihIVE1MTWFza0VsZW1lbnQpO1xuXG5cdCAgLyoqIE1hcHBpbmcgYmV0d2VlbiBIVE1MRWxlbWVudCBldmVudHMgYW5kIG1hc2sgaW50ZXJuYWwgZXZlbnRzICovXG5cblx0ICAvKiogSFRNTEVsZW1lbnQgdG8gdXNlIG1hc2sgb24gKi9cblxuXHQgIC8qKlxuXHQgICAgQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR9IGlucHV0XG5cdCAgKi9cblx0ICBmdW5jdGlvbiBIVE1MTWFza0VsZW1lbnQoaW5wdXQpIHtcblx0ICAgIHZhciBfdGhpcztcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhUTUxNYXNrRWxlbWVudCk7XG5cblx0ICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG5cdCAgICBfdGhpcy5pbnB1dCA9IGlucHV0O1xuXHQgICAgX3RoaXMuX2hhbmRsZXJzID0ge307XG5cdCAgICByZXR1cm4gX3RoaXM7XG5cdCAgfVxuXHQgIC8qKiAqL1xuXHQgIC8vICRGbG93Rml4TWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4MzlcblxuXG5cdCAgX2NyZWF0ZUNsYXNzKEhUTUxNYXNrRWxlbWVudCwgW3tcblx0ICAgIGtleTogXCJyb290RWxlbWVudFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmlucHV0LmdldFJvb3ROb2RlID8gdGhpcy5pbnB1dC5nZXRSb290Tm9kZSgpIDogZG9jdW1lbnQ7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgSXMgZWxlbWVudCBpbiBmb2N1c1xuXHQgICAgICBAcmVhZG9ubHlcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNBY3RpdmVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAvLyRGbG93Rml4TWVcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5wdXQgPT09IHRoaXMucm9vdEVsZW1lbnQuYWN0aXZlRWxlbWVudDtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdGlvblN0YXJ0XCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgUmV0dXJucyBIVE1MRWxlbWVudCBzZWxlY3Rpb24gZW5kXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uRW5kXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5wdXQuc2VsZWN0aW9uRW5kO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFNldHMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7XG5cdCAgICAgIHRoaXMuaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgSFRNTEVsZW1lbnQgdmFsdWVcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEJpbmRzIEhUTUxFbGVtZW50IGV2ZW50cyB0byBtYXNrIGludGVybmFsIGV2ZW50c1xuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYmluZEV2ZW50c1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRFdmVudHMoaGFuZGxlcnMpIHtcblx0ICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cblx0ICAgICAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzMi5fdG9nZ2xlRXZlbnRIYW5kbGVyKEhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQW2V2ZW50XSwgaGFuZGxlcnNbZXZlbnRdKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgVW5iaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVuYmluZEV2ZW50c1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50cygpIHtcblx0ICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cblx0ICAgICAgT2JqZWN0LmtleXModGhpcy5faGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzMy5fdG9nZ2xlRXZlbnRIYW5kbGVyKGV2ZW50KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdG9nZ2xlRXZlbnRIYW5kbGVyXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3RvZ2dsZUV2ZW50SGFuZGxlcihldmVudCwgaGFuZGxlcikge1xuXHQgICAgICBpZiAodGhpcy5faGFuZGxlcnNbZXZlbnRdKSB7XG5cdCAgICAgICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLl9oYW5kbGVyc1tldmVudF0pO1xuXHQgICAgICAgIGRlbGV0ZSB0aGlzLl9oYW5kbGVyc1tldmVudF07XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoaGFuZGxlcikge1xuXHQgICAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG5cdCAgICAgICAgdGhpcy5faGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBIVE1MTWFza0VsZW1lbnQ7XG5cdH0oTWFza0VsZW1lbnQpO1xuXHRIVE1MTWFza0VsZW1lbnQuRVZFTlRTX01BUCA9IHtcblx0ICBzZWxlY3Rpb25DaGFuZ2U6ICdrZXlkb3duJyxcblx0ICBpbnB1dDogJ2lucHV0Jyxcblx0ICBkcm9wOiAnZHJvcCcsXG5cdCAgY2xpY2s6ICdjbGljaycsXG5cdCAgZm9jdXM6ICdmb2N1cycsXG5cdCAgY29tbWl0OiAnYmx1cidcblx0fTtcblx0SU1hc2suSFRNTE1hc2tFbGVtZW50ID0gSFRNTE1hc2tFbGVtZW50O1xuXG5cdHZhciBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9IVE1MTWFza0VsZW1lbnQpIHtcblx0ICBfaW5oZXJpdHMoSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50LCBfSFRNTE1hc2tFbGVtZW50KTtcblxuXHQgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50KTtcblxuXHQgIGZ1bmN0aW9uIEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQpO1xuXG5cdCAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCwgW3tcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0aW9uU3RhcnRcIixcblx0ICAgIGdldDpcblx0ICAgIC8qKlxuXHQgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cdCAgICBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHZhciByb290ID0gdGhpcy5yb290RWxlbWVudDtcblx0ICAgICAgdmFyIHNlbGVjdGlvbiA9IHJvb3QuZ2V0U2VsZWN0aW9uICYmIHJvb3QuZ2V0U2VsZWN0aW9uKCk7XG5cdCAgICAgIHJldHVybiBzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBlbmRcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl91bnNhZmVTZWxlY3Rpb25FbmRcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cdCAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuXHQgICAgICByZXR1cm4gc2VsZWN0aW9uICYmIHRoaXMuX3Vuc2FmZVNlbGVjdGlvblN0YXJ0ICsgU3RyaW5nKHNlbGVjdGlvbikubGVuZ3RoO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFNldHMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5zYWZlU2VsZWN0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7XG5cdCAgICAgIGlmICghdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSkgcmV0dXJuO1xuXHQgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnJvb3RFbGVtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdCAgICAgIHJhbmdlLnNldFN0YXJ0KHRoaXMuaW5wdXQuZmlyc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBzdGFydCk7XG5cdCAgICAgIHJhbmdlLnNldEVuZCh0aGlzLmlucHV0Lmxhc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBlbmQpO1xuXHQgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XG5cdCAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xuXG5cdCAgICAgIGlmIChzZWxlY3Rpb24pIHtcblx0ICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdCAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEhUTUxFbGVtZW50IHZhbHVlXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ2YWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIC8vICRGbG93Rml4TWVcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudGV4dENvbnRlbnQ7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XG5cdH0oSFRNTE1hc2tFbGVtZW50KTtcblx0SU1hc2suSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50ID0gSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50O1xuXG5cdHZhciBfZXhjbHVkZWQkMSA9IFtcIm1hc2tcIl07XG5cdC8qKiBMaXN0ZW5zIHRvIGVsZW1lbnQgZXZlbnRzIGFuZCBjb250cm9scyBjaGFuZ2VzIGJldHdlZW4gZWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cblxuXHR2YXIgSW5wdXRNYXNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcblx0ICAvKipcblx0ICAgIFZpZXcgZWxlbWVudFxuXHQgICAgQHJlYWRvbmx5XG5cdCAgKi9cblxuXHQgIC8qKlxuXHQgICAgSW50ZXJuYWwge0BsaW5rIE1hc2tlZH0gbW9kZWxcblx0ICAgIEByZWFkb25seVxuXHQgICovXG5cblx0ICAvKipcblx0ICAgIEBwYXJhbSB7TWFza0VsZW1lbnR8SFRNTElucHV0RWxlbWVudHxIVE1MVGV4dEFyZWFFbGVtZW50fSBlbFxuXHQgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcblx0ICAqL1xuXHQgIGZ1bmN0aW9uIElucHV0TWFzayhlbCwgb3B0cykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElucHV0TWFzayk7XG5cblx0ICAgIHRoaXMuZWwgPSBlbCBpbnN0YW5jZW9mIE1hc2tFbGVtZW50ID8gZWwgOiBlbC5pc0NvbnRlbnRFZGl0YWJsZSAmJiBlbC50YWdOYW1lICE9PSAnSU5QVVQnICYmIGVsLnRhZ05hbWUgIT09ICdURVhUQVJFQScgPyBuZXcgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50KGVsKSA6IG5ldyBIVE1MTWFza0VsZW1lbnQoZWwpO1xuXHQgICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKG9wdHMpO1xuXHQgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG5cdCAgICB0aGlzLl92YWx1ZSA9ICcnO1xuXHQgICAgdGhpcy5fdW5tYXNrZWRWYWx1ZSA9ICcnO1xuXHQgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbiA9IHRoaXMuX3NhdmVTZWxlY3Rpb24uYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuX29uSW5wdXQgPSB0aGlzLl9vbklucHV0LmJpbmQodGhpcyk7XG5cdCAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XG5cdCAgICB0aGlzLl9vbkRyb3AgPSB0aGlzLl9vbkRyb3AuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuX29uRm9jdXMgPSB0aGlzLl9vbkZvY3VzLmJpbmQodGhpcyk7XG5cdCAgICB0aGlzLl9vbkNsaWNrID0gdGhpcy5fb25DbGljay5iaW5kKHRoaXMpO1xuXHQgICAgdGhpcy5hbGlnbkN1cnNvciA9IHRoaXMuYWxpZ25DdXJzb3IuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseSA9IHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseS5iaW5kKHRoaXMpO1xuXG5cdCAgICB0aGlzLl9iaW5kRXZlbnRzKCk7IC8vIHJlZnJlc2hcblxuXG5cdCAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG5cblx0ICAgIHRoaXMuX29uQ2hhbmdlKCk7XG5cdCAgfVxuXHQgIC8qKiBSZWFkIG9yIHVwZGF0ZSBtYXNrICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhJbnB1dE1hc2ssIFt7XG5cdCAgICBrZXk6IFwibWFza1wiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm1hc2tlZC5tYXNrO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG1hc2spIHtcblx0ICAgICAgaWYgKHRoaXMubWFza0VxdWFscyhtYXNrKSkgcmV0dXJuO1xuXG5cdCAgICAgIGlmICghKG1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpICYmIHRoaXMubWFza2VkLmNvbnN0cnVjdG9yID09PSBtYXNrZWRDbGFzcyhtYXNrKSkge1xuXHQgICAgICAgIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMoe1xuXHQgICAgICAgICAgbWFzazogbWFza1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBtYXNrZWQgPSBjcmVhdGVNYXNrKHtcblx0ICAgICAgICBtYXNrOiBtYXNrXG5cdCAgICAgIH0pO1xuXHQgICAgICBtYXNrZWQudW5tYXNrZWRWYWx1ZSA9IHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XG5cdCAgICAgIHRoaXMubWFza2VkID0gbWFza2VkO1xuXHQgICAgfVxuXHQgICAgLyoqIFJhdyB2YWx1ZSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm1hc2tFcXVhbHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrRXF1YWxzKG1hc2spIHtcblx0ICAgICAgcmV0dXJuIG1hc2sgPT0gbnVsbCB8fCBtYXNrID09PSB0aGlzLm1hc2tlZC5tYXNrIHx8IG1hc2sgPT09IERhdGUgJiYgdGhpcy5tYXNrZWQgaW5zdGFuY2VvZiBNYXNrZWREYXRlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ2YWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdHIpIHtcblx0ICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSBzdHI7XG5cdCAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuXHQgICAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XG5cdCAgICB9XG5cdCAgICAvKiogVW5tYXNrZWQgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3VubWFza2VkVmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RyKSB7XG5cdCAgICAgIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWUgPSBzdHI7XG5cdCAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuXHQgICAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XG5cdCAgICB9XG5cdCAgICAvKiogVHlwZWQgdW5tYXNrZWQgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnR5cGVkVmFsdWU7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG5cdCAgICAgIHRoaXMubWFza2VkLnR5cGVkVmFsdWUgPSB2YWw7XG5cdCAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xuXHQgICAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgU3RhcnRzIGxpc3RlbmluZyB0byBlbGVtZW50IGV2ZW50c1xuXHQgICAgICBAcHJvdGVjdGVkXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9iaW5kRXZlbnRzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRFdmVudHMoKSB7XG5cdCAgICAgIHRoaXMuZWwuYmluZEV2ZW50cyh7XG5cdCAgICAgICAgc2VsZWN0aW9uQ2hhbmdlOiB0aGlzLl9zYXZlU2VsZWN0aW9uLFxuXHQgICAgICAgIGlucHV0OiB0aGlzLl9vbklucHV0LFxuXHQgICAgICAgIGRyb3A6IHRoaXMuX29uRHJvcCxcblx0ICAgICAgICBjbGljazogdGhpcy5fb25DbGljayxcblx0ICAgICAgICBmb2N1czogdGhpcy5fb25Gb2N1cyxcblx0ICAgICAgICBjb21taXQ6IHRoaXMuX29uQ2hhbmdlXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFN0b3BzIGxpc3RlbmluZyB0byBlbGVtZW50IGV2ZW50c1xuXHQgICAgICBAcHJvdGVjdGVkXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdW5iaW5kRXZlbnRzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VuYmluZEV2ZW50cygpIHtcblx0ICAgICAgaWYgKHRoaXMuZWwpIHRoaXMuZWwudW5iaW5kRXZlbnRzKCk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgRmlyZXMgY3VzdG9tIGV2ZW50XG5cdCAgICAgIEBwcm90ZWN0ZWRcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9maXJlRXZlbnRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlyZUV2ZW50KGV2KSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZdO1xuXHQgICAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xuXHQgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuXHQgICAgICAgIHJldHVybiBsLmFwcGx5KHZvaWQgMCwgYXJncyk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEN1cnJlbnQgc2VsZWN0aW9uIHN0YXJ0XG5cdCAgICAgIEByZWFkb25seVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJzZWxlY3Rpb25TdGFydFwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDogdGhpcy5lbC5zZWxlY3Rpb25TdGFydDtcblx0ICAgIH1cblx0ICAgIC8qKiBDdXJyZW50IGN1cnNvciBwb3NpdGlvbiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImN1cnNvclBvc1wiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDogdGhpcy5lbC5zZWxlY3Rpb25FbmQ7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQocG9zKSB7XG5cdCAgICAgIGlmICghdGhpcy5lbCB8fCAhdGhpcy5lbC5pc0FjdGl2ZSkgcmV0dXJuO1xuXHQgICAgICB0aGlzLmVsLnNlbGVjdChwb3MsIHBvcyk7XG5cblx0ICAgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIFN0b3JlcyBjdXJyZW50IHNlbGVjdGlvblxuXHQgICAgICBAcHJvdGVjdGVkXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9zYXZlU2VsZWN0aW9uXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3NhdmVTZWxlY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB7XG5cdCAgICAgICAgY29uc29sZS53YXJuKCdFbGVtZW50IHZhbHVlIHdhcyBjaGFuZ2VkIG91dHNpZGUgb2YgbWFzay4gU3luY3Jvbml6ZSBtYXNrIHVzaW5nIGBtYXNrLnVwZGF0ZVZhbHVlKClgIHRvIHdvcmsgcHJvcGVybHkuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5fc2VsZWN0aW9uID0ge1xuXHQgICAgICAgIHN0YXJ0OiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxuXHQgICAgICAgIGVuZDogdGhpcy5jdXJzb3JQb3Ncblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIC8qKiBTeW5jcm9uaXplcyBtb2RlbCB2YWx1ZSBmcm9tIHZpZXcgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1cGRhdGVWYWx1ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKCkge1xuXHQgICAgICB0aGlzLm1hc2tlZC52YWx1ZSA9IHRoaXMuZWwudmFsdWU7XG5cdCAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKiogU3luY3Jvbml6ZXMgdmlldyBmcm9tIG1vZGVsIHZhbHVlLCBmaXJlcyBjaGFuZ2UgZXZlbnRzICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidXBkYXRlQ29udHJvbFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2woKSB7XG5cdCAgICAgIHZhciBuZXdVbm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcblx0ICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XG5cdCAgICAgIHZhciBpc0NoYW5nZWQgPSB0aGlzLnVubWFza2VkVmFsdWUgIT09IG5ld1VubWFza2VkVmFsdWUgfHwgdGhpcy52YWx1ZSAhPT0gbmV3VmFsdWU7XG5cdCAgICAgIHRoaXMuX3VubWFza2VkVmFsdWUgPSBuZXdVbm1hc2tlZFZhbHVlO1xuXHQgICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuXHQgICAgICBpZiAodGhpcy5lbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHRoaXMuZWwudmFsdWUgPSBuZXdWYWx1ZTtcblx0ICAgICAgaWYgKGlzQ2hhbmdlZCkgdGhpcy5fZmlyZUNoYW5nZUV2ZW50cygpO1xuXHQgICAgfVxuXHQgICAgLyoqIFVwZGF0ZXMgb3B0aW9ucyB3aXRoIGRlZXAgZXF1YWwgY2hlY2ssIHJlY3JlYXRlcyBAe2xpbmsgTWFza2VkfSBtb2RlbCBpZiBtYXNrIHR5cGUgY2hhbmdlcyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVwZGF0ZU9wdGlvbnNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdHMpIHtcblx0ICAgICAgdmFyIG1hc2sgPSBvcHRzLm1hc2ssXG5cdCAgICAgICAgICByZXN0T3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRzLCBfZXhjbHVkZWQkMSk7XG5cblx0ICAgICAgdmFyIHVwZGF0ZU1hc2sgPSAhdGhpcy5tYXNrRXF1YWxzKG1hc2spO1xuXHQgICAgICB2YXIgdXBkYXRlT3B0cyA9ICFvYmplY3RJbmNsdWRlcyh0aGlzLm1hc2tlZCwgcmVzdE9wdHMpO1xuXHQgICAgICBpZiAodXBkYXRlTWFzaykgdGhpcy5tYXNrID0gbWFzaztcblx0ICAgICAgaWYgKHVwZGF0ZU9wdHMpIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMocmVzdE9wdHMpO1xuXHQgICAgICBpZiAodXBkYXRlTWFzayB8fCB1cGRhdGVPcHRzKSB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcblx0ICAgIH1cblx0ICAgIC8qKiBVcGRhdGVzIGN1cnNvciAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVwZGF0ZUN1cnNvclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpIHtcblx0ICAgICAgaWYgKGN1cnNvclBvcyA9PSBudWxsKSByZXR1cm47XG5cdCAgICAgIHRoaXMuY3Vyc29yUG9zID0gY3Vyc29yUG9zOyAvLyBhbHNvIHF1ZXVlIGNoYW5nZSBjdXJzb3IgZm9yIG1vYmlsZSBicm93c2Vyc1xuXG5cdCAgICAgIHRoaXMuX2RlbGF5VXBkYXRlQ3Vyc29yKGN1cnNvclBvcyk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgRGVsYXlzIGN1cnNvciB1cGRhdGUgdG8gc3VwcG9ydCBtb2JpbGUgYnJvd3NlcnNcblx0ICAgICAgQHByaXZhdGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2RlbGF5VXBkYXRlQ3Vyc29yXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGF5VXBkYXRlQ3Vyc29yKGN1cnNvclBvcykge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7XG5cblx0ICAgICAgdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgPSBjdXJzb3JQb3M7XG5cdCAgICAgIHRoaXMuX2N1cnNvckNoYW5naW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCFfdGhpcy5lbCkgcmV0dXJuOyAvLyBpZiB3YXMgZGVzdHJveWVkXG5cblx0ICAgICAgICBfdGhpcy5jdXJzb3JQb3MgPSBfdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3M7XG5cblx0ICAgICAgICBfdGhpcy5fYWJvcnRVcGRhdGVDdXJzb3IoKTtcblx0ICAgICAgfSwgMTApO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEZpcmVzIGN1c3RvbSBldmVudHNcblx0ICAgICAgQHByb3RlY3RlZFxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZmlyZUNoYW5nZUV2ZW50c1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXJlQ2hhbmdlRXZlbnRzKCkge1xuXHQgICAgICB0aGlzLl9maXJlRXZlbnQoJ2FjY2VwdCcsIHRoaXMuX2lucHV0RXZlbnQpO1xuXG5cdCAgICAgIGlmICh0aGlzLm1hc2tlZC5pc0NvbXBsZXRlKSB0aGlzLl9maXJlRXZlbnQoJ2NvbXBsZXRlJywgdGhpcy5faW5wdXRFdmVudCk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQWJvcnRzIGRlbGF5ZWQgY3Vyc29yIHVwZGF0ZVxuXHQgICAgICBAcHJpdmF0ZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYWJvcnRVcGRhdGVDdXJzb3JcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYWJvcnRVcGRhdGVDdXJzb3IoKSB7XG5cdCAgICAgIGlmICh0aGlzLl9jdXJzb3JDaGFuZ2luZykge1xuXHQgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jdXJzb3JDaGFuZ2luZyk7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvckNoYW5naW5nO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKiogQWxpZ25zIGN1cnNvciB0byBuZWFyZXN0IGF2YWlsYWJsZSBwb3NpdGlvbiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFsaWduQ3Vyc29yXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYWxpZ25DdXJzb3IoKSB7XG5cdCAgICAgIHRoaXMuY3Vyc29yUG9zID0gdGhpcy5tYXNrZWQubmVhcmVzdElucHV0UG9zKHRoaXMuY3Vyc29yUG9zLCBESVJFQ1RJT04uTEVGVCk7XG5cdCAgICB9XG5cdCAgICAvKiogQWxpZ25zIGN1cnNvciBvbmx5IGlmIHNlbGVjdGlvbiBpcyBlbXB0eSAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImFsaWduQ3Vyc29yRnJpZW5kbHlcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhbGlnbkN1cnNvckZyaWVuZGx5KCkge1xuXHQgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gdGhpcy5jdXJzb3JQb3MpIHJldHVybjsgLy8gc2tpcCBpZiByYW5nZSBpcyBzZWxlY3RlZFxuXG5cdCAgICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcblx0ICAgIH1cblx0ICAgIC8qKiBBZGRzIGxpc3RlbmVyIG9uIGN1c3RvbSBldmVudCAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm9uXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXYsIGhhbmRsZXIpIHtcblx0ICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbZXZdKSB0aGlzLl9saXN0ZW5lcnNbZXZdID0gW107XG5cblx0ICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2XS5wdXNoKGhhbmRsZXIpO1xuXG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfVxuXHQgICAgLyoqIFJlbW92ZXMgY3VzdG9tIGV2ZW50IGxpc3RlbmVyICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwib2ZmXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2LCBoYW5kbGVyKSB7XG5cdCAgICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2XSkgcmV0dXJuIHRoaXM7XG5cblx0ICAgICAgaWYgKCFoYW5kbGVyKSB7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldl07XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgaEluZGV4ID0gdGhpcy5fbGlzdGVuZXJzW2V2XS5pbmRleE9mKGhhbmRsZXIpO1xuXG5cdCAgICAgIGlmIChoSW5kZXggPj0gMCkgdGhpcy5fbGlzdGVuZXJzW2V2XS5zcGxpY2UoaEluZGV4LCAxKTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9XG5cdCAgICAvKiogSGFuZGxlcyB2aWV3IGlucHV0IGV2ZW50ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX29uSW5wdXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfb25JbnB1dChlKSB7XG5cdCAgICAgIHRoaXMuX2lucHV0RXZlbnQgPSBlO1xuXG5cdCAgICAgIHRoaXMuX2Fib3J0VXBkYXRlQ3Vyc29yKCk7IC8vIGZpeCBzdHJhbmdlIElFIGJlaGF2aW9yXG5cblxuXHQgICAgICBpZiAoIXRoaXMuX3NlbGVjdGlvbikgcmV0dXJuIHRoaXMudXBkYXRlVmFsdWUoKTtcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQWN0aW9uRGV0YWlscyggLy8gbmV3IHN0YXRlXG5cdCAgICAgIHRoaXMuZWwudmFsdWUsIHRoaXMuY3Vyc29yUG9zLCAvLyBvbGQgc3RhdGVcblx0ICAgICAgdGhpcy52YWx1ZSwgdGhpcy5fc2VsZWN0aW9uKTtcblx0ICAgICAgdmFyIG9sZFJhd1ZhbHVlID0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZTtcblx0ICAgICAgdmFyIG9mZnNldCA9IHRoaXMubWFza2VkLnNwbGljZShkZXRhaWxzLnN0YXJ0Q2hhbmdlUG9zLCBkZXRhaWxzLnJlbW92ZWQubGVuZ3RoLCBkZXRhaWxzLmluc2VydGVkLCBkZXRhaWxzLnJlbW92ZURpcmVjdGlvbikub2Zmc2V0OyAvLyBmb3JjZSBhbGlnbiBpbiByZW1vdmUgZGlyZWN0aW9uIG9ubHkgaWYgbm8gaW5wdXQgY2hhcnMgd2VyZSByZW1vdmVkXG5cdCAgICAgIC8vIG90aGVyd2lzZSB3ZSBzdGlsbCBuZWVkIHRvIGFsaWduIHdpdGggTk9ORSAodG8gZ2V0IG91dCBmcm9tIGZpeGVkIHN5bWJvbHMgZm9yIGluc3RhbmNlKVxuXG5cdCAgICAgIHZhciByZW1vdmVEaXJlY3Rpb24gPSBvbGRSYXdWYWx1ZSA9PT0gdGhpcy5tYXNrZWQucmF3SW5wdXRWYWx1ZSA/IGRldGFpbHMucmVtb3ZlRGlyZWN0aW9uIDogRElSRUNUSU9OLk5PTkU7XG5cdCAgICAgIHZhciBjdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3MoZGV0YWlscy5zdGFydENoYW5nZVBvcyArIG9mZnNldCwgcmVtb3ZlRGlyZWN0aW9uKTtcblx0ICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG5cdCAgICAgIHRoaXMudXBkYXRlQ3Vyc29yKGN1cnNvclBvcyk7XG5cdCAgICAgIGRlbGV0ZSB0aGlzLl9pbnB1dEV2ZW50O1xuXHQgICAgfVxuXHQgICAgLyoqIEhhbmRsZXMgdmlldyBjaGFuZ2UgZXZlbnQgYW5kIGNvbW1pdHMgbW9kZWwgdmFsdWUgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfb25DaGFuZ2VcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG5cdCAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcblx0ICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XG5cblx0ICAgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xuXHQgICAgfVxuXHQgICAgLyoqIEhhbmRsZXMgdmlldyBkcm9wIGV2ZW50LCBwcmV2ZW50cyBieSBkZWZhdWx0ICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX29uRHJvcFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRyb3AoZXYpIHtcblx0ICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICB9XG5cdCAgICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9vbkZvY3VzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX29uRm9jdXMoZXYpIHtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG5cdCAgICB9XG5cdCAgICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9vbkNsaWNrXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ2xpY2soZXYpIHtcblx0ICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XG5cdCAgICB9XG5cdCAgICAvKiogVW5iaW5kIHZpZXcgZXZlbnRzIGFuZCByZW1vdmVzIGVsZW1lbnQgcmVmZXJlbmNlICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZGVzdHJveVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpOyAvLyAkRmxvd0ZpeE1lIHdoeSBub3QgZG8gc28/XG5cblxuXHQgICAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDsgLy8gJEZsb3dGaXhNZVxuXG5cdCAgICAgIGRlbGV0ZSB0aGlzLmVsO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBJbnB1dE1hc2s7XG5cdH0oKTtcblx0SU1hc2suSW5wdXRNYXNrID0gSW5wdXRNYXNrO1xuXG5cdC8qKiBQYXR0ZXJuIHdoaWNoIHZhbGlkYXRlcyBlbnVtIHZhbHVlcyAqL1xuXG5cdHZhciBNYXNrZWRFbnVtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWFza2VkUGF0dGVybikge1xuXHQgIF9pbmhlcml0cyhNYXNrZWRFbnVtLCBfTWFza2VkUGF0dGVybik7XG5cblx0ICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1hc2tlZEVudW0pO1xuXG5cdCAgZnVuY3Rpb24gTWFza2VkRW51bSgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRFbnVtKTtcblxuXHQgICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhNYXNrZWRFbnVtLCBbe1xuXHQgICAga2V5OiBcIl91cGRhdGVcIixcblx0ICAgIHZhbHVlOlxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xuXHQgICAgKi9cblx0ICAgIGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuXHQgICAgICAvLyBUT0RPIHR5cGVcblx0ICAgICAgaWYgKG9wdHMuZW51bSkgb3B0cy5tYXNrID0gJyonLnJlcGVhdChvcHRzLmVudW1bMF0ubGVuZ3RoKTtcblxuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRFbnVtLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF90aGlzID0gdGhpcyxcblx0ICAgICAgICAgIF9nZXQyO1xuXG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gdGhpcy5lbnVtLnNvbWUoZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICByZXR1cm4gZS5pbmRleE9mKF90aGlzLnVubWFza2VkVmFsdWUpID49IDA7XG5cdCAgICAgIH0pICYmIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZEVudW0ucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkRW51bTtcblx0fShNYXNrZWRQYXR0ZXJuKTtcblx0SU1hc2suTWFza2VkRW51bSA9IE1hc2tlZEVudW07XG5cblx0LyoqXG5cdCAgTnVtYmVyIG1hc2tcblx0ICBAcGFyYW0ge09iamVjdH0gb3B0c1xuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnJhZGl4IC0gU2luZ2xlIGNoYXJcblx0ICBAcGFyYW0ge3N0cmluZ30gb3B0cy50aG91c2FuZHNTZXBhcmF0b3IgLSBTaW5nbGUgY2hhclxuXHQgIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3B0cy5tYXBUb1JhZGl4IC0gQXJyYXkgb2Ygc2luZ2xlIGNoYXJzXG5cdCAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWluXG5cdCAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWF4XG5cdCAgQHBhcmFtIHtudW1iZXJ9IG9wdHMuc2NhbGUgLSBEaWdpdHMgYWZ0ZXIgcG9pbnRcblx0ICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc2lnbmVkIC0gQWxsb3cgbmVnYXRpdmVcblx0ICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMubm9ybWFsaXplWmVyb3MgLSBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcblx0ICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMucGFkRnJhY3Rpb25hbFplcm9zIC0gRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nXG5cdCovXG5cdHZhciBNYXNrZWROdW1iZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXNrZWQpIHtcblx0ICBfaW5oZXJpdHMoTWFza2VkTnVtYmVyLCBfTWFza2VkKTtcblxuXHQgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWFza2VkTnVtYmVyKTtcblxuXHQgIC8qKiBTaW5nbGUgY2hhciAqL1xuXG5cdCAgLyoqIFNpbmdsZSBjaGFyICovXG5cblx0ICAvKiogQXJyYXkgb2Ygc2luZ2xlIGNoYXJzICovXG5cblx0ICAvKiogKi9cblxuXHQgIC8qKiAqL1xuXG5cdCAgLyoqIERpZ2l0cyBhZnRlciBwb2ludCAqL1xuXG5cdCAgLyoqICovXG5cblx0ICAvKiogRmxhZyB0byByZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgemVyb3MgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXG5cblx0ICAvKiogRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXG5cdCAgZnVuY3Rpb24gTWFza2VkTnVtYmVyKG9wdHMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWROdW1iZXIpO1xuXG5cdCAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkTnVtYmVyLkRFRkFVTFRTLCBvcHRzKSk7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAgQG92ZXJyaWRlXG5cdCAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKE1hc2tlZE51bWJlciwgW3tcblx0ICAgIGtleTogXCJfdXBkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcblxuXHQgICAgICB0aGlzLl91cGRhdGVSZWdFeHBzKCk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfdXBkYXRlUmVnRXhwc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVSZWdFeHBzKCkge1xuXHQgICAgICAvLyB1c2UgZGlmZmVyZW50IHJlZ2V4cCB0byBwcm9jZXNzIHVzZXIgaW5wdXQgKG1vcmUgc3RyaWN0LCBpbnB1dCBzdWZmaXgpIGFuZCB0YWlsIHNoaWZ0aW5nXG5cdCAgICAgIHZhciBzdGFydCA9ICdeJyArICh0aGlzLmFsbG93TmVnYXRpdmUgPyAnWyt8XFxcXC1dPycgOiAnJyk7XG5cdCAgICAgIHZhciBtaWRJbnB1dCA9ICcoMHwoWzEtOV0rXFxcXGQqKSk/Jztcblx0ICAgICAgdmFyIG1pZCA9ICdcXFxcZConO1xuXHQgICAgICB2YXIgZW5kID0gKHRoaXMuc2NhbGUgPyAnKCcgKyBlc2NhcGVSZWdFeHAodGhpcy5yYWRpeCkgKyAnXFxcXGR7MCwnICsgdGhpcy5zY2FsZSArICd9KT8nIDogJycpICsgJyQnO1xuXHQgICAgICB0aGlzLl9udW1iZXJSZWdFeHBJbnB1dCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWRJbnB1dCArIGVuZCk7XG5cdCAgICAgIHRoaXMuX251bWJlclJlZ0V4cCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWQgKyBlbmQpO1xuXHQgICAgICB0aGlzLl9tYXBUb1JhZGl4UmVnRXhwID0gbmV3IFJlZ0V4cCgnWycgKyB0aGlzLm1hcFRvUmFkaXgubWFwKGVzY2FwZVJlZ0V4cCkuam9pbignJykgKyAnXScsICdnJyk7XG5cdCAgICAgIHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSwgJ2cnKTtcblx0ICAgIH1cblx0ICAgIC8qKiAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5fdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwLCAnJyk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfaW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9yc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHZhbHVlKSB7XG5cdCAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5MDExMDIvaG93LXRvLXByaW50LWEtbnVtYmVyLXdpdGgtY29tbWFzLWFzLXRob3VzYW5kcy1zZXBhcmF0b3JzLWluLWphdmFzY3JpcHRcblx0ICAgICAgdmFyIHBhcnRzID0gdmFsdWUuc3BsaXQodGhpcy5yYWRpeCk7XG5cdCAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpO1xuXHQgICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZG9QcmVwYXJlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9QcmVwYXJlKHN0cikge1xuXHQgICAgICB2YXIgX2dldDI7XG5cblx0ICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcImRvUHJlcGFyZVwiLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MiwgW3RoaXMsIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoc3RyLnJlcGxhY2UodGhpcy5fbWFwVG9SYWRpeFJlZ0V4cCwgdGhpcy5yYWRpeCkpXS5jb25jYXQoYXJncykpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX3NlcGFyYXRvcnNDb3VudFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXBhcmF0b3JzQ291bnQodG8pIHtcblx0ICAgICAgdmFyIGV4dGVuZE9uU2VwYXJhdG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cdCAgICAgIHZhciBjb3VudCA9IDA7XG5cblx0ICAgICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgdG87ICsrcG9zKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3ZhbHVlLmluZGV4T2YodGhpcy50aG91c2FuZHNTZXBhcmF0b3IsIHBvcykgPT09IHBvcykge1xuXHQgICAgICAgICAgKytjb3VudDtcblx0ICAgICAgICAgIGlmIChleHRlbmRPblNlcGFyYXRvcnMpIHRvICs9IHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gY291bnQ7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSgpIHtcblx0ICAgICAgdmFyIHNsaWNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLl92YWx1ZTtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3NlcGFyYXRvcnNDb3VudCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHNsaWNlKS5sZW5ndGgsIHRydWUpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XG5cdCAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXHQgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0ID0gdGhpcy5fYWRqdXN0UmFuZ2VXaXRoU2VwYXJhdG9ycyhmcm9tUG9zLCB0b1Bvcyk7XG5cblx0ICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdDIgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRfYWRqdXN0UmFuZ2VXaXQsIDIpO1xuXG5cdCAgICAgIGZyb21Qb3MgPSBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQyWzBdO1xuXHQgICAgICB0b1BvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDJbMV07XG5cdCAgICAgIHJldHVybiB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcImV4dHJhY3RJbnB1dFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZyb21Qb3MsIHRvUG9zLCBmbGFncykpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwZW5kQ2hhclJhd1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRDaGFyUmF3KGNoKSB7XG5cdCAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cdCAgICAgIGlmICghdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJfYXBwZW5kQ2hhclJhd1wiLCB0aGlzKS5jYWxsKHRoaXMsIGNoLCBmbGFncyk7XG5cdCAgICAgIHZhciBwcmV2QmVmb3JlVGFpbFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLl92YWx1ZTtcblxuXHQgICAgICB2YXIgcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UocHJldkJlZm9yZVRhaWxWYWx1ZSk7XG5cblx0ICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpO1xuXG5cdCAgICAgIHZhciBhcHBlbmREZXRhaWxzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiX2FwcGVuZENoYXJSYXdcIiwgdGhpcykuY2FsbCh0aGlzLCBjaCwgZmxhZ3MpO1xuXG5cdCAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLl92YWx1ZSk7XG5cdCAgICAgIHZhciBiZWZvcmVUYWlsVmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgPyBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl92YWx1ZSA6IHRoaXMuX3ZhbHVlO1xuXG5cdCAgICAgIHZhciBiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKGJlZm9yZVRhaWxWYWx1ZSk7XG5cblx0ICAgICAgYXBwZW5kRGV0YWlscy50YWlsU2hpZnQgKz0gKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG5cdCAgICAgIGFwcGVuZERldGFpbHMuc2tpcCA9ICFhcHBlbmREZXRhaWxzLnJhd0luc2VydGVkICYmIGNoID09PSB0aGlzLnRob3VzYW5kc1NlcGFyYXRvcjtcblx0ICAgICAgcmV0dXJuIGFwcGVuZERldGFpbHM7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfZmluZFNlcGFyYXRvckFyb3VuZFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU2VwYXJhdG9yQXJvdW5kKHBvcykge1xuXHQgICAgICBpZiAodGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHtcblx0ICAgICAgICB2YXIgc2VhcmNoRnJvbSA9IHBvcyAtIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aCArIDE7XG5cdCAgICAgICAgdmFyIHNlcGFyYXRvclBvcyA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgc2VhcmNoRnJvbSk7XG5cdCAgICAgICAgaWYgKHNlcGFyYXRvclBvcyA8PSBwb3MpIHJldHVybiBzZXBhcmF0b3JQb3M7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gLTE7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbSwgdG8pIHtcblx0ICAgICAgdmFyIHNlcGFyYXRvckFyb3VuZEZyb21Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGZyb20pO1xuXG5cdCAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRGcm9tUG9zID49IDApIGZyb20gPSBzZXBhcmF0b3JBcm91bmRGcm9tUG9zO1xuXG5cdCAgICAgIHZhciBzZXBhcmF0b3JBcm91bmRUb1BvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQodG8pO1xuXG5cdCAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRUb1BvcyA+PSAwKSB0byA9IHNlcGFyYXRvckFyb3VuZFRvUG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuXHQgICAgICByZXR1cm4gW2Zyb20sIHRvXTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwicmVtb3ZlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHQgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblx0ICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcblxuXHQgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0MyA9IHRoaXMuX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbVBvcywgdG9Qb3MpO1xuXG5cdCAgICAgIHZhciBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQ0ID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMkX2FkanVzdFJhbmdlV2l0MywgMik7XG5cblx0ICAgICAgZnJvbVBvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDRbMF07XG5cdCAgICAgIHRvUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0NFsxXTtcblx0ICAgICAgdmFyIHZhbHVlQmVmb3JlUG9zID0gdGhpcy52YWx1ZS5zbGljZSgwLCBmcm9tUG9zKTtcblx0ICAgICAgdmFyIHZhbHVlQWZ0ZXJQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKHRvUG9zKTtcblxuXHQgICAgICB2YXIgcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnQodmFsdWVCZWZvcmVQb3MubGVuZ3RoKTtcblxuXHQgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh2YWx1ZUJlZm9yZVBvcyArIHZhbHVlQWZ0ZXJQb3MpKTtcblxuXHQgICAgICB2YXIgYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSh2YWx1ZUJlZm9yZVBvcyk7XG5cblx0ICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcblx0ICAgICAgICB0YWlsU2hpZnQ6IChiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50IC0gcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQpICogdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcblx0ICAgICAgaWYgKCF0aGlzLnRob3VzYW5kc1NlcGFyYXRvcikgcmV0dXJuIGN1cnNvclBvcztcblxuXHQgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XG5cdCAgICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcblx0ICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQXRMZWZ0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MgLSAxKTtcblxuXHQgICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRMZWZ0UG9zID49IDApIHtcblx0ICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQXRMZWZ0RW5kUG9zID0gc2VwYXJhdG9yQXRMZWZ0UG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgICAgaWYgKGN1cnNvclBvcyA8IHNlcGFyYXRvckF0TGVmdEVuZFBvcyB8fCB0aGlzLnZhbHVlLmxlbmd0aCA8PSBzZXBhcmF0b3JBdExlZnRFbmRQb3MgfHwgZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfTEVGVCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNlcGFyYXRvckF0TGVmdFBvcztcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxuXHQgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxuXHQgICAgICAgICAge1xuXHQgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQXRSaWdodFBvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQoY3Vyc29yUG9zKTtcblxuXHQgICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRSaWdodFBvcyA+PSAwKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHNlcGFyYXRvckF0UmlnaHRQb3MgKyB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBjdXJzb3JQb3M7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvVmFsaWRhdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKGZsYWdzKSB7XG5cdCAgICAgIHZhciByZWdleHAgPSBmbGFncy5pbnB1dCA/IHRoaXMuX251bWJlclJlZ0V4cElucHV0IDogdGhpcy5fbnVtYmVyUmVnRXhwOyAvLyB2YWxpZGF0ZSBhcyBzdHJpbmdcblxuXHQgICAgICB2YXIgdmFsaWQgPSByZWdleHAudGVzdCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpKTtcblxuXHQgICAgICBpZiAodmFsaWQpIHtcblx0ICAgICAgICAvLyB2YWxpZGF0ZSBhcyBudW1iZXJcblx0ICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5udW1iZXI7XG5cdCAgICAgICAgdmFsaWQgPSB2YWxpZCAmJiAhaXNOYU4obnVtYmVyKSAmJiAodGhpcy5taW4gPT0gbnVsbCB8fCB0aGlzLm1pbiA+PSAwIHx8IHRoaXMubWluIDw9IHRoaXMubnVtYmVyKSAmJiAodGhpcy5tYXggPT0gbnVsbCB8fCB0aGlzLm1heCA8PSAwIHx8IHRoaXMubnVtYmVyIDw9IHRoaXMubWF4KTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiB2YWxpZCAmJiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgZmxhZ3MpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0NvbW1pdFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xuXHQgICAgICBpZiAodGhpcy52YWx1ZSkge1xuXHQgICAgICAgIHZhciBudW1iZXIgPSB0aGlzLm51bWJlcjtcblx0ICAgICAgICB2YXIgdmFsaWRudW0gPSBudW1iZXI7IC8vIGNoZWNrIGJvdW5kc1xuXG5cdCAgICAgICAgaWYgKHRoaXMubWluICE9IG51bGwpIHZhbGlkbnVtID0gTWF0aC5tYXgodmFsaWRudW0sIHRoaXMubWluKTtcblx0ICAgICAgICBpZiAodGhpcy5tYXggIT0gbnVsbCkgdmFsaWRudW0gPSBNYXRoLm1pbih2YWxpZG51bSwgdGhpcy5tYXgpO1xuXHQgICAgICAgIGlmICh2YWxpZG51bSAhPT0gbnVtYmVyKSB0aGlzLnVubWFza2VkVmFsdWUgPSBTdHJpbmcodmFsaWRudW0pO1xuXHQgICAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLnZhbHVlO1xuXHQgICAgICAgIGlmICh0aGlzLm5vcm1hbGl6ZVplcm9zKSBmb3JtYXR0ZWQgPSB0aGlzLl9ub3JtYWxpemVaZXJvcyhmb3JtYXR0ZWQpO1xuXHQgICAgICAgIGlmICh0aGlzLnBhZEZyYWN0aW9uYWxaZXJvcykgZm9ybWF0dGVkID0gdGhpcy5fcGFkRnJhY3Rpb25hbFplcm9zKGZvcm1hdHRlZCk7XG5cdCAgICAgICAgdGhpcy5fdmFsdWUgPSBmb3JtYXR0ZWQ7XG5cdCAgICAgIH1cblxuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb0NvbW1pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXHQgICAgfVxuXHQgICAgLyoqICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX25vcm1hbGl6ZVplcm9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX25vcm1hbGl6ZVplcm9zKHZhbHVlKSB7XG5cdCAgICAgIHZhciBwYXJ0cyA9IHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpLnNwbGl0KHRoaXMucmFkaXgpOyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvc1xuXG5cblx0ICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9eKFxcRCopKDAqKShcXGQqKS8sIGZ1bmN0aW9uIChtYXRjaCwgc2lnbiwgemVyb3MsIG51bSkge1xuXHQgICAgICAgIHJldHVybiBzaWduICsgbnVtO1xuXHQgICAgICB9KTsgLy8gYWRkIGxlYWRpbmcgemVyb1xuXG5cdCAgICAgIGlmICh2YWx1ZS5sZW5ndGggJiYgIS9cXGQkLy50ZXN0KHBhcnRzWzBdKSkgcGFydHNbMF0gPSBwYXJ0c1swXSArICcwJztcblxuXHQgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucmVwbGFjZSgvMCokLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgemVyb3NcblxuXHQgICAgICAgIGlmICghcGFydHNbMV0ubGVuZ3RoKSBwYXJ0cy5sZW5ndGggPSAxOyAvLyByZW1vdmUgZnJhY3Rpb25hbFxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRoaXMuX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnMocGFydHMuam9pbih0aGlzLnJhZGl4KSk7XG5cdCAgICB9XG5cdCAgICAvKiogKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfcGFkRnJhY3Rpb25hbFplcm9zXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3BhZEZyYWN0aW9uYWxaZXJvcyh2YWx1ZSkge1xuXHQgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cdCAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNwbGl0KHRoaXMucmFkaXgpO1xuXHQgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMikgcGFydHMucHVzaCgnJyk7XG5cdCAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucGFkRW5kKHRoaXMuc2NhbGUsICcwJyk7XG5cdCAgICAgIHJldHVybiBwYXJ0cy5qb2luKHRoaXMucmFkaXgpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ1bm1hc2tlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fbm9ybWFsaXplWmVyb3ModGhpcy52YWx1ZSkpLnJlcGxhY2UodGhpcy5yYWRpeCwgJy4nKTtcblx0ICAgIH0sXG5cdCAgICBzZXQ6IGZ1bmN0aW9uIHNldCh1bm1hc2tlZFZhbHVlKSB7XG5cdCAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZS5yZXBsYWNlKCcuJywgdGhpcy5yYWRpeCksIHRoaXMsIHRydWUpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnVubWFza2VkVmFsdWUpO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG4pIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCBTdHJpbmcobiksIHRoaXMsIHRydWUpO1xuXHQgICAgfVxuXHQgICAgLyoqIFBhcnNlZCBOdW1iZXIgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJudW1iZXJcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KG51bWJlcikge1xuXHQgICAgICB0aGlzLnR5cGVkVmFsdWUgPSBudW1iZXI7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgSXMgbmVnYXRpdmUgYWxsb3dlZFxuXHQgICAgICBAcmVhZG9ubHlcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYWxsb3dOZWdhdGl2ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNpZ25lZCB8fCB0aGlzLm1pbiAhPSBudWxsICYmIHRoaXMubWluIDwgMCB8fCB0aGlzLm1heCAhPSBudWxsICYmIHRoaXMubWF4IDwgMDtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWFza2VkTnVtYmVyO1xuXHR9KE1hc2tlZCk7XG5cdE1hc2tlZE51bWJlci5ERUZBVUxUUyA9IHtcblx0ICByYWRpeDogJywnLFxuXHQgIHRob3VzYW5kc1NlcGFyYXRvcjogJycsXG5cdCAgbWFwVG9SYWRpeDogWycuJ10sXG5cdCAgc2NhbGU6IDIsXG5cdCAgc2lnbmVkOiBmYWxzZSxcblx0ICBub3JtYWxpemVaZXJvczogdHJ1ZSxcblx0ICBwYWRGcmFjdGlvbmFsWmVyb3M6IGZhbHNlXG5cdH07XG5cdElNYXNrLk1hc2tlZE51bWJlciA9IE1hc2tlZE51bWJlcjtcblxuXHQvKiogTWFza2luZyBieSBjdXN0b20gRnVuY3Rpb24gKi9cblxuXHR2YXIgTWFza2VkRnVuY3Rpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NYXNrZWQpIHtcblx0ICBfaW5oZXJpdHMoTWFza2VkRnVuY3Rpb24sIF9NYXNrZWQpO1xuXG5cdCAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNYXNrZWRGdW5jdGlvbik7XG5cblx0ICBmdW5jdGlvbiBNYXNrZWRGdW5jdGlvbigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRGdW5jdGlvbik7XG5cblx0ICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoTWFza2VkRnVuY3Rpb24sIFt7XG5cdCAgICBrZXk6IFwiX3VwZGF0ZVwiLFxuXHQgICAgdmFsdWU6XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG5cdCAgICAqL1xuXHQgICAgZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XG5cdCAgICAgIGlmIChvcHRzLm1hc2spIG9wdHMudmFsaWRhdGUgPSBvcHRzLm1hc2s7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRnVuY3Rpb24ucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIE1hc2tlZEZ1bmN0aW9uO1xuXHR9KE1hc2tlZCk7XG5cdElNYXNrLk1hc2tlZEZ1bmN0aW9uID0gTWFza2VkRnVuY3Rpb247XG5cblx0dmFyIF9leGNsdWRlZCA9IFtcImNvbXBpbGVkTWFza3NcIiwgXCJjdXJyZW50TWFza1JlZlwiLCBcImN1cnJlbnRNYXNrXCJdO1xuXG5cdC8qKiBEeW5hbWljIG1hc2sgZm9yIGNob29zaW5nIGFwcm9wcmlhdGUgbWFzayBpbiBydW4tdGltZSAqL1xuXHR2YXIgTWFza2VkRHluYW1pYyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01hc2tlZCkge1xuXHQgIF9pbmhlcml0cyhNYXNrZWREeW5hbWljLCBfTWFza2VkKTtcblxuXHQgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWFza2VkRHluYW1pYyk7XG5cblx0ICAvKiogQ3VycmVudGx5IGNob3NlbiBtYXNrICovXG5cblx0ICAvKiogQ29tcGxpbGVkIHtAbGluayBNYXNrZWR9IG9wdGlvbnMgKi9cblxuXHQgIC8qKiBDaG9vc2VzIHtAbGluayBNYXNrZWR9IGRlcGVuZGluZyBvbiBpbnB1dCB2YWx1ZSAqL1xuXG5cdCAgLyoqXG5cdCAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xuXHQgICovXG5cdCAgZnVuY3Rpb24gTWFza2VkRHluYW1pYyhvcHRzKSB7XG5cdCAgICB2YXIgX3RoaXM7XG5cblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWREeW5hbWljKTtcblxuXHQgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBPYmplY3QuYXNzaWduKHt9LCBNYXNrZWREeW5hbWljLkRFRkFVTFRTLCBvcHRzKSk7XG5cdCAgICBfdGhpcy5jdXJyZW50TWFzayA9IG51bGw7XG5cdCAgICByZXR1cm4gX3RoaXM7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAgQG92ZXJyaWRlXG5cdCAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKE1hc2tlZER5bmFtaWMsIFt7XG5cdCAgICBrZXk6IFwiX3VwZGF0ZVwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xuXHQgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xuXG5cdCAgICAgIGlmICgnbWFzaycgaW4gb3B0cykge1xuXHQgICAgICAgIC8vIG1hc2sgY291bGQgYmUgdG90YWxseSBkeW5hbWljIHdpdGggb25seSBgZGlzcGF0Y2hgIG9wdGlvblxuXHQgICAgICAgIHRoaXMuY29tcGlsZWRNYXNrcyA9IEFycmF5LmlzQXJyYXkob3B0cy5tYXNrKSA/IG9wdHMubWFzay5tYXAoZnVuY3Rpb24gKG0pIHtcblx0ICAgICAgICAgIHJldHVybiBjcmVhdGVNYXNrKG0pO1xuXHQgICAgICAgIH0pIDogW107XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdCAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwbHlEaXNwYXRjaChjaCwgZmxhZ3MpO1xuXG5cdCAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XG5cdCAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUodGhpcy5jdXJyZW50TWFzay5fYXBwZW5kQ2hhcihjaCwgZmxhZ3MpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJfYXBwbHlEaXNwYXRjaFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBseURpc3BhdGNoKCkge1xuXHQgICAgICB2YXIgYXBwZW5kZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICB2YXIgcHJldlZhbHVlQmVmb3JlVGFpbCA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSAhPSBudWxsID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLnZhbHVlO1xuXHQgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHRoaXMucmF3SW5wdXRWYWx1ZTtcblx0ICAgICAgdmFyIGluc2VydFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlICE9IG51bGwgPyAvLyAkRmxvd0ZpeE1lIC0gdGlyZWQgdG8gZmlnaHQgd2l0aCB0eXBlIHN5c3RlbVxuXHQgICAgICBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl9yYXdJbnB1dFZhbHVlIDogaW5wdXRWYWx1ZTtcblx0ICAgICAgdmFyIHRhaWxWYWx1ZSA9IGlucHV0VmFsdWUuc2xpY2UoaW5zZXJ0VmFsdWUubGVuZ3RoKTtcblx0ICAgICAgdmFyIHByZXZNYXNrID0gdGhpcy5jdXJyZW50TWFzaztcblx0ICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xuXHQgICAgICB2YXIgcHJldk1hc2tTdGF0ZSA9IHByZXZNYXNrICYmIHByZXZNYXNrLnN0YXRlOyAvLyBjbG9uZSBmbGFncyB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIGBfYmVmb3JlVGFpbFN0YXRlYFxuXG5cdCAgICAgIHRoaXMuY3VycmVudE1hc2sgPSB0aGlzLmRvRGlzcGF0Y2goYXBwZW5kZWQsIE9iamVjdC5hc3NpZ24oe30sIGZsYWdzKSk7IC8vIHJlc3RvcmUgc3RhdGUgYWZ0ZXIgZGlzcGF0Y2hcblxuXHQgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuXHQgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrICE9PSBwcmV2TWFzaykge1xuXHQgICAgICAgICAgLy8gaWYgbWFzayBjaGFuZ2VkIHJlYXBwbHkgaW5wdXRcblx0ICAgICAgICAgIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcblxuXHQgICAgICAgICAgaWYgKGluc2VydFZhbHVlKSB7XG5cdCAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBpdCdzIG9rLCB3ZSBkb24ndCBjaGFuZ2UgY3VycmVudCBtYXNrIGFib3ZlXG5cdCAgICAgICAgICAgIHZhciBkID0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQoaW5zZXJ0VmFsdWUsIHtcblx0ICAgICAgICAgICAgICByYXc6IHRydWVcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ID0gZC5pbnNlcnRlZC5sZW5ndGggLSBwcmV2VmFsdWVCZWZvcmVUYWlsLmxlbmd0aDtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgaWYgKHRhaWxWYWx1ZSkge1xuXHQgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gaXQncyBvaywgd2UgZG9uJ3QgY2hhbmdlIGN1cnJlbnQgbWFzayBhYm92ZVxuXHQgICAgICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmN1cnJlbnRNYXNrLmFwcGVuZCh0YWlsVmFsdWUsIHtcblx0ICAgICAgICAgICAgICByYXc6IHRydWUsXG5cdCAgICAgICAgICAgICAgdGFpbDogdHJ1ZVxuXHQgICAgICAgICAgICB9KS50YWlsU2hpZnQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIERpc3BhdGNoIGNhbiBkbyBzb21ldGhpbmcgYmFkIHdpdGggc3RhdGUsIHNvXG5cdCAgICAgICAgICAvLyByZXN0b3JlIHByZXYgbWFzayBzdGF0ZVxuXHQgICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IHByZXZNYXNrU3RhdGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGRldGFpbHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcblx0ICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcblx0ICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBkZXRhaWxzO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb0Rpc3BhdGNoXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9EaXNwYXRjaChhcHBlbmRlZCkge1xuXHQgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXHQgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChhcHBlbmRlZCwgdGhpcywgZmxhZ3MpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcblx0ICAgICAgdmFyIF9nZXQyLCBfdGhpcyRjdXJyZW50TWFzaztcblxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSAmJiAoIXRoaXMuY3VycmVudE1hc2sgfHwgKF90aGlzJGN1cnJlbnRNYXNrID0gdGhpcy5jdXJyZW50TWFzaykuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRjdXJyZW50TWFzaywgYXJncykpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZXNldFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykgdGhpcy5jdXJyZW50TWFzay5yZXNldCgpO1xuXHQgICAgICB0aGlzLmNvbXBpbGVkTWFza3MuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuXHQgICAgICAgIHJldHVybiBtLnJlc2V0KCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ2YWx1ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay52YWx1ZSA6ICcnO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJ2YWx1ZVwiLCB2YWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudW5tYXNrZWRWYWx1ZSA6ICcnO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInVubWFza2VkVmFsdWVcIiwgdW5tYXNrZWRWYWx1ZSwgdGhpcywgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInR5cGVkVmFsdWVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudHlwZWRWYWx1ZSA6ICcnO1xuXHQgICAgfSAvLyBwcm9iYWJseSB0eXBlZFZhbHVlIHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIGR5bmFtaWNcblx0ICAgICxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gU3RyaW5nKHZhbHVlKTsgLy8gZG91YmxlIGNoZWNrIGl0XG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRNYXNrLnR5cGVkVmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB1bm1hc2tlZFZhbHVlID0gdGhpcy5jdXJyZW50TWFzay51bm1hc2tlZFZhbHVlO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy51bm1hc2tlZFZhbHVlID0gdW5tYXNrZWRWYWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgIHJldHVybiAhIXRoaXMuY3VycmVudE1hc2sgJiYgdGhpcy5jdXJyZW50TWFzay5pc0NvbXBsZXRlO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgIEBvdmVycmlkZVxuXHQgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJyZW1vdmVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG5cdCAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcblxuXHQgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xuXHQgICAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazI7XG5cblx0ICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSgoX3RoaXMkY3VycmVudE1hc2syID0gdGhpcy5jdXJyZW50TWFzaykucmVtb3ZlLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrMiwgYXJndW1lbnRzKSkgLy8gdXBkYXRlIHdpdGggZGlzcGF0Y2hcblx0ICAgICAgICAuYWdncmVnYXRlKHRoaXMuX2FwcGx5RGlzcGF0Y2goKSk7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZGV0YWlscztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwic3RhdGVcIixcblx0ICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInN0YXRlXCIsIHRoaXMpLCB7XG5cdCAgICAgICAgX3Jhd0lucHV0VmFsdWU6IHRoaXMucmF3SW5wdXRWYWx1ZSxcblx0ICAgICAgICBjb21waWxlZE1hc2tzOiB0aGlzLmNvbXBpbGVkTWFza3MubWFwKGZ1bmN0aW9uIChtKSB7XG5cdCAgICAgICAgICByZXR1cm4gbS5zdGF0ZTtcblx0ICAgICAgICB9KSxcblx0ICAgICAgICBjdXJyZW50TWFza1JlZjogdGhpcy5jdXJyZW50TWFzayxcblx0ICAgICAgICBjdXJyZW50TWFzazogdGhpcy5jdXJyZW50TWFzayAmJiB0aGlzLmN1cnJlbnRNYXNrLnN0YXRlXG5cdCAgICAgIH0pO1xuXHQgICAgfSxcblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XG5cdCAgICAgIHZhciBjb21waWxlZE1hc2tzID0gc3RhdGUuY29tcGlsZWRNYXNrcyxcblx0ICAgICAgICAgIGN1cnJlbnRNYXNrUmVmID0gc3RhdGUuY3VycmVudE1hc2tSZWYsXG5cdCAgICAgICAgICBjdXJyZW50TWFzayA9IHN0YXRlLmN1cnJlbnRNYXNrLFxuXHQgICAgICAgICAgbWFza2VkU3RhdGUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIF9leGNsdWRlZCk7XG5cblx0ICAgICAgdGhpcy5jb21waWxlZE1hc2tzLmZvckVhY2goZnVuY3Rpb24gKG0sIG1pKSB7XG5cdCAgICAgICAgcmV0dXJuIG0uc3RhdGUgPSBjb21waWxlZE1hc2tzW21pXTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgaWYgKGN1cnJlbnRNYXNrUmVmICE9IG51bGwpIHtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRNYXNrID0gY3VycmVudE1hc2tSZWY7XG5cdCAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IGN1cnJlbnRNYXNrO1xuXHQgICAgICB9XG5cblx0ICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdElucHV0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdElucHV0KCkge1xuXHQgICAgICB2YXIgX3RoaXMkY3VycmVudE1hc2szO1xuXG5cdCAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gKF90aGlzJGN1cnJlbnRNYXNrMyA9IHRoaXMuY3VycmVudE1hc2spLmV4dHJhY3RJbnB1dC5hcHBseShfdGhpcyRjdXJyZW50TWFzazMsIGFyZ3VtZW50cykgOiAnJztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICBAb3ZlcnJpZGVcblx0ICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcblx0ICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNCwgX2dldDM7XG5cblx0ICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG5cdCAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyAoX3RoaXMkY3VycmVudE1hc2s0ID0gdGhpcy5jdXJyZW50TWFzaykuZXh0cmFjdFRhaWwuYXBwbHkoX3RoaXMkY3VycmVudE1hc2s0LCBhcmdzKSA6IChfZ2V0MyA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJleHRyYWN0VGFpbFwiLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MywgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImRvQ29tbWl0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG9Db21taXQoKSB7XG5cdCAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB0aGlzLmN1cnJlbnRNYXNrLmRvQ29tbWl0KCk7XG5cblx0ICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcImRvQ29tbWl0XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAgQG92ZXJyaWRlXG5cdCAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcygpIHtcblx0ICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNSwgX2dldDQ7XG5cblx0ICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG5cdCAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyAoX3RoaXMkY3VycmVudE1hc2s1ID0gdGhpcy5jdXJyZW50TWFzaykubmVhcmVzdElucHV0UG9zLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrNSwgYXJncykgOiAoX2dldDQgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwibmVhcmVzdElucHV0UG9zXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQ0LCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwib3ZlcndyaXRlXCIsXG5cdCAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLm92ZXJ3cml0ZSA6IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJvdmVyd3JpdGVcIiwgdGhpcyk7XG5cdCAgICB9LFxuXHQgICAgc2V0OiBmdW5jdGlvbiBzZXQob3ZlcndyaXRlKSB7XG5cdCAgICAgIGNvbnNvbGUud2FybignXCJvdmVyd3JpdGVcIiBvcHRpb24gaXMgbm90IGF2YWlsYWJsZSBpbiBkeW5hbWljIG1hc2ssIHVzZSB0aGlzIG9wdGlvbiBpbiBzaWJsaW5ncycpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBNYXNrZWREeW5hbWljO1xuXHR9KE1hc2tlZCk7XG5cdE1hc2tlZER5bmFtaWMuREVGQVVMVFMgPSB7XG5cdCAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGFwcGVuZGVkLCBtYXNrZWQsIGZsYWdzKSB7XG5cdCAgICBpZiAoIW1hc2tlZC5jb21waWxlZE1hc2tzLmxlbmd0aCkgcmV0dXJuO1xuXHQgICAgdmFyIGlucHV0VmFsdWUgPSBtYXNrZWQucmF3SW5wdXRWYWx1ZTsgLy8gc2ltdWxhdGUgaW5wdXRcblxuXHQgICAgdmFyIGlucHV0cyA9IG1hc2tlZC5jb21waWxlZE1hc2tzLm1hcChmdW5jdGlvbiAobSwgaW5kZXgpIHtcblx0ICAgICAgbS5yZXNldCgpO1xuXHQgICAgICBtLmFwcGVuZChpbnB1dFZhbHVlLCB7XG5cdCAgICAgICAgcmF3OiB0cnVlXG5cdCAgICAgIH0pO1xuXHQgICAgICBtLmFwcGVuZChhcHBlbmRlZCwgZmxhZ3MpO1xuXHQgICAgICB2YXIgd2VpZ2h0ID0gbS5yYXdJbnB1dFZhbHVlLmxlbmd0aDtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICB3ZWlnaHQ6IHdlaWdodCxcblx0ICAgICAgICBpbmRleDogaW5kZXhcblx0ICAgICAgfTtcblx0ICAgIH0pOyAvLyBwb3AgbWFza3Mgd2l0aCBsb25nZXIgdmFsdWVzIGZpcnN0XG5cblx0ICAgIGlucHV0cy5zb3J0KGZ1bmN0aW9uIChpMSwgaTIpIHtcblx0ICAgICAgcmV0dXJuIGkyLndlaWdodCAtIGkxLndlaWdodDtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIG1hc2tlZC5jb21waWxlZE1hc2tzW2lucHV0c1swXS5pbmRleF07XG5cdCAgfVxuXHR9O1xuXHRJTWFzay5NYXNrZWREeW5hbWljID0gTWFza2VkRHluYW1pYztcblxuXHQvKiogTWFzayBwaXBlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gdHlwZXMgKi9cblxuXHR2YXIgUElQRV9UWVBFID0ge1xuXHQgIE1BU0tFRDogJ3ZhbHVlJyxcblx0ICBVTk1BU0tFRDogJ3VubWFza2VkVmFsdWUnLFxuXHQgIFRZUEVEOiAndHlwZWRWYWx1ZSdcblx0fTtcblx0LyoqIENyZWF0ZXMgbmV3IHBpcGUgZnVuY3Rpb24gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cblx0ZnVuY3Rpb24gY3JlYXRlUGlwZShtYXNrKSB7XG5cdCAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFBJUEVfVFlQRS5NQVNLRUQ7XG5cdCAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQSVBFX1RZUEUuTUFTS0VEO1xuXHQgIHZhciBtYXNrZWQgPSBjcmVhdGVNYXNrKG1hc2spO1xuXHQgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgIHJldHVybiBtYXNrZWQucnVuSXNvbGF0ZWQoZnVuY3Rpb24gKG0pIHtcblx0ICAgICAgbVtmcm9tXSA9IHZhbHVlO1xuXHQgICAgICByZXR1cm4gbVt0b107XG5cdCAgICB9KTtcblx0ICB9O1xuXHR9XG5cdC8qKiBQaXBlcyB2YWx1ZSB0aHJvdWdoIG1hc2sgZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXG5cblx0ZnVuY3Rpb24gcGlwZSh2YWx1ZSkge1xuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwaXBlQXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICBwaXBlQXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGNyZWF0ZVBpcGUuYXBwbHkodm9pZCAwLCBwaXBlQXJncykodmFsdWUpO1xuXHR9XG5cdElNYXNrLlBJUEVfVFlQRSA9IFBJUEVfVFlQRTtcblx0SU1hc2suY3JlYXRlUGlwZSA9IGNyZWF0ZVBpcGU7XG5cdElNYXNrLnBpcGUgPSBwaXBlO1xuXG5cdHRyeSB7XG5cdCAgZ2xvYmFsVGhpcy5JTWFzayA9IElNYXNrO1xuXHR9IGNhdGNoIChlKSB7fVxuXG5cdGV4cG9ydHMuSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50ID0gSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50O1xuXHRleHBvcnRzLkhUTUxNYXNrRWxlbWVudCA9IEhUTUxNYXNrRWxlbWVudDtcblx0ZXhwb3J0cy5JbnB1dE1hc2sgPSBJbnB1dE1hc2s7XG5cdGV4cG9ydHMuTWFza0VsZW1lbnQgPSBNYXNrRWxlbWVudDtcblx0ZXhwb3J0cy5NYXNrZWQgPSBNYXNrZWQ7XG5cdGV4cG9ydHMuTWFza2VkRGF0ZSA9IE1hc2tlZERhdGU7XG5cdGV4cG9ydHMuTWFza2VkRHluYW1pYyA9IE1hc2tlZER5bmFtaWM7XG5cdGV4cG9ydHMuTWFza2VkRW51bSA9IE1hc2tlZEVudW07XG5cdGV4cG9ydHMuTWFza2VkRnVuY3Rpb24gPSBNYXNrZWRGdW5jdGlvbjtcblx0ZXhwb3J0cy5NYXNrZWROdW1iZXIgPSBNYXNrZWROdW1iZXI7XG5cdGV4cG9ydHMuTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XG5cdGV4cG9ydHMuTWFza2VkUmFuZ2UgPSBNYXNrZWRSYW5nZTtcblx0ZXhwb3J0cy5NYXNrZWRSZWdFeHAgPSBNYXNrZWRSZWdFeHA7XG5cdGV4cG9ydHMuUElQRV9UWVBFID0gUElQRV9UWVBFO1xuXHRleHBvcnRzLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xuXHRleHBvcnRzLmNyZWF0ZVBpcGUgPSBjcmVhdGVQaXBlO1xuXHRleHBvcnRzWydkZWZhdWx0J10gPSBJTWFzaztcblx0ZXhwb3J0cy5waXBlID0gcGlwZTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hc2suanMubWFwXG47Il19
